
USB_Blackpill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079bc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000168  08007b54  08007b54  00017b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cbc  08007cbc  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  08007cbc  08007cbc  00017cbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007cc4  08007cc4  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cc4  08007cc4  00017cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cc8  08007cc8  00017cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08007ccc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c78  20000160  08007e2c  00020160  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001dd8  08007e2c  00021dd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013650  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003140  00000000  00000000  000337e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  00036920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f50  00000000  00000000  000379e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019936  00000000  00000000  00038938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001549e  00000000  00000000  0005226e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f757  00000000  00000000  0006770c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f6e63  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004600  00000000  00000000  000f6eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000160 	.word	0x20000160
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007b3c 	.word	0x08007b3c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000164 	.word	0x20000164
 80001d4:	08007b3c 	.word	0x08007b3c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004e2:	f107 030c 	add.w	r3, r7, #12
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
 80004f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f2:	2300      	movs	r3, #0
 80004f4:	60bb      	str	r3, [r7, #8]
 80004f6:	4b20      	ldr	r3, [pc, #128]	; (8000578 <MX_GPIO_Init+0x9c>)
 80004f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fa:	4a1f      	ldr	r2, [pc, #124]	; (8000578 <MX_GPIO_Init+0x9c>)
 80004fc:	f043 0304 	orr.w	r3, r3, #4
 8000500:	6313      	str	r3, [r2, #48]	; 0x30
 8000502:	4b1d      	ldr	r3, [pc, #116]	; (8000578 <MX_GPIO_Init+0x9c>)
 8000504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000506:	f003 0304 	and.w	r3, r3, #4
 800050a:	60bb      	str	r3, [r7, #8]
 800050c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800050e:	2300      	movs	r3, #0
 8000510:	607b      	str	r3, [r7, #4]
 8000512:	4b19      	ldr	r3, [pc, #100]	; (8000578 <MX_GPIO_Init+0x9c>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	4a18      	ldr	r2, [pc, #96]	; (8000578 <MX_GPIO_Init+0x9c>)
 8000518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800051c:	6313      	str	r3, [r2, #48]	; 0x30
 800051e:	4b16      	ldr	r3, [pc, #88]	; (8000578 <MX_GPIO_Init+0x9c>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000526:	607b      	str	r3, [r7, #4]
 8000528:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	2300      	movs	r3, #0
 800052c:	603b      	str	r3, [r7, #0]
 800052e:	4b12      	ldr	r3, [pc, #72]	; (8000578 <MX_GPIO_Init+0x9c>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	4a11      	ldr	r2, [pc, #68]	; (8000578 <MX_GPIO_Init+0x9c>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6313      	str	r3, [r2, #48]	; 0x30
 800053a:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <MX_GPIO_Init+0x9c>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	603b      	str	r3, [r7, #0]
 8000544:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800054c:	480b      	ldr	r0, [pc, #44]	; (800057c <MX_GPIO_Init+0xa0>)
 800054e:	f000 fd27 	bl	8000fa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000552:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000556:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000558:	2301      	movs	r3, #1
 800055a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000560:	2300      	movs	r3, #0
 8000562:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	4619      	mov	r1, r3
 800056a:	4804      	ldr	r0, [pc, #16]	; (800057c <MX_GPIO_Init+0xa0>)
 800056c:	f000 fb94 	bl	8000c98 <HAL_GPIO_Init>

}
 8000570:	bf00      	nop
 8000572:	3720      	adds	r7, #32
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40023800 	.word	0x40023800
 800057c:	40020800 	.word	0x40020800

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f000 f9df 	bl	8000948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f825 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f7ff ffa5 	bl	80004dc <MX_GPIO_Init>
  MX_TIM1_Init();
 8000592:	f000 f907 	bl	80007a4 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000596:	f006 fcbf 	bl	8006f18 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		uint8_t message[] = "first F411\n";
 800059a:	4a0c      	ldr	r2, [pc, #48]	; (80005cc <main+0x4c>)
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	ca07      	ldmia	r2, {r0, r1, r2}
 80005a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		CDC_Transmit_FS(message, sizeof(message) - 1);
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	210b      	movs	r1, #11
 80005a8:	4618      	mov	r0, r3
 80005aa:	f006 fda5 	bl	80070f8 <CDC_Transmit_FS>

		if (receivedValue != 0) {
 80005ae:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <main+0x50>)
 80005b0:	881b      	ldrh	r3, [r3, #0]
 80005b2:	b21b      	sxth	r3, r3
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d0f0      	beq.n	800059a <main+0x1a>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80005b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005bc:	4805      	ldr	r0, [pc, #20]	; (80005d4 <main+0x54>)
 80005be:	f000 fd08 	bl	8000fd2 <HAL_GPIO_TogglePin>
			HAL_Delay(500);
 80005c2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005c6:	f000 fa31 	bl	8000a2c <HAL_Delay>
	while (1) {
 80005ca:	e7e6      	b.n	800059a <main+0x1a>
 80005cc:	08007b54 	.word	0x08007b54
 80005d0:	200004a8 	.word	0x200004a8
 80005d4:	40020800 	.word	0x40020800

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	; 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 0320 	add.w	r3, r7, #32
 80005e2:	2230      	movs	r2, #48	; 0x30
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f007 fa14 	bl	8007a14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	4b27      	ldr	r3, [pc, #156]	; (80006a0 <SystemClock_Config+0xc8>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	4a26      	ldr	r2, [pc, #152]	; (80006a0 <SystemClock_Config+0xc8>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	; 0x40
 800060c:	4b24      	ldr	r3, [pc, #144]	; (80006a0 <SystemClock_Config+0xc8>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	4b21      	ldr	r3, [pc, #132]	; (80006a4 <SystemClock_Config+0xcc>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a20      	ldr	r2, [pc, #128]	; (80006a4 <SystemClock_Config+0xcc>)
 8000622:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000626:	6013      	str	r3, [r2, #0]
 8000628:	4b1e      	ldr	r3, [pc, #120]	; (80006a4 <SystemClock_Config+0xcc>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000634:	2301      	movs	r3, #1
 8000636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000638:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800063c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063e:	2302      	movs	r3, #2
 8000640:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000642:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000646:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000648:	2319      	movs	r3, #25
 800064a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 800064c:	2390      	movs	r3, #144	; 0x90
 800064e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000650:	2302      	movs	r3, #2
 8000652:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000654:	2303      	movs	r3, #3
 8000656:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 0320 	add.w	r3, r7, #32
 800065c:	4618      	mov	r0, r3
 800065e:	f001 ff4f 	bl	8002500 <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000668:	f000 f81e 	bl	80006a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066c:	230f      	movs	r3, #15
 800066e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000670:	2302      	movs	r3, #2
 8000672:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2102      	movs	r1, #2
 8000688:	4618      	mov	r0, r3
 800068a:	f002 f9b1 	bl	80029f0 <HAL_RCC_ClockConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000694:	f000 f808 	bl	80006a8 <Error_Handler>
  }
}
 8000698:	bf00      	nop
 800069a:	3750      	adds	r7, #80	; 0x50
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80006b0:	e7fe      	b.n	80006b0 <Error_Handler+0x8>
	...

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <HAL_MspInit+0x4c>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <HAL_MspInit+0x4c>)
 80006c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c8:	6453      	str	r3, [r2, #68]	; 0x44
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <HAL_MspInit+0x4c>)
 80006cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <HAL_MspInit+0x4c>)
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	4a08      	ldr	r2, [pc, #32]	; (8000700 <HAL_MspInit+0x4c>)
 80006e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e4:	6413      	str	r3, [r2, #64]	; 0x40
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <HAL_MspInit+0x4c>)
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800

08000704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000708:	e7fe      	b.n	8000708 <NMI_Handler+0x4>

0800070a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070e:	e7fe      	b.n	800070e <HardFault_Handler+0x4>

08000710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <MemManage_Handler+0x4>

08000716 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800071a:	e7fe      	b.n	800071a <BusFault_Handler+0x4>

0800071c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <UsageFault_Handler+0x4>

08000722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr

0800073e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000750:	f000 f94c 	bl	80009ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800075c:	4802      	ldr	r0, [pc, #8]	; (8000768 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800075e:	f002 fb4e 	bl	8002dfe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	2000017c 	.word	0x2000017c

0800076c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000770:	4802      	ldr	r0, [pc, #8]	; (800077c <OTG_FS_IRQHandler+0x10>)
 8000772:	f000 fd98 	bl	80012a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	200016ac 	.word	0x200016ac

08000780 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000784:	4b06      	ldr	r3, [pc, #24]	; (80007a0 <SystemInit+0x20>)
 8000786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800078a:	4a05      	ldr	r2, [pc, #20]	; (80007a0 <SystemInit+0x20>)
 800078c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000790:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b092      	sub	sp, #72	; 0x48
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]
 80007c4:	615a      	str	r2, [r3, #20]
 80007c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	2220      	movs	r2, #32
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f007 f920 	bl	8007a14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007d4:	4b31      	ldr	r3, [pc, #196]	; (800089c <MX_TIM1_Init+0xf8>)
 80007d6:	4a32      	ldr	r2, [pc, #200]	; (80008a0 <MX_TIM1_Init+0xfc>)
 80007d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100-1;
 80007da:	4b30      	ldr	r3, [pc, #192]	; (800089c <MX_TIM1_Init+0xf8>)
 80007dc:	2263      	movs	r2, #99	; 0x63
 80007de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e0:	4b2e      	ldr	r3, [pc, #184]	; (800089c <MX_TIM1_Init+0xf8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3600-1;
 80007e6:	4b2d      	ldr	r3, [pc, #180]	; (800089c <MX_TIM1_Init+0xf8>)
 80007e8:	f640 620f 	movw	r2, #3599	; 0xe0f
 80007ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ee:	4b2b      	ldr	r3, [pc, #172]	; (800089c <MX_TIM1_Init+0xf8>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007f4:	4b29      	ldr	r3, [pc, #164]	; (800089c <MX_TIM1_Init+0xf8>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fa:	4b28      	ldr	r3, [pc, #160]	; (800089c <MX_TIM1_Init+0xf8>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000800:	4826      	ldr	r0, [pc, #152]	; (800089c <MX_TIM1_Init+0xf8>)
 8000802:	f002 faad 	bl	8002d60 <HAL_TIM_OC_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800080c:	f7ff ff4c 	bl	80006a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000810:	2300      	movs	r3, #0
 8000812:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000818:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800081c:	4619      	mov	r1, r3
 800081e:	481f      	ldr	r0, [pc, #124]	; (800089c <MX_TIM1_Init+0xf8>)
 8000820:	f002 fe90 	bl	8003544 <HAL_TIMEx_MasterConfigSynchronization>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800082a:	f7ff ff3d 	bl	80006a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800082e:	2300      	movs	r3, #0
 8000830:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000832:	2300      	movs	r3, #0
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000836:	2300      	movs	r3, #0
 8000838:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800083a:	2300      	movs	r3, #0
 800083c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800083e:	2300      	movs	r3, #0
 8000840:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000842:	2300      	movs	r3, #0
 8000844:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000846:	2300      	movs	r3, #0
 8000848:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800084a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084e:	2200      	movs	r2, #0
 8000850:	4619      	mov	r1, r3
 8000852:	4812      	ldr	r0, [pc, #72]	; (800089c <MX_TIM1_Init+0xf8>)
 8000854:	f002 fbdc 	bl	8003010 <HAL_TIM_OC_ConfigChannel>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800085e:	f7ff ff23 	bl	80006a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000876:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800087c:	2300      	movs	r3, #0
 800087e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	4619      	mov	r1, r3
 8000884:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_TIM1_Init+0xf8>)
 8000886:	f002 fecb 	bl	8003620 <HAL_TIMEx_ConfigBreakDeadTime>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000890:	f7ff ff0a 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000894:	bf00      	nop
 8000896:	3748      	adds	r7, #72	; 0x48
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	2000017c 	.word	0x2000017c
 80008a0:	40010000 	.word	0x40010000

080008a4 <HAL_TIM_OC_MspInit>:

void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* tim_ocHandle)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]

  if(tim_ocHandle->Instance==TIM1)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a0e      	ldr	r2, [pc, #56]	; (80008ec <HAL_TIM_OC_MspInit+0x48>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d115      	bne.n	80008e2 <HAL_TIM_OC_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60fb      	str	r3, [r7, #12]
 80008ba:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <HAL_TIM_OC_MspInit+0x4c>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a0c      	ldr	r2, [pc, #48]	; (80008f0 <HAL_TIM_OC_MspInit+0x4c>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
 80008c6:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <HAL_TIM_OC_MspInit+0x4c>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2100      	movs	r1, #0
 80008d6:	2019      	movs	r0, #25
 80008d8:	f000 f9a7 	bl	8000c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80008dc:	2019      	movs	r0, #25
 80008de:	f000 f9c0 	bl	8000c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80008e2:	bf00      	nop
 80008e4:	3710      	adds	r7, #16
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40010000 	.word	0x40010000
 80008f0:	40023800 	.word	0x40023800

080008f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800092c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008f8:	480d      	ldr	r0, [pc, #52]	; (8000930 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008fa:	490e      	ldr	r1, [pc, #56]	; (8000934 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008fc:	4a0e      	ldr	r2, [pc, #56]	; (8000938 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000900:	e002      	b.n	8000908 <LoopCopyDataInit>

08000902 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000902:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000904:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000906:	3304      	adds	r3, #4

08000908 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000908:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800090c:	d3f9      	bcc.n	8000902 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800090e:	4a0b      	ldr	r2, [pc, #44]	; (800093c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000910:	4c0b      	ldr	r4, [pc, #44]	; (8000940 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000914:	e001      	b.n	800091a <LoopFillZerobss>

08000916 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000916:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000918:	3204      	adds	r2, #4

0800091a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800091c:	d3fb      	bcc.n	8000916 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800091e:	f7ff ff2f 	bl	8000780 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000922:	f007 f845 	bl	80079b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000926:	f7ff fe2b 	bl	8000580 <main>
  bx  lr    
 800092a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800092c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000934:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8000938:	08007ccc 	.word	0x08007ccc
  ldr r2, =_sbss
 800093c:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 8000940:	20001dd8 	.word	0x20001dd8

08000944 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <ADC_IRQHandler>
	...

08000948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800094c:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <HAL_Init+0x40>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a0d      	ldr	r2, [pc, #52]	; (8000988 <HAL_Init+0x40>)
 8000952:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000956:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000958:	4b0b      	ldr	r3, [pc, #44]	; (8000988 <HAL_Init+0x40>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <HAL_Init+0x40>)
 800095e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000962:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000964:	4b08      	ldr	r3, [pc, #32]	; (8000988 <HAL_Init+0x40>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a07      	ldr	r2, [pc, #28]	; (8000988 <HAL_Init+0x40>)
 800096a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800096e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000970:	2003      	movs	r0, #3
 8000972:	f000 f94f 	bl	8000c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000976:	200f      	movs	r0, #15
 8000978:	f000 f808 	bl	800098c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800097c:	f7ff fe9a 	bl	80006b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023c00 	.word	0x40023c00

0800098c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <HAL_InitTick+0x54>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	4b12      	ldr	r3, [pc, #72]	; (80009e4 <HAL_InitTick+0x58>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	4619      	mov	r1, r3
 800099e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 f967 	bl	8000c7e <HAL_SYSTICK_Config>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	e00e      	b.n	80009d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	2b0f      	cmp	r3, #15
 80009be:	d80a      	bhi.n	80009d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009c0:	2200      	movs	r2, #0
 80009c2:	6879      	ldr	r1, [r7, #4]
 80009c4:	f04f 30ff 	mov.w	r0, #4294967295
 80009c8:	f000 f92f 	bl	8000c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009cc:	4a06      	ldr	r2, [pc, #24]	; (80009e8 <HAL_InitTick+0x5c>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009d2:	2300      	movs	r3, #0
 80009d4:	e000      	b.n	80009d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000000 	.word	0x20000000
 80009e4:	20000008 	.word	0x20000008
 80009e8:	20000004 	.word	0x20000004

080009ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f0:	4b06      	ldr	r3, [pc, #24]	; (8000a0c <HAL_IncTick+0x20>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <HAL_IncTick+0x24>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4413      	add	r3, r2
 80009fc:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <HAL_IncTick+0x24>)
 80009fe:	6013      	str	r3, [r2, #0]
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20000008 	.word	0x20000008
 8000a10:	200001c4 	.word	0x200001c4

08000a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  return uwTick;
 8000a18:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <HAL_GetTick+0x14>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	200001c4 	.word	0x200001c4

08000a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a34:	f7ff ffee 	bl	8000a14 <HAL_GetTick>
 8000a38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a44:	d005      	beq.n	8000a52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a46:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <HAL_Delay+0x44>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	461a      	mov	r2, r3
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	4413      	add	r3, r2
 8000a50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a52:	bf00      	nop
 8000a54:	f7ff ffde 	bl	8000a14 <HAL_GetTick>
 8000a58:	4602      	mov	r2, r0
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d8f7      	bhi.n	8000a54 <HAL_Delay+0x28>
  {
  }
}
 8000a64:	bf00      	nop
 8000a66:	bf00      	nop
 8000a68:	3710      	adds	r7, #16
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000008 	.word	0x20000008

08000a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b085      	sub	sp, #20
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a90:	4013      	ands	r3, r2
 8000a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a98:	68bb      	ldr	r3, [r7, #8]
 8000a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aa6:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	60d3      	str	r3, [r2, #12]
}
 8000aac:	bf00      	nop
 8000aae:	3714      	adds	r7, #20
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac0:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	0a1b      	lsrs	r3, r3, #8
 8000ac6:	f003 0307 	and.w	r3, r3, #7
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	db0b      	blt.n	8000b02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	f003 021f 	and.w	r2, r3, #31
 8000af0:	4907      	ldr	r1, [pc, #28]	; (8000b10 <__NVIC_EnableIRQ+0x38>)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	095b      	lsrs	r3, r3, #5
 8000af8:	2001      	movs	r0, #1
 8000afa:	fa00 f202 	lsl.w	r2, r0, r2
 8000afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000e100 	.word	0xe000e100

08000b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	6039      	str	r1, [r7, #0]
 8000b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	db0a      	blt.n	8000b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	490c      	ldr	r1, [pc, #48]	; (8000b60 <__NVIC_SetPriority+0x4c>)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	0112      	lsls	r2, r2, #4
 8000b34:	b2d2      	uxtb	r2, r2
 8000b36:	440b      	add	r3, r1
 8000b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b3c:	e00a      	b.n	8000b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	4908      	ldr	r1, [pc, #32]	; (8000b64 <__NVIC_SetPriority+0x50>)
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	f003 030f 	and.w	r3, r3, #15
 8000b4a:	3b04      	subs	r3, #4
 8000b4c:	0112      	lsls	r2, r2, #4
 8000b4e:	b2d2      	uxtb	r2, r2
 8000b50:	440b      	add	r3, r1
 8000b52:	761a      	strb	r2, [r3, #24]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000e100 	.word	0xe000e100
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b089      	sub	sp, #36	; 0x24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	f1c3 0307 	rsb	r3, r3, #7
 8000b82:	2b04      	cmp	r3, #4
 8000b84:	bf28      	it	cs
 8000b86:	2304      	movcs	r3, #4
 8000b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	2b06      	cmp	r3, #6
 8000b90:	d902      	bls.n	8000b98 <NVIC_EncodePriority+0x30>
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3b03      	subs	r3, #3
 8000b96:	e000      	b.n	8000b9a <NVIC_EncodePriority+0x32>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43da      	mvns	r2, r3
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	401a      	ands	r2, r3
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bba:	43d9      	mvns	r1, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	4313      	orrs	r3, r2
         );
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3724      	adds	r7, #36	; 0x24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
	...

08000bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000be0:	d301      	bcc.n	8000be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be2:	2301      	movs	r3, #1
 8000be4:	e00f      	b.n	8000c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be6:	4a0a      	ldr	r2, [pc, #40]	; (8000c10 <SysTick_Config+0x40>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	3b01      	subs	r3, #1
 8000bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bee:	210f      	movs	r1, #15
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf4:	f7ff ff8e 	bl	8000b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <SysTick_Config+0x40>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfe:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <SysTick_Config+0x40>)
 8000c00:	2207      	movs	r2, #7
 8000c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	e000e010 	.word	0xe000e010

08000c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f7ff ff29 	bl	8000a74 <__NVIC_SetPriorityGrouping>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b086      	sub	sp, #24
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	4603      	mov	r3, r0
 8000c32:	60b9      	str	r1, [r7, #8]
 8000c34:	607a      	str	r2, [r7, #4]
 8000c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c3c:	f7ff ff3e 	bl	8000abc <__NVIC_GetPriorityGrouping>
 8000c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	68b9      	ldr	r1, [r7, #8]
 8000c46:	6978      	ldr	r0, [r7, #20]
 8000c48:	f7ff ff8e 	bl	8000b68 <NVIC_EncodePriority>
 8000c4c:	4602      	mov	r2, r0
 8000c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c52:	4611      	mov	r1, r2
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff ff5d 	bl	8000b14 <__NVIC_SetPriority>
}
 8000c5a:	bf00      	nop
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b082      	sub	sp, #8
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	4603      	mov	r3, r0
 8000c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff31 	bl	8000ad8 <__NVIC_EnableIRQ>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b082      	sub	sp, #8
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff ffa2 	bl	8000bd0 <SysTick_Config>
 8000c8c:	4603      	mov	r3, r0
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
	...

08000c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b089      	sub	sp, #36	; 0x24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cae:	2300      	movs	r3, #0
 8000cb0:	61fb      	str	r3, [r7, #28]
 8000cb2:	e159      	b.n	8000f68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	697a      	ldr	r2, [r7, #20]
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	f040 8148 	bne.w	8000f62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f003 0303 	and.w	r3, r3, #3
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d005      	beq.n	8000cea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ce6:	2b02      	cmp	r3, #2
 8000ce8:	d130      	bne.n	8000d4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	2203      	movs	r2, #3
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	69ba      	ldr	r2, [r7, #24]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	68da      	ldr	r2, [r3, #12]
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4313      	orrs	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d20:	2201      	movs	r2, #1
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	091b      	lsrs	r3, r3, #4
 8000d36:	f003 0201 	and.w	r2, r3, #1
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 0303 	and.w	r3, r3, #3
 8000d54:	2b03      	cmp	r3, #3
 8000d56:	d017      	beq.n	8000d88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	2203      	movs	r2, #3
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	689a      	ldr	r2, [r3, #8]
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	69ba      	ldr	r2, [r7, #24]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f003 0303 	and.w	r3, r3, #3
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d123      	bne.n	8000ddc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	08da      	lsrs	r2, r3, #3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3208      	adds	r2, #8
 8000d9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	f003 0307 	and.w	r3, r3, #7
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	220f      	movs	r2, #15
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	43db      	mvns	r3, r3
 8000db2:	69ba      	ldr	r2, [r7, #24]
 8000db4:	4013      	ands	r3, r2
 8000db6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	691a      	ldr	r2, [r3, #16]
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4313      	orrs	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	08da      	lsrs	r2, r3, #3
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	3208      	adds	r2, #8
 8000dd6:	69b9      	ldr	r1, [r7, #24]
 8000dd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000de2:	69fb      	ldr	r3, [r7, #28]
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	2203      	movs	r2, #3
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	69ba      	ldr	r2, [r7, #24]
 8000df0:	4013      	ands	r3, r2
 8000df2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0203 	and.w	r2, r3, #3
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	69ba      	ldr	r2, [r7, #24]
 8000e06:	4313      	orrs	r3, r2
 8000e08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	f000 80a2 	beq.w	8000f62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	4b57      	ldr	r3, [pc, #348]	; (8000f80 <HAL_GPIO_Init+0x2e8>)
 8000e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e26:	4a56      	ldr	r2, [pc, #344]	; (8000f80 <HAL_GPIO_Init+0x2e8>)
 8000e28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e2e:	4b54      	ldr	r3, [pc, #336]	; (8000f80 <HAL_GPIO_Init+0x2e8>)
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e3a:	4a52      	ldr	r2, [pc, #328]	; (8000f84 <HAL_GPIO_Init+0x2ec>)
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	089b      	lsrs	r3, r3, #2
 8000e40:	3302      	adds	r3, #2
 8000e42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e48:	69fb      	ldr	r3, [r7, #28]
 8000e4a:	f003 0303 	and.w	r3, r3, #3
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	220f      	movs	r2, #15
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a49      	ldr	r2, [pc, #292]	; (8000f88 <HAL_GPIO_Init+0x2f0>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d019      	beq.n	8000e9a <HAL_GPIO_Init+0x202>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a48      	ldr	r2, [pc, #288]	; (8000f8c <HAL_GPIO_Init+0x2f4>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d013      	beq.n	8000e96 <HAL_GPIO_Init+0x1fe>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a47      	ldr	r2, [pc, #284]	; (8000f90 <HAL_GPIO_Init+0x2f8>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d00d      	beq.n	8000e92 <HAL_GPIO_Init+0x1fa>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4a46      	ldr	r2, [pc, #280]	; (8000f94 <HAL_GPIO_Init+0x2fc>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d007      	beq.n	8000e8e <HAL_GPIO_Init+0x1f6>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a45      	ldr	r2, [pc, #276]	; (8000f98 <HAL_GPIO_Init+0x300>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d101      	bne.n	8000e8a <HAL_GPIO_Init+0x1f2>
 8000e86:	2304      	movs	r3, #4
 8000e88:	e008      	b.n	8000e9c <HAL_GPIO_Init+0x204>
 8000e8a:	2307      	movs	r3, #7
 8000e8c:	e006      	b.n	8000e9c <HAL_GPIO_Init+0x204>
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e004      	b.n	8000e9c <HAL_GPIO_Init+0x204>
 8000e92:	2302      	movs	r3, #2
 8000e94:	e002      	b.n	8000e9c <HAL_GPIO_Init+0x204>
 8000e96:	2301      	movs	r3, #1
 8000e98:	e000      	b.n	8000e9c <HAL_GPIO_Init+0x204>
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	69fa      	ldr	r2, [r7, #28]
 8000e9e:	f002 0203 	and.w	r2, r2, #3
 8000ea2:	0092      	lsls	r2, r2, #2
 8000ea4:	4093      	lsls	r3, r2
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eac:	4935      	ldr	r1, [pc, #212]	; (8000f84 <HAL_GPIO_Init+0x2ec>)
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	089b      	lsrs	r3, r3, #2
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eba:	4b38      	ldr	r3, [pc, #224]	; (8000f9c <HAL_GPIO_Init+0x304>)
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec0:	693b      	ldr	r3, [r7, #16]
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ede:	4a2f      	ldr	r2, [pc, #188]	; (8000f9c <HAL_GPIO_Init+0x304>)
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ee4:	4b2d      	ldr	r3, [pc, #180]	; (8000f9c <HAL_GPIO_Init+0x304>)
 8000ee6:	68db      	ldr	r3, [r3, #12]
 8000ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d003      	beq.n	8000f08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f08:	4a24      	ldr	r2, [pc, #144]	; (8000f9c <HAL_GPIO_Init+0x304>)
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f0e:	4b23      	ldr	r3, [pc, #140]	; (8000f9c <HAL_GPIO_Init+0x304>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f32:	4a1a      	ldr	r2, [pc, #104]	; (8000f9c <HAL_GPIO_Init+0x304>)
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f38:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <HAL_GPIO_Init+0x304>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	43db      	mvns	r3, r3
 8000f42:	69ba      	ldr	r2, [r7, #24]
 8000f44:	4013      	ands	r3, r2
 8000f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f5c:	4a0f      	ldr	r2, [pc, #60]	; (8000f9c <HAL_GPIO_Init+0x304>)
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3301      	adds	r3, #1
 8000f66:	61fb      	str	r3, [r7, #28]
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	2b0f      	cmp	r3, #15
 8000f6c:	f67f aea2 	bls.w	8000cb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3724      	adds	r7, #36	; 0x24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40013800 	.word	0x40013800
 8000f88:	40020000 	.word	0x40020000
 8000f8c:	40020400 	.word	0x40020400
 8000f90:	40020800 	.word	0x40020800
 8000f94:	40020c00 	.word	0x40020c00
 8000f98:	40021000 	.word	0x40021000
 8000f9c:	40013c00 	.word	0x40013c00

08000fa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	807b      	strh	r3, [r7, #2]
 8000fac:	4613      	mov	r3, r2
 8000fae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fb0:	787b      	ldrb	r3, [r7, #1]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fb6:	887a      	ldrh	r2, [r7, #2]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fbc:	e003      	b.n	8000fc6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fbe:	887b      	ldrh	r3, [r7, #2]
 8000fc0:	041a      	lsls	r2, r3, #16
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	619a      	str	r2, [r3, #24]
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr

08000fd2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fd2:	b480      	push	{r7}
 8000fd4:	b085      	sub	sp, #20
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	695b      	ldr	r3, [r3, #20]
 8000fe2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fe4:	887a      	ldrh	r2, [r7, #2]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	041a      	lsls	r2, r3, #16
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	43d9      	mvns	r1, r3
 8000ff0:	887b      	ldrh	r3, [r7, #2]
 8000ff2:	400b      	ands	r3, r1
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	619a      	str	r2, [r3, #24]
}
 8000ffa:	bf00      	nop
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001006:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001008:	b08f      	sub	sp, #60	; 0x3c
 800100a:	af0a      	add	r7, sp, #40	; 0x28
 800100c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d101      	bne.n	8001018 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e10f      	b.n	8001238 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001024:	b2db      	uxtb	r3, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	d106      	bne.n	8001038 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2200      	movs	r2, #0
 800102e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f006 f9a8 	bl	8007388 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2203      	movs	r2, #3
 800103c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001048:	2b00      	cmp	r3, #0
 800104a:	d102      	bne.n	8001052 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4618      	mov	r0, r3
 8001058:	f002 fc5d 	bl	8003916 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	603b      	str	r3, [r7, #0]
 8001062:	687e      	ldr	r6, [r7, #4]
 8001064:	466d      	mov	r5, sp
 8001066:	f106 0410 	add.w	r4, r6, #16
 800106a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800106c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800106e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001070:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001072:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001076:	e885 0003 	stmia.w	r5, {r0, r1}
 800107a:	1d33      	adds	r3, r6, #4
 800107c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800107e:	6838      	ldr	r0, [r7, #0]
 8001080:	f002 fb34 	bl	80036ec <USB_CoreInit>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d005      	beq.n	8001096 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2202      	movs	r2, #2
 800108e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e0d0      	b.n	8001238 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2100      	movs	r1, #0
 800109c:	4618      	mov	r0, r3
 800109e:	f002 fc4b 	bl	8003938 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010a2:	2300      	movs	r3, #0
 80010a4:	73fb      	strb	r3, [r7, #15]
 80010a6:	e04a      	b.n	800113e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010a8:	7bfa      	ldrb	r2, [r7, #15]
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	4613      	mov	r3, r2
 80010ae:	00db      	lsls	r3, r3, #3
 80010b0:	4413      	add	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	440b      	add	r3, r1
 80010b6:	333d      	adds	r3, #61	; 0x3d
 80010b8:	2201      	movs	r2, #1
 80010ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010bc:	7bfa      	ldrb	r2, [r7, #15]
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	4613      	mov	r3, r2
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	4413      	add	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	440b      	add	r3, r1
 80010ca:	333c      	adds	r3, #60	; 0x3c
 80010cc:	7bfa      	ldrb	r2, [r7, #15]
 80010ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010d0:	7bfa      	ldrb	r2, [r7, #15]
 80010d2:	7bfb      	ldrb	r3, [r7, #15]
 80010d4:	b298      	uxth	r0, r3
 80010d6:	6879      	ldr	r1, [r7, #4]
 80010d8:	4613      	mov	r3, r2
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	4413      	add	r3, r2
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	440b      	add	r3, r1
 80010e2:	3344      	adds	r3, #68	; 0x44
 80010e4:	4602      	mov	r2, r0
 80010e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010e8:	7bfa      	ldrb	r2, [r7, #15]
 80010ea:	6879      	ldr	r1, [r7, #4]
 80010ec:	4613      	mov	r3, r2
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	4413      	add	r3, r2
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	440b      	add	r3, r1
 80010f6:	3340      	adds	r3, #64	; 0x40
 80010f8:	2200      	movs	r2, #0
 80010fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010fc:	7bfa      	ldrb	r2, [r7, #15]
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	4613      	mov	r3, r2
 8001102:	00db      	lsls	r3, r3, #3
 8001104:	4413      	add	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	440b      	add	r3, r1
 800110a:	3348      	adds	r3, #72	; 0x48
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001110:	7bfa      	ldrb	r2, [r7, #15]
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	4613      	mov	r3, r2
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	4413      	add	r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	440b      	add	r3, r1
 800111e:	334c      	adds	r3, #76	; 0x4c
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001124:	7bfa      	ldrb	r2, [r7, #15]
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	4613      	mov	r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	4413      	add	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	440b      	add	r3, r1
 8001132:	3354      	adds	r3, #84	; 0x54
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	3301      	adds	r3, #1
 800113c:	73fb      	strb	r3, [r7, #15]
 800113e:	7bfa      	ldrb	r2, [r7, #15]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	429a      	cmp	r2, r3
 8001146:	d3af      	bcc.n	80010a8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001148:	2300      	movs	r3, #0
 800114a:	73fb      	strb	r3, [r7, #15]
 800114c:	e044      	b.n	80011d8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800114e:	7bfa      	ldrb	r2, [r7, #15]
 8001150:	6879      	ldr	r1, [r7, #4]
 8001152:	4613      	mov	r3, r2
 8001154:	00db      	lsls	r3, r3, #3
 8001156:	4413      	add	r3, r2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	440b      	add	r3, r1
 800115c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001160:	2200      	movs	r2, #0
 8001162:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001164:	7bfa      	ldrb	r2, [r7, #15]
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	4613      	mov	r3, r2
 800116a:	00db      	lsls	r3, r3, #3
 800116c:	4413      	add	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	440b      	add	r3, r1
 8001172:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001176:	7bfa      	ldrb	r2, [r7, #15]
 8001178:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800117a:	7bfa      	ldrb	r2, [r7, #15]
 800117c:	6879      	ldr	r1, [r7, #4]
 800117e:	4613      	mov	r3, r2
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	4413      	add	r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	440b      	add	r3, r1
 8001188:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800118c:	2200      	movs	r2, #0
 800118e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001190:	7bfa      	ldrb	r2, [r7, #15]
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	4613      	mov	r3, r2
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	4413      	add	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	440b      	add	r3, r1
 800119e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011a6:	7bfa      	ldrb	r2, [r7, #15]
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	4613      	mov	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	4413      	add	r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	440b      	add	r3, r1
 80011b4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	4613      	mov	r3, r2
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	4413      	add	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	440b      	add	r3, r1
 80011ca:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011d2:	7bfb      	ldrb	r3, [r7, #15]
 80011d4:	3301      	adds	r3, #1
 80011d6:	73fb      	strb	r3, [r7, #15]
 80011d8:	7bfa      	ldrb	r2, [r7, #15]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	429a      	cmp	r2, r3
 80011e0:	d3b5      	bcc.n	800114e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	687e      	ldr	r6, [r7, #4]
 80011ea:	466d      	mov	r5, sp
 80011ec:	f106 0410 	add.w	r4, r6, #16
 80011f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011f8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011fc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001200:	1d33      	adds	r3, r6, #4
 8001202:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001204:	6838      	ldr	r0, [r7, #0]
 8001206:	f002 fbe3 	bl	80039d0 <USB_DevInit>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d005      	beq.n	800121c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2202      	movs	r2, #2
 8001214:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e00d      	b.n	8001238 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2201      	movs	r2, #1
 8001228:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f003 fd32 	bl	8004c9a <USB_DevDisconnect>

  return HAL_OK;
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	3714      	adds	r7, #20
 800123c:	46bd      	mov	sp, r7
 800123e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001240 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001254:	2b01      	cmp	r3, #1
 8001256:	d101      	bne.n	800125c <HAL_PCD_Start+0x1c>
 8001258:	2302      	movs	r3, #2
 800125a:	e020      	b.n	800129e <HAL_PCD_Start+0x5e>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001268:	2b01      	cmp	r3, #1
 800126a:	d109      	bne.n	8001280 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001270:	2b01      	cmp	r3, #1
 8001272:	d005      	beq.n	8001280 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001278:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f002 fb35 	bl	80038f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f003 fce2 	bl	8004c58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012a6:	b590      	push	{r4, r7, lr}
 80012a8:	b08d      	sub	sp, #52	; 0x34
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80012b4:	6a3b      	ldr	r3, [r7, #32]
 80012b6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f003 fda0 	bl	8004e02 <USB_GetMode>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f040 848a 	bne.w	8001bde <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f003 fd04 	bl	8004cdc <USB_ReadInterrupts>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 8480 	beq.w	8001bdc <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f003 fcf1 	bl	8004cdc <USB_ReadInterrupts>
 80012fa:	4603      	mov	r3, r0
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b02      	cmp	r3, #2
 8001302:	d107      	bne.n	8001314 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	695a      	ldr	r2, [r3, #20]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f002 0202 	and.w	r2, r2, #2
 8001312:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f003 fcdf 	bl	8004cdc <USB_ReadInterrupts>
 800131e:	4603      	mov	r3, r0
 8001320:	f003 0310 	and.w	r3, r3, #16
 8001324:	2b10      	cmp	r3, #16
 8001326:	d161      	bne.n	80013ec <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	699a      	ldr	r2, [r3, #24]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 0210 	bic.w	r2, r2, #16
 8001336:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001338:	6a3b      	ldr	r3, [r7, #32]
 800133a:	6a1b      	ldr	r3, [r3, #32]
 800133c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	f003 020f 	and.w	r2, r3, #15
 8001344:	4613      	mov	r3, r2
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	4413      	add	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	4413      	add	r3, r2
 8001354:	3304      	adds	r3, #4
 8001356:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	0c5b      	lsrs	r3, r3, #17
 800135c:	f003 030f 	and.w	r3, r3, #15
 8001360:	2b02      	cmp	r3, #2
 8001362:	d124      	bne.n	80013ae <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800136a:	4013      	ands	r3, r2
 800136c:	2b00      	cmp	r3, #0
 800136e:	d035      	beq.n	80013dc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	091b      	lsrs	r3, r3, #4
 8001378:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800137a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800137e:	b29b      	uxth	r3, r3
 8001380:	461a      	mov	r2, r3
 8001382:	6a38      	ldr	r0, [r7, #32]
 8001384:	f003 fb16 	bl	80049b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	691a      	ldr	r2, [r3, #16]
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	091b      	lsrs	r3, r3, #4
 8001390:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001394:	441a      	add	r2, r3
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	6a1a      	ldr	r2, [r3, #32]
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	091b      	lsrs	r3, r3, #4
 80013a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013a6:	441a      	add	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	621a      	str	r2, [r3, #32]
 80013ac:	e016      	b.n	80013dc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	0c5b      	lsrs	r3, r3, #17
 80013b2:	f003 030f 	and.w	r3, r3, #15
 80013b6:	2b06      	cmp	r3, #6
 80013b8:	d110      	bne.n	80013dc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80013c0:	2208      	movs	r2, #8
 80013c2:	4619      	mov	r1, r3
 80013c4:	6a38      	ldr	r0, [r7, #32]
 80013c6:	f003 faf5 	bl	80049b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	6a1a      	ldr	r2, [r3, #32]
 80013ce:	69bb      	ldr	r3, [r7, #24]
 80013d0:	091b      	lsrs	r3, r3, #4
 80013d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013d6:	441a      	add	r2, r3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	699a      	ldr	r2, [r3, #24]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f042 0210 	orr.w	r2, r2, #16
 80013ea:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4618      	mov	r0, r3
 80013f2:	f003 fc73 	bl	8004cdc <USB_ReadInterrupts>
 80013f6:	4603      	mov	r3, r0
 80013f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001400:	f040 80a7 	bne.w	8001552 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001404:	2300      	movs	r3, #0
 8001406:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f003 fc78 	bl	8004d02 <USB_ReadDevAllOutEpInterrupt>
 8001412:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001414:	e099      	b.n	800154a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b00      	cmp	r3, #0
 800141e:	f000 808e 	beq.w	800153e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	4611      	mov	r1, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f003 fc9c 	bl	8004d6a <USB_ReadDevOutEPInterrupt>
 8001432:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	2b00      	cmp	r3, #0
 800143c:	d00c      	beq.n	8001458 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800143e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001440:	015a      	lsls	r2, r3, #5
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	4413      	add	r3, r2
 8001446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800144a:	461a      	mov	r2, r3
 800144c:	2301      	movs	r3, #1
 800144e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001450:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f000 fec2 	bl	80021dc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	2b00      	cmp	r3, #0
 8001460:	d00c      	beq.n	800147c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	015a      	lsls	r2, r3, #5
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	4413      	add	r3, r2
 800146a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800146e:	461a      	mov	r2, r3
 8001470:	2308      	movs	r3, #8
 8001472:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001474:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f000 ff98 	bl	80023ac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	f003 0310 	and.w	r3, r3, #16
 8001482:	2b00      	cmp	r3, #0
 8001484:	d008      	beq.n	8001498 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	015a      	lsls	r2, r3, #5
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	4413      	add	r3, r2
 800148e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001492:	461a      	mov	r2, r3
 8001494:	2310      	movs	r3, #16
 8001496:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d030      	beq.n	8001504 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80014a2:	6a3b      	ldr	r3, [r7, #32]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014aa:	2b80      	cmp	r3, #128	; 0x80
 80014ac:	d109      	bne.n	80014c2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	69fa      	ldr	r2, [r7, #28]
 80014b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014c0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80014c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c4:	4613      	mov	r3, r2
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	4413      	add	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	4413      	add	r3, r2
 80014d4:	3304      	adds	r3, #4
 80014d6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	78db      	ldrb	r3, [r3, #3]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d108      	bne.n	80014f2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	2200      	movs	r2, #0
 80014e4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	b2db      	uxtb	r3, r3
 80014ea:	4619      	mov	r1, r3
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f006 f847 	bl	8007580 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80014f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f4:	015a      	lsls	r2, r3, #5
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	4413      	add	r3, r2
 80014fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014fe:	461a      	mov	r2, r3
 8001500:	2302      	movs	r3, #2
 8001502:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	f003 0320 	and.w	r3, r3, #32
 800150a:	2b00      	cmp	r3, #0
 800150c:	d008      	beq.n	8001520 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800150e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001510:	015a      	lsls	r2, r3, #5
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	4413      	add	r3, r2
 8001516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800151a:	461a      	mov	r2, r3
 800151c:	2320      	movs	r3, #32
 800151e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d009      	beq.n	800153e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800152a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152c:	015a      	lsls	r2, r3, #5
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	4413      	add	r3, r2
 8001532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001536:	461a      	mov	r2, r3
 8001538:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800153c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800153e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001540:	3301      	adds	r3, #1
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001546:	085b      	lsrs	r3, r3, #1
 8001548:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800154a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154c:	2b00      	cmp	r3, #0
 800154e:	f47f af62 	bne.w	8001416 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f003 fbc0 	bl	8004cdc <USB_ReadInterrupts>
 800155c:	4603      	mov	r3, r0
 800155e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001562:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001566:	f040 80db 	bne.w	8001720 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f003 fbe1 	bl	8004d36 <USB_ReadDevAllInEpInterrupt>
 8001574:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001576:	2300      	movs	r3, #0
 8001578:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800157a:	e0cd      	b.n	8001718 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800157c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 80c2 	beq.w	800170c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800158e:	b2d2      	uxtb	r2, r2
 8001590:	4611      	mov	r1, r2
 8001592:	4618      	mov	r0, r3
 8001594:	f003 fc07 	bl	8004da6 <USB_ReadDevInEPInterrupt>
 8001598:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	f003 0301 	and.w	r3, r3, #1
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d057      	beq.n	8001654 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	2201      	movs	r2, #1
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	43db      	mvns	r3, r3
 80015be:	69f9      	ldr	r1, [r7, #28]
 80015c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80015c4:	4013      	ands	r3, r2
 80015c6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	015a      	lsls	r2, r3, #5
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	4413      	add	r3, r2
 80015d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015d4:	461a      	mov	r2, r3
 80015d6:	2301      	movs	r3, #1
 80015d8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d132      	bne.n	8001648 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e6:	4613      	mov	r3, r2
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	4413      	add	r3, r2
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	440b      	add	r3, r1
 80015f0:	334c      	adds	r3, #76	; 0x4c
 80015f2:	6819      	ldr	r1, [r3, #0]
 80015f4:	6878      	ldr	r0, [r7, #4]
 80015f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015f8:	4613      	mov	r3, r2
 80015fa:	00db      	lsls	r3, r3, #3
 80015fc:	4413      	add	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4403      	add	r3, r0
 8001602:	3348      	adds	r3, #72	; 0x48
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4419      	add	r1, r3
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800160c:	4613      	mov	r3, r2
 800160e:	00db      	lsls	r3, r3, #3
 8001610:	4413      	add	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4403      	add	r3, r0
 8001616:	334c      	adds	r3, #76	; 0x4c
 8001618:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	2b00      	cmp	r3, #0
 800161e:	d113      	bne.n	8001648 <HAL_PCD_IRQHandler+0x3a2>
 8001620:	6879      	ldr	r1, [r7, #4]
 8001622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001624:	4613      	mov	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	4413      	add	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	440b      	add	r3, r1
 800162e:	3354      	adds	r3, #84	; 0x54
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d108      	bne.n	8001648 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6818      	ldr	r0, [r3, #0]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001640:	461a      	mov	r2, r3
 8001642:	2101      	movs	r1, #1
 8001644:	f003 fc0e 	bl	8004e64 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	b2db      	uxtb	r3, r3
 800164c:	4619      	mov	r1, r3
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f005 ff1b 	bl	800748a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	f003 0308 	and.w	r3, r3, #8
 800165a:	2b00      	cmp	r3, #0
 800165c:	d008      	beq.n	8001670 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	015a      	lsls	r2, r3, #5
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	4413      	add	r3, r2
 8001666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800166a:	461a      	mov	r2, r3
 800166c:	2308      	movs	r3, #8
 800166e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	f003 0310 	and.w	r3, r3, #16
 8001676:	2b00      	cmp	r3, #0
 8001678:	d008      	beq.n	800168c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	015a      	lsls	r2, r3, #5
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	4413      	add	r3, r2
 8001682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001686:	461a      	mov	r2, r3
 8001688:	2310      	movs	r3, #16
 800168a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001692:	2b00      	cmp	r3, #0
 8001694:	d008      	beq.n	80016a8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	015a      	lsls	r2, r3, #5
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	4413      	add	r3, r2
 800169e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016a2:	461a      	mov	r2, r3
 80016a4:	2340      	movs	r3, #64	; 0x40
 80016a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d023      	beq.n	80016fa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80016b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016b4:	6a38      	ldr	r0, [r7, #32]
 80016b6:	f002 faef 	bl	8003c98 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80016ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016bc:	4613      	mov	r3, r2
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	4413      	add	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	3338      	adds	r3, #56	; 0x38
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4413      	add	r3, r2
 80016ca:	3304      	adds	r3, #4
 80016cc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	78db      	ldrb	r3, [r3, #3]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d108      	bne.n	80016e8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	2200      	movs	r2, #0
 80016da:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	4619      	mov	r1, r3
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f005 ff5e 	bl	80075a4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	015a      	lsls	r2, r3, #5
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	4413      	add	r3, r2
 80016f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016f4:	461a      	mov	r2, r3
 80016f6:	2302      	movs	r3, #2
 80016f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001704:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f000 fcdb 	bl	80020c2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	3301      	adds	r3, #1
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001714:	085b      	lsrs	r3, r3, #1
 8001716:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800171a:	2b00      	cmp	r3, #0
 800171c:	f47f af2e 	bne.w	800157c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f003 fad9 	bl	8004cdc <USB_ReadInterrupts>
 800172a:	4603      	mov	r3, r0
 800172c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001730:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001734:	d122      	bne.n	800177c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	69fa      	ldr	r2, [r7, #28]
 8001740:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001744:	f023 0301 	bic.w	r3, r3, #1
 8001748:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001750:	2b01      	cmp	r3, #1
 8001752:	d108      	bne.n	8001766 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800175c:	2100      	movs	r1, #0
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 fec2 	bl	80024e8 <HAL_PCDEx_LPM_Callback>
 8001764:	e002      	b.n	800176c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f005 fefc 	bl	8007564 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	695a      	ldr	r2, [r3, #20]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800177a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4618      	mov	r0, r3
 8001782:	f003 faab 	bl	8004cdc <USB_ReadInterrupts>
 8001786:	4603      	mov	r3, r0
 8001788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800178c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001790:	d112      	bne.n	80017b8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d102      	bne.n	80017a8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f005 feb8 	bl	8007518 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	695a      	ldr	r2, [r3, #20]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80017b6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f003 fa8d 	bl	8004cdc <USB_ReadInterrupts>
 80017c2:	4603      	mov	r3, r0
 80017c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017cc:	f040 80b7 	bne.w	800193e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	69fa      	ldr	r2, [r7, #28]
 80017da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017de:	f023 0301 	bic.w	r3, r3, #1
 80017e2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2110      	movs	r1, #16
 80017ea:	4618      	mov	r0, r3
 80017ec:	f002 fa54 	bl	8003c98 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017f0:	2300      	movs	r3, #0
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017f4:	e046      	b.n	8001884 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80017f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f8:	015a      	lsls	r2, r3, #5
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	4413      	add	r3, r2
 80017fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001802:	461a      	mov	r2, r3
 8001804:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001808:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800180a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800180c:	015a      	lsls	r2, r3, #5
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	4413      	add	r3, r2
 8001812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800181a:	0151      	lsls	r1, r2, #5
 800181c:	69fa      	ldr	r2, [r7, #28]
 800181e:	440a      	add	r2, r1
 8001820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001824:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001828:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800182a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800182c:	015a      	lsls	r2, r3, #5
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	4413      	add	r3, r2
 8001832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001836:	461a      	mov	r2, r3
 8001838:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800183c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800183e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001840:	015a      	lsls	r2, r3, #5
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	4413      	add	r3, r2
 8001846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800184e:	0151      	lsls	r1, r2, #5
 8001850:	69fa      	ldr	r2, [r7, #28]
 8001852:	440a      	add	r2, r1
 8001854:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001858:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800185c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800185e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001860:	015a      	lsls	r2, r3, #5
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	4413      	add	r3, r2
 8001866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800186e:	0151      	lsls	r1, r2, #5
 8001870:	69fa      	ldr	r2, [r7, #28]
 8001872:	440a      	add	r2, r1
 8001874:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001878:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800187c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800187e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001880:	3301      	adds	r3, #1
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800188a:	429a      	cmp	r2, r3
 800188c:	d3b3      	bcc.n	80017f6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	69fa      	ldr	r2, [r7, #28]
 8001898:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800189c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80018a0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d016      	beq.n	80018d8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018b4:	69fa      	ldr	r2, [r7, #28]
 80018b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018ba:	f043 030b 	orr.w	r3, r3, #11
 80018be:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	69fa      	ldr	r2, [r7, #28]
 80018cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018d0:	f043 030b 	orr.w	r3, r3, #11
 80018d4:	6453      	str	r3, [r2, #68]	; 0x44
 80018d6:	e015      	b.n	8001904 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	69fa      	ldr	r2, [r7, #28]
 80018e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018ea:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80018ee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	69fa      	ldr	r2, [r7, #28]
 80018fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018fe:	f043 030b 	orr.w	r3, r3, #11
 8001902:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	69fa      	ldr	r2, [r7, #28]
 800190e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001912:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001916:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6818      	ldr	r0, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001928:	461a      	mov	r2, r3
 800192a:	f003 fa9b 	bl	8004e64 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	695a      	ldr	r2, [r3, #20]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800193c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f003 f9ca 	bl	8004cdc <USB_ReadInterrupts>
 8001948:	4603      	mov	r3, r0
 800194a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800194e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001952:	d124      	bne.n	800199e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f003 fa60 	bl	8004e1e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f002 fa15 	bl	8003d92 <USB_GetDevSpeed>
 8001968:	4603      	mov	r3, r0
 800196a:	461a      	mov	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681c      	ldr	r4, [r3, #0]
 8001974:	f001 f9e8 	bl	8002d48 <HAL_RCC_GetHCLKFreq>
 8001978:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800197e:	b2db      	uxtb	r3, r3
 8001980:	461a      	mov	r2, r3
 8001982:	4620      	mov	r0, r4
 8001984:	f001 ff14 	bl	80037b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f005 fda6 	bl	80074da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	695a      	ldr	r2, [r3, #20]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800199c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f003 f99a 	bl	8004cdc <USB_ReadInterrupts>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f003 0308 	and.w	r3, r3, #8
 80019ae:	2b08      	cmp	r3, #8
 80019b0:	d10a      	bne.n	80019c8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f005 fd83 	bl	80074be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	695a      	ldr	r2, [r3, #20]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f002 0208 	and.w	r2, r2, #8
 80019c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f003 f985 	bl	8004cdc <USB_ReadInterrupts>
 80019d2:	4603      	mov	r3, r0
 80019d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d8:	2b80      	cmp	r3, #128	; 0x80
 80019da:	d122      	bne.n	8001a22 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019e4:	6a3b      	ldr	r3, [r7, #32]
 80019e6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80019e8:	2301      	movs	r3, #1
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
 80019ec:	e014      	b.n	8001a18 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019f2:	4613      	mov	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	4413      	add	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	440b      	add	r3, r1
 80019fc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d105      	bne.n	8001a12 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f000 fb27 	bl	8002060 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a14:	3301      	adds	r3, #1
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d3e5      	bcc.n	80019ee <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f003 f958 	bl	8004cdc <USB_ReadInterrupts>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001a36:	d13b      	bne.n	8001ab0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a38:	2301      	movs	r3, #1
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a3c:	e02b      	b.n	8001a96 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	015a      	lsls	r2, r3, #5
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	4413      	add	r3, r2
 8001a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a52:	4613      	mov	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	4413      	add	r3, r2
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	440b      	add	r3, r1
 8001a5c:	3340      	adds	r3, #64	; 0x40
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d115      	bne.n	8001a90 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001a64:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	da12      	bge.n	8001a90 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001a6a:	6879      	ldr	r1, [r7, #4]
 8001a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a6e:	4613      	mov	r3, r2
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	4413      	add	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	440b      	add	r3, r1
 8001a78:	333f      	adds	r3, #63	; 0x3f
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	4619      	mov	r1, r3
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f000 fae8 	bl	8002060 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	3301      	adds	r3, #1
 8001a94:	627b      	str	r3, [r7, #36]	; 0x24
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d3ce      	bcc.n	8001a3e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	695a      	ldr	r2, [r3, #20]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001aae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f003 f911 	bl	8004cdc <USB_ReadInterrupts>
 8001aba:	4603      	mov	r3, r0
 8001abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001ac4:	d155      	bne.n	8001b72 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aca:	e045      	b.n	8001b58 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	015a      	lsls	r2, r3, #5
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	4413      	add	r3, r2
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	440b      	add	r3, r1
 8001aea:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d12e      	bne.n	8001b52 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001af4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	da2b      	bge.n	8001b52 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001b06:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d121      	bne.n	8001b52 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001b0e:	6879      	ldr	r1, [r7, #4]
 8001b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b12:	4613      	mov	r3, r2
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	4413      	add	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001b20:	2201      	movs	r2, #1
 8001b22:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001b24:	6a3b      	ldr	r3, [r7, #32]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b2c:	6a3b      	ldr	r3, [r7, #32]
 8001b2e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001b30:	6a3b      	ldr	r3, [r7, #32]
 8001b32:	695b      	ldr	r3, [r3, #20]
 8001b34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d10a      	bne.n	8001b52 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	69fa      	ldr	r2, [r7, #28]
 8001b46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b4e:	6053      	str	r3, [r2, #4]
            break;
 8001b50:	e007      	b.n	8001b62 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	3301      	adds	r3, #1
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d3b4      	bcc.n	8001acc <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	695a      	ldr	r2, [r3, #20]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f003 f8b0 	bl	8004cdc <USB_ReadInterrupts>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b86:	d10a      	bne.n	8001b9e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f005 fd1d 	bl	80075c8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	695a      	ldr	r2, [r3, #20]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001b9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f003 f89a 	bl	8004cdc <USB_ReadInterrupts>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f003 0304 	and.w	r3, r3, #4
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	d115      	bne.n	8001bde <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	f003 0304 	and.w	r3, r3, #4
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d002      	beq.n	8001bca <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f005 fd0d 	bl	80075e4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6859      	ldr	r1, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	e000      	b.n	8001bde <HAL_PCD_IRQHandler+0x938>
      return;
 8001bdc:	bf00      	nop
    }
  }
}
 8001bde:	3734      	adds	r7, #52	; 0x34
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd90      	pop	{r4, r7, pc}

08001be4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d101      	bne.n	8001bfe <HAL_PCD_SetAddress+0x1a>
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	e013      	b.n	8001c26 <HAL_PCD_SetAddress+0x42>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	78fa      	ldrb	r2, [r7, #3]
 8001c0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	78fa      	ldrb	r2, [r7, #3]
 8001c14:	4611      	mov	r1, r2
 8001c16:	4618      	mov	r0, r3
 8001c18:	f002 fff8 	bl	8004c0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b084      	sub	sp, #16
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	4608      	mov	r0, r1
 8001c38:	4611      	mov	r1, r2
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	70fb      	strb	r3, [r7, #3]
 8001c40:	460b      	mov	r3, r1
 8001c42:	803b      	strh	r3, [r7, #0]
 8001c44:	4613      	mov	r3, r2
 8001c46:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	da0f      	bge.n	8001c74 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c54:	78fb      	ldrb	r3, [r7, #3]
 8001c56:	f003 020f 	and.w	r2, r3, #15
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	00db      	lsls	r3, r3, #3
 8001c5e:	4413      	add	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	3338      	adds	r3, #56	; 0x38
 8001c64:	687a      	ldr	r2, [r7, #4]
 8001c66:	4413      	add	r3, r2
 8001c68:	3304      	adds	r3, #4
 8001c6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	705a      	strb	r2, [r3, #1]
 8001c72:	e00f      	b.n	8001c94 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	f003 020f 	and.w	r2, r3, #15
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	4413      	add	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	4413      	add	r3, r2
 8001c8a:	3304      	adds	r3, #4
 8001c8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001c94:	78fb      	ldrb	r3, [r7, #3]
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ca0:	883a      	ldrh	r2, [r7, #0]
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	78ba      	ldrb	r2, [r7, #2]
 8001caa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	785b      	ldrb	r3, [r3, #1]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d004      	beq.n	8001cbe <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	b29a      	uxth	r2, r3
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001cbe:	78bb      	ldrb	r3, [r7, #2]
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d102      	bne.n	8001cca <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d101      	bne.n	8001cd8 <HAL_PCD_EP_Open+0xaa>
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	e00e      	b.n	8001cf6 <HAL_PCD_EP_Open+0xc8>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	68f9      	ldr	r1, [r7, #12]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f002 f878 	bl	8003ddc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001cf4:	7afb      	ldrb	r3, [r7, #11]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b084      	sub	sp, #16
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
 8001d06:	460b      	mov	r3, r1
 8001d08:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	da0f      	bge.n	8001d32 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d12:	78fb      	ldrb	r3, [r7, #3]
 8001d14:	f003 020f 	and.w	r2, r3, #15
 8001d18:	4613      	mov	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	3338      	adds	r3, #56	; 0x38
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	3304      	adds	r3, #4
 8001d28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	705a      	strb	r2, [r3, #1]
 8001d30:	e00f      	b.n	8001d52 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	f003 020f 	and.w	r2, r3, #15
 8001d38:	4613      	mov	r3, r2
 8001d3a:	00db      	lsls	r3, r3, #3
 8001d3c:	4413      	add	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	4413      	add	r3, r2
 8001d48:	3304      	adds	r3, #4
 8001d4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d52:	78fb      	ldrb	r3, [r7, #3]
 8001d54:	f003 030f 	and.w	r3, r3, #15
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d101      	bne.n	8001d6c <HAL_PCD_EP_Close+0x6e>
 8001d68:	2302      	movs	r3, #2
 8001d6a:	e00e      	b.n	8001d8a <HAL_PCD_EP_Close+0x8c>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68f9      	ldr	r1, [r7, #12]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f002 f8b6 	bl	8003eec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b086      	sub	sp, #24
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	60f8      	str	r0, [r7, #12]
 8001d9a:	607a      	str	r2, [r7, #4]
 8001d9c:	603b      	str	r3, [r7, #0]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001da2:	7afb      	ldrb	r3, [r7, #11]
 8001da4:	f003 020f 	and.w	r2, r3, #15
 8001da8:	4613      	mov	r3, r2
 8001daa:	00db      	lsls	r3, r3, #3
 8001dac:	4413      	add	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	4413      	add	r3, r2
 8001db8:	3304      	adds	r3, #4
 8001dba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dd4:	7afb      	ldrb	r3, [r7, #11]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d102      	bne.n	8001dee <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dee:	7afb      	ldrb	r3, [r7, #11]
 8001df0:	f003 030f 	and.w	r3, r3, #15
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d109      	bne.n	8001e0c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	6818      	ldr	r0, [r3, #0]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	461a      	mov	r2, r3
 8001e04:	6979      	ldr	r1, [r7, #20]
 8001e06:	f002 fb95 	bl	8004534 <USB_EP0StartXfer>
 8001e0a:	e008      	b.n	8001e1e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	6818      	ldr	r0, [r3, #0]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	461a      	mov	r2, r3
 8001e18:	6979      	ldr	r1, [r7, #20]
 8001e1a:	f002 f943 	bl	80040a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e34:	78fb      	ldrb	r3, [r7, #3]
 8001e36:	f003 020f 	and.w	r2, r3, #15
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	4413      	add	r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001e4a:	681b      	ldr	r3, [r3, #0]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr

08001e58 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	607a      	str	r2, [r7, #4]
 8001e62:	603b      	str	r3, [r7, #0]
 8001e64:	460b      	mov	r3, r1
 8001e66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e68:	7afb      	ldrb	r3, [r7, #11]
 8001e6a:	f003 020f 	and.w	r2, r3, #15
 8001e6e:	4613      	mov	r3, r2
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	4413      	add	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	3338      	adds	r3, #56	; 0x38
 8001e78:	68fa      	ldr	r2, [r7, #12]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	2201      	movs	r2, #1
 8001e96:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e98:	7afb      	ldrb	r3, [r7, #11]
 8001e9a:	f003 030f 	and.w	r3, r3, #15
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	691b      	ldr	r3, [r3, #16]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d102      	bne.n	8001eb2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001eb2:	7afb      	ldrb	r3, [r7, #11]
 8001eb4:	f003 030f 	and.w	r3, r3, #15
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d109      	bne.n	8001ed0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6818      	ldr	r0, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	6979      	ldr	r1, [r7, #20]
 8001eca:	f002 fb33 	bl	8004534 <USB_EP0StartXfer>
 8001ece:	e008      	b.n	8001ee2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6818      	ldr	r0, [r3, #0]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	461a      	mov	r2, r3
 8001edc:	6979      	ldr	r1, [r7, #20]
 8001ede:	f002 f8e1 	bl	80040a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3718      	adds	r7, #24
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001ef8:	78fb      	ldrb	r3, [r7, #3]
 8001efa:	f003 020f 	and.w	r2, r3, #15
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d901      	bls.n	8001f0a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e050      	b.n	8001fac <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	da0f      	bge.n	8001f32 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f12:	78fb      	ldrb	r3, [r7, #3]
 8001f14:	f003 020f 	and.w	r2, r3, #15
 8001f18:	4613      	mov	r3, r2
 8001f1a:	00db      	lsls	r3, r3, #3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	3338      	adds	r3, #56	; 0x38
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	3304      	adds	r3, #4
 8001f28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	705a      	strb	r2, [r3, #1]
 8001f30:	e00d      	b.n	8001f4e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f32:	78fa      	ldrb	r2, [r7, #3]
 8001f34:	4613      	mov	r3, r2
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4413      	add	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	4413      	add	r3, r2
 8001f44:	3304      	adds	r3, #4
 8001f46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2201      	movs	r2, #1
 8001f52:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f54:	78fb      	ldrb	r3, [r7, #3]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	b2da      	uxtb	r2, r3
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <HAL_PCD_EP_SetStall+0x82>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e01e      	b.n	8001fac <HAL_PCD_EP_SetStall+0xc0>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68f9      	ldr	r1, [r7, #12]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f002 fd71 	bl	8004a64 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f82:	78fb      	ldrb	r3, [r7, #3]
 8001f84:	f003 030f 	and.w	r3, r3, #15
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d10a      	bne.n	8001fa2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6818      	ldr	r0, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	b2d9      	uxtb	r1, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	f002 ff61 	bl	8004e64 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3710      	adds	r7, #16
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	f003 020f 	and.w	r2, r3, #15
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	429a      	cmp	r2, r3
 8001fcc:	d901      	bls.n	8001fd2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e042      	b.n	8002058 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	da0f      	bge.n	8001ffa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fda:	78fb      	ldrb	r3, [r7, #3]
 8001fdc:	f003 020f 	and.w	r2, r3, #15
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	4413      	add	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	3338      	adds	r3, #56	; 0x38
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	3304      	adds	r3, #4
 8001ff0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	705a      	strb	r2, [r3, #1]
 8001ff8:	e00f      	b.n	800201a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ffa:	78fb      	ldrb	r3, [r7, #3]
 8001ffc:	f003 020f 	and.w	r2, r3, #15
 8002000:	4613      	mov	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4413      	add	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	4413      	add	r3, r2
 8002010:	3304      	adds	r3, #4
 8002012:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2200      	movs	r2, #0
 800201e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002020:	78fb      	ldrb	r3, [r7, #3]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	b2da      	uxtb	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002032:	2b01      	cmp	r3, #1
 8002034:	d101      	bne.n	800203a <HAL_PCD_EP_ClrStall+0x86>
 8002036:	2302      	movs	r3, #2
 8002038:	e00e      	b.n	8002058 <HAL_PCD_EP_ClrStall+0xa4>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68f9      	ldr	r1, [r7, #12]
 8002048:	4618      	mov	r0, r3
 800204a:	f002 fd79 	bl	8004b40 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3710      	adds	r7, #16
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	460b      	mov	r3, r1
 800206a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800206c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002070:	2b00      	cmp	r3, #0
 8002072:	da0c      	bge.n	800208e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	f003 020f 	and.w	r2, r3, #15
 800207a:	4613      	mov	r3, r2
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4413      	add	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	3338      	adds	r3, #56	; 0x38
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	4413      	add	r3, r2
 8002088:	3304      	adds	r3, #4
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	e00c      	b.n	80020a8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800208e:	78fb      	ldrb	r3, [r7, #3]
 8002090:	f003 020f 	and.w	r2, r3, #15
 8002094:	4613      	mov	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4413      	add	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	4413      	add	r3, r2
 80020a4:	3304      	adds	r3, #4
 80020a6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	68f9      	ldr	r1, [r7, #12]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f002 fb98 	bl	80047e4 <USB_EPStopXfer>
 80020b4:	4603      	mov	r3, r0
 80020b6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80020b8:	7afb      	ldrb	r3, [r7, #11]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}

080020c2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020c2:	b580      	push	{r7, lr}
 80020c4:	b08a      	sub	sp, #40	; 0x28
 80020c6:	af02      	add	r7, sp, #8
 80020c8:	6078      	str	r0, [r7, #4]
 80020ca:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	4613      	mov	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	3338      	adds	r3, #56	; 0x38
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	4413      	add	r3, r2
 80020e6:	3304      	adds	r3, #4
 80020e8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6a1a      	ldr	r2, [r3, #32]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	699b      	ldr	r3, [r3, #24]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d901      	bls.n	80020fa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e06c      	b.n	80021d4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	699a      	ldr	r2, [r3, #24]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	69fa      	ldr	r2, [r7, #28]
 800210c:	429a      	cmp	r2, r3
 800210e:	d902      	bls.n	8002116 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3303      	adds	r3, #3
 800211a:	089b      	lsrs	r3, r3, #2
 800211c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800211e:	e02b      	b.n	8002178 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	699a      	ldr	r2, [r3, #24]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	69fa      	ldr	r2, [r7, #28]
 8002132:	429a      	cmp	r2, r3
 8002134:	d902      	bls.n	800213c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	3303      	adds	r3, #3
 8002140:	089b      	lsrs	r3, r3, #2
 8002142:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6919      	ldr	r1, [r3, #16]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	b2da      	uxtb	r2, r3
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002154:	b2db      	uxtb	r3, r3
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	4603      	mov	r3, r0
 800215a:	6978      	ldr	r0, [r7, #20]
 800215c:	f002 fbec 	bl	8004938 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	691a      	ldr	r2, [r3, #16]
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	441a      	add	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6a1a      	ldr	r2, [r3, #32]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	441a      	add	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	015a      	lsls	r2, r3, #5
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	4413      	add	r3, r2
 8002180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	b29b      	uxth	r3, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	429a      	cmp	r2, r3
 800218c:	d809      	bhi.n	80021a2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6a1a      	ldr	r2, [r3, #32]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002196:	429a      	cmp	r2, r3
 8002198:	d203      	bcs.n	80021a2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1be      	bne.n	8002120 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	699a      	ldr	r2, [r3, #24]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d811      	bhi.n	80021d2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	f003 030f 	and.w	r3, r3, #15
 80021b4:	2201      	movs	r2, #1
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	43db      	mvns	r3, r3
 80021c8:	6939      	ldr	r1, [r7, #16]
 80021ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021ce:	4013      	ands	r3, r2
 80021d0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3720      	adds	r7, #32
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b088      	sub	sp, #32
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	333c      	adds	r3, #60	; 0x3c
 80021f4:	3304      	adds	r3, #4
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	015a      	lsls	r2, r3, #5
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	4413      	add	r3, r2
 8002202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d17b      	bne.n	800230a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	2b00      	cmp	r3, #0
 800221a:	d015      	beq.n	8002248 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	4a61      	ldr	r2, [pc, #388]	; (80023a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002220:	4293      	cmp	r3, r2
 8002222:	f240 80b9 	bls.w	8002398 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 80b3 	beq.w	8002398 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	015a      	lsls	r2, r3, #5
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	4413      	add	r3, r2
 800223a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800223e:	461a      	mov	r2, r3
 8002240:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002244:	6093      	str	r3, [r2, #8]
 8002246:	e0a7      	b.n	8002398 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	f003 0320 	and.w	r3, r3, #32
 800224e:	2b00      	cmp	r3, #0
 8002250:	d009      	beq.n	8002266 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	015a      	lsls	r2, r3, #5
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	4413      	add	r3, r2
 800225a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800225e:	461a      	mov	r2, r3
 8002260:	2320      	movs	r3, #32
 8002262:	6093      	str	r3, [r2, #8]
 8002264:	e098      	b.n	8002398 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800226c:	2b00      	cmp	r3, #0
 800226e:	f040 8093 	bne.w	8002398 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	4a4b      	ldr	r2, [pc, #300]	; (80023a4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d90f      	bls.n	800229a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00a      	beq.n	800229a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	015a      	lsls	r2, r3, #5
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	4413      	add	r3, r2
 800228c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002290:	461a      	mov	r2, r3
 8002292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002296:	6093      	str	r3, [r2, #8]
 8002298:	e07e      	b.n	8002398 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	4613      	mov	r3, r2
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	4413      	add	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	4413      	add	r3, r2
 80022ac:	3304      	adds	r3, #4
 80022ae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	69da      	ldr	r2, [r3, #28]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	0159      	lsls	r1, r3, #5
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	440b      	add	r3, r1
 80022bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c6:	1ad2      	subs	r2, r2, r3
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d114      	bne.n	80022fc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d109      	bne.n	80022ee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6818      	ldr	r0, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022e4:	461a      	mov	r2, r3
 80022e6:	2101      	movs	r1, #1
 80022e8:	f002 fdbc 	bl	8004e64 <USB_EP0_OutStart>
 80022ec:	e006      	b.n	80022fc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	691a      	ldr	r2, [r3, #16]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	441a      	add	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	4619      	mov	r1, r3
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f005 f8a6 	bl	8007454 <HAL_PCD_DataOutStageCallback>
 8002308:	e046      	b.n	8002398 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	4a26      	ldr	r2, [pc, #152]	; (80023a8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d124      	bne.n	800235c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00a      	beq.n	8002332 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	015a      	lsls	r2, r3, #5
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	4413      	add	r3, r2
 8002324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002328:	461a      	mov	r2, r3
 800232a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800232e:	6093      	str	r3, [r2, #8]
 8002330:	e032      	b.n	8002398 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	f003 0320 	and.w	r3, r3, #32
 8002338:	2b00      	cmp	r3, #0
 800233a:	d008      	beq.n	800234e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	015a      	lsls	r2, r3, #5
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	4413      	add	r3, r2
 8002344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002348:	461a      	mov	r2, r3
 800234a:	2320      	movs	r3, #32
 800234c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	4619      	mov	r1, r3
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f005 f87d 	bl	8007454 <HAL_PCD_DataOutStageCallback>
 800235a:	e01d      	b.n	8002398 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d114      	bne.n	800238c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	4613      	mov	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4413      	add	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d108      	bne.n	800238c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6818      	ldr	r0, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002384:	461a      	mov	r2, r3
 8002386:	2100      	movs	r1, #0
 8002388:	f002 fd6c 	bl	8004e64 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	b2db      	uxtb	r3, r3
 8002390:	4619      	mov	r1, r3
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f005 f85e 	bl	8007454 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3720      	adds	r7, #32
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	4f54300a 	.word	0x4f54300a
 80023a8:	4f54310a 	.word	0x4f54310a

080023ac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	333c      	adds	r3, #60	; 0x3c
 80023c4:	3304      	adds	r3, #4
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	015a      	lsls	r2, r3, #5
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	4413      	add	r3, r2
 80023d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	4a15      	ldr	r2, [pc, #84]	; (8002434 <PCD_EP_OutSetupPacket_int+0x88>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d90e      	bls.n	8002400 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d009      	beq.n	8002400 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	015a      	lsls	r2, r3, #5
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	4413      	add	r3, r2
 80023f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023f8:	461a      	mov	r2, r3
 80023fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023fe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f005 f815 	bl	8007430 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	4a0a      	ldr	r2, [pc, #40]	; (8002434 <PCD_EP_OutSetupPacket_int+0x88>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d90c      	bls.n	8002428 <PCD_EP_OutSetupPacket_int+0x7c>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d108      	bne.n	8002428 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6818      	ldr	r0, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002420:	461a      	mov	r2, r3
 8002422:	2101      	movs	r1, #1
 8002424:	f002 fd1e 	bl	8004e64 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	4f54300a 	.word	0x4f54300a

08002438 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	70fb      	strb	r3, [r7, #3]
 8002444:	4613      	mov	r3, r2
 8002446:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002450:	78fb      	ldrb	r3, [r7, #3]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d107      	bne.n	8002466 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002456:	883b      	ldrh	r3, [r7, #0]
 8002458:	0419      	lsls	r1, r3, #16
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	430a      	orrs	r2, r1
 8002462:	629a      	str	r2, [r3, #40]	; 0x28
 8002464:	e028      	b.n	80024b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246c:	0c1b      	lsrs	r3, r3, #16
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	4413      	add	r3, r2
 8002472:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002474:	2300      	movs	r3, #0
 8002476:	73fb      	strb	r3, [r7, #15]
 8002478:	e00d      	b.n	8002496 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	3340      	adds	r3, #64	; 0x40
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	0c1b      	lsrs	r3, r3, #16
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	4413      	add	r3, r2
 800248e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002490:	7bfb      	ldrb	r3, [r7, #15]
 8002492:	3301      	adds	r3, #1
 8002494:	73fb      	strb	r3, [r7, #15]
 8002496:	7bfa      	ldrb	r2, [r7, #15]
 8002498:	78fb      	ldrb	r3, [r7, #3]
 800249a:	3b01      	subs	r3, #1
 800249c:	429a      	cmp	r2, r3
 800249e:	d3ec      	bcc.n	800247a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80024a0:	883b      	ldrh	r3, [r7, #0]
 80024a2:	0418      	lsls	r0, r3, #16
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6819      	ldr	r1, [r3, #0]
 80024a8:	78fb      	ldrb	r3, [r7, #3]
 80024aa:	3b01      	subs	r3, #1
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	4302      	orrs	r2, r0
 80024b0:	3340      	adds	r3, #64	; 0x40
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	440b      	add	r3, r1
 80024b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr

080024c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80024c6:	b480      	push	{r7}
 80024c8:	b083      	sub	sp, #12
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	6078      	str	r0, [r7, #4]
 80024ce:	460b      	mov	r3, r1
 80024d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	887a      	ldrh	r2, [r7, #2]
 80024d8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e267      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d075      	beq.n	800260a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800251e:	4b88      	ldr	r3, [pc, #544]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b04      	cmp	r3, #4
 8002528:	d00c      	beq.n	8002544 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800252a:	4b85      	ldr	r3, [pc, #532]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002532:	2b08      	cmp	r3, #8
 8002534:	d112      	bne.n	800255c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002536:	4b82      	ldr	r3, [pc, #520]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800253e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002542:	d10b      	bne.n	800255c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002544:	4b7e      	ldr	r3, [pc, #504]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d05b      	beq.n	8002608 <HAL_RCC_OscConfig+0x108>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d157      	bne.n	8002608 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e242      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002564:	d106      	bne.n	8002574 <HAL_RCC_OscConfig+0x74>
 8002566:	4b76      	ldr	r3, [pc, #472]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a75      	ldr	r2, [pc, #468]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 800256c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	e01d      	b.n	80025b0 <HAL_RCC_OscConfig+0xb0>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800257c:	d10c      	bne.n	8002598 <HAL_RCC_OscConfig+0x98>
 800257e:	4b70      	ldr	r3, [pc, #448]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a6f      	ldr	r2, [pc, #444]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	4b6d      	ldr	r3, [pc, #436]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a6c      	ldr	r2, [pc, #432]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	e00b      	b.n	80025b0 <HAL_RCC_OscConfig+0xb0>
 8002598:	4b69      	ldr	r3, [pc, #420]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a68      	ldr	r2, [pc, #416]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 800259e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	4b66      	ldr	r3, [pc, #408]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a65      	ldr	r2, [pc, #404]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 80025aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d013      	beq.n	80025e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7fe fa2c 	bl	8000a14 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c0:	f7fe fa28 	bl	8000a14 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b64      	cmp	r3, #100	; 0x64
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e207      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d2:	4b5b      	ldr	r3, [pc, #364]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0xc0>
 80025de:	e014      	b.n	800260a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e0:	f7fe fa18 	bl	8000a14 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025e8:	f7fe fa14 	bl	8000a14 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b64      	cmp	r3, #100	; 0x64
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e1f3      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fa:	4b51      	ldr	r3, [pc, #324]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0xe8>
 8002606:	e000      	b.n	800260a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d063      	beq.n	80026de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002616:	4b4a      	ldr	r3, [pc, #296]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00b      	beq.n	800263a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002622:	4b47      	ldr	r3, [pc, #284]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800262a:	2b08      	cmp	r3, #8
 800262c:	d11c      	bne.n	8002668 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800262e:	4b44      	ldr	r3, [pc, #272]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d116      	bne.n	8002668 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263a:	4b41      	ldr	r3, [pc, #260]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d005      	beq.n	8002652 <HAL_RCC_OscConfig+0x152>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d001      	beq.n	8002652 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e1c7      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002652:	4b3b      	ldr	r3, [pc, #236]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	4937      	ldr	r1, [pc, #220]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002666:	e03a      	b.n	80026de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d020      	beq.n	80026b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002670:	4b34      	ldr	r3, [pc, #208]	; (8002744 <HAL_RCC_OscConfig+0x244>)
 8002672:	2201      	movs	r2, #1
 8002674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002676:	f7fe f9cd 	bl	8000a14 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800267e:	f7fe f9c9 	bl	8000a14 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e1a8      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002690:	4b2b      	ldr	r3, [pc, #172]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0f0      	beq.n	800267e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269c:	4b28      	ldr	r3, [pc, #160]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4925      	ldr	r1, [pc, #148]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	600b      	str	r3, [r1, #0]
 80026b0:	e015      	b.n	80026de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026b2:	4b24      	ldr	r3, [pc, #144]	; (8002744 <HAL_RCC_OscConfig+0x244>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b8:	f7fe f9ac 	bl	8000a14 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026c0:	f7fe f9a8 	bl	8000a14 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e187      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d2:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d036      	beq.n	8002758 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d016      	beq.n	8002720 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f2:	4b15      	ldr	r3, [pc, #84]	; (8002748 <HAL_RCC_OscConfig+0x248>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f8:	f7fe f98c 	bl	8000a14 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002700:	f7fe f988 	bl	8000a14 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e167      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002712:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <HAL_RCC_OscConfig+0x240>)
 8002714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f0      	beq.n	8002700 <HAL_RCC_OscConfig+0x200>
 800271e:	e01b      	b.n	8002758 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002720:	4b09      	ldr	r3, [pc, #36]	; (8002748 <HAL_RCC_OscConfig+0x248>)
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002726:	f7fe f975 	bl	8000a14 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800272c:	e00e      	b.n	800274c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800272e:	f7fe f971 	bl	8000a14 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d907      	bls.n	800274c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e150      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
 8002740:	40023800 	.word	0x40023800
 8002744:	42470000 	.word	0x42470000
 8002748:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800274c:	4b88      	ldr	r3, [pc, #544]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 800274e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1ea      	bne.n	800272e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	f000 8097 	beq.w	8002894 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002766:	2300      	movs	r3, #0
 8002768:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800276a:	4b81      	ldr	r3, [pc, #516]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10f      	bne.n	8002796 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	4b7d      	ldr	r3, [pc, #500]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	4a7c      	ldr	r2, [pc, #496]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 8002780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002784:	6413      	str	r3, [r2, #64]	; 0x40
 8002786:	4b7a      	ldr	r3, [pc, #488]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800278e:	60bb      	str	r3, [r7, #8]
 8002790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002792:	2301      	movs	r3, #1
 8002794:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002796:	4b77      	ldr	r3, [pc, #476]	; (8002974 <HAL_RCC_OscConfig+0x474>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d118      	bne.n	80027d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027a2:	4b74      	ldr	r3, [pc, #464]	; (8002974 <HAL_RCC_OscConfig+0x474>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a73      	ldr	r2, [pc, #460]	; (8002974 <HAL_RCC_OscConfig+0x474>)
 80027a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027ae:	f7fe f931 	bl	8000a14 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027b6:	f7fe f92d 	bl	8000a14 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e10c      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c8:	4b6a      	ldr	r3, [pc, #424]	; (8002974 <HAL_RCC_OscConfig+0x474>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0f0      	beq.n	80027b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d106      	bne.n	80027ea <HAL_RCC_OscConfig+0x2ea>
 80027dc:	4b64      	ldr	r3, [pc, #400]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 80027de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e0:	4a63      	ldr	r2, [pc, #396]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	6713      	str	r3, [r2, #112]	; 0x70
 80027e8:	e01c      	b.n	8002824 <HAL_RCC_OscConfig+0x324>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	2b05      	cmp	r3, #5
 80027f0:	d10c      	bne.n	800280c <HAL_RCC_OscConfig+0x30c>
 80027f2:	4b5f      	ldr	r3, [pc, #380]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 80027f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f6:	4a5e      	ldr	r2, [pc, #376]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 80027f8:	f043 0304 	orr.w	r3, r3, #4
 80027fc:	6713      	str	r3, [r2, #112]	; 0x70
 80027fe:	4b5c      	ldr	r3, [pc, #368]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 8002800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002802:	4a5b      	ldr	r2, [pc, #364]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	6713      	str	r3, [r2, #112]	; 0x70
 800280a:	e00b      	b.n	8002824 <HAL_RCC_OscConfig+0x324>
 800280c:	4b58      	ldr	r3, [pc, #352]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 800280e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002810:	4a57      	ldr	r2, [pc, #348]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 8002812:	f023 0301 	bic.w	r3, r3, #1
 8002816:	6713      	str	r3, [r2, #112]	; 0x70
 8002818:	4b55      	ldr	r3, [pc, #340]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 800281a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281c:	4a54      	ldr	r2, [pc, #336]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 800281e:	f023 0304 	bic.w	r3, r3, #4
 8002822:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d015      	beq.n	8002858 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282c:	f7fe f8f2 	bl	8000a14 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002832:	e00a      	b.n	800284a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002834:	f7fe f8ee 	bl	8000a14 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002842:	4293      	cmp	r3, r2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e0cb      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800284a:	4b49      	ldr	r3, [pc, #292]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0ee      	beq.n	8002834 <HAL_RCC_OscConfig+0x334>
 8002856:	e014      	b.n	8002882 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002858:	f7fe f8dc 	bl	8000a14 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800285e:	e00a      	b.n	8002876 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002860:	f7fe f8d8 	bl	8000a14 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	f241 3288 	movw	r2, #5000	; 0x1388
 800286e:	4293      	cmp	r3, r2
 8002870:	d901      	bls.n	8002876 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002872:	2303      	movs	r3, #3
 8002874:	e0b5      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002876:	4b3e      	ldr	r3, [pc, #248]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 8002878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d1ee      	bne.n	8002860 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002882:	7dfb      	ldrb	r3, [r7, #23]
 8002884:	2b01      	cmp	r3, #1
 8002886:	d105      	bne.n	8002894 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002888:	4b39      	ldr	r3, [pc, #228]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	4a38      	ldr	r2, [pc, #224]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 800288e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002892:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	699b      	ldr	r3, [r3, #24]
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 80a1 	beq.w	80029e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800289e:	4b34      	ldr	r3, [pc, #208]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f003 030c 	and.w	r3, r3, #12
 80028a6:	2b08      	cmp	r3, #8
 80028a8:	d05c      	beq.n	8002964 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d141      	bne.n	8002936 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b2:	4b31      	ldr	r3, [pc, #196]	; (8002978 <HAL_RCC_OscConfig+0x478>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b8:	f7fe f8ac 	bl	8000a14 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c0:	f7fe f8a8 	bl	8000a14 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e087      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d2:	4b27      	ldr	r3, [pc, #156]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	69da      	ldr	r2, [r3, #28]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	431a      	orrs	r2, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	019b      	lsls	r3, r3, #6
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f4:	085b      	lsrs	r3, r3, #1
 80028f6:	3b01      	subs	r3, #1
 80028f8:	041b      	lsls	r3, r3, #16
 80028fa:	431a      	orrs	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	061b      	lsls	r3, r3, #24
 8002902:	491b      	ldr	r1, [pc, #108]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 8002904:	4313      	orrs	r3, r2
 8002906:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002908:	4b1b      	ldr	r3, [pc, #108]	; (8002978 <HAL_RCC_OscConfig+0x478>)
 800290a:	2201      	movs	r2, #1
 800290c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290e:	f7fe f881 	bl	8000a14 <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002916:	f7fe f87d 	bl	8000a14 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e05c      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002928:	4b11      	ldr	r3, [pc, #68]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0f0      	beq.n	8002916 <HAL_RCC_OscConfig+0x416>
 8002934:	e054      	b.n	80029e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002936:	4b10      	ldr	r3, [pc, #64]	; (8002978 <HAL_RCC_OscConfig+0x478>)
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293c:	f7fe f86a 	bl	8000a14 <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002944:	f7fe f866 	bl	8000a14 <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e045      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002956:	4b06      	ldr	r3, [pc, #24]	; (8002970 <HAL_RCC_OscConfig+0x470>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0x444>
 8002962:	e03d      	b.n	80029e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d107      	bne.n	800297c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e038      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
 8002970:	40023800 	.word	0x40023800
 8002974:	40007000 	.word	0x40007000
 8002978:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800297c:	4b1b      	ldr	r3, [pc, #108]	; (80029ec <HAL_RCC_OscConfig+0x4ec>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d028      	beq.n	80029dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002994:	429a      	cmp	r2, r3
 8002996:	d121      	bne.n	80029dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d11a      	bne.n	80029dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029ac:	4013      	ands	r3, r2
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d111      	bne.n	80029dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c2:	085b      	lsrs	r3, r3, #1
 80029c4:	3b01      	subs	r3, #1
 80029c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d107      	bne.n	80029dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029d8:	429a      	cmp	r2, r3
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029e0:	2300      	movs	r3, #0
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3718      	adds	r7, #24
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	40023800 	.word	0x40023800

080029f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e0cc      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a04:	4b68      	ldr	r3, [pc, #416]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d90c      	bls.n	8002a2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a12:	4b65      	ldr	r3, [pc, #404]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1a:	4b63      	ldr	r3, [pc, #396]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0b8      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d020      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d005      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a44:	4b59      	ldr	r3, [pc, #356]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	4a58      	ldr	r2, [pc, #352]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a5c:	4b53      	ldr	r3, [pc, #332]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	4a52      	ldr	r2, [pc, #328]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a68:	4b50      	ldr	r3, [pc, #320]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	494d      	ldr	r1, [pc, #308]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d044      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d107      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8e:	4b47      	ldr	r3, [pc, #284]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d119      	bne.n	8002ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e07f      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d003      	beq.n	8002aae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aaa:	2b03      	cmp	r3, #3
 8002aac:	d107      	bne.n	8002abe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aae:	4b3f      	ldr	r3, [pc, #252]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d109      	bne.n	8002ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e06f      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002abe:	4b3b      	ldr	r3, [pc, #236]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e067      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ace:	4b37      	ldr	r3, [pc, #220]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f023 0203 	bic.w	r2, r3, #3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	4934      	ldr	r1, [pc, #208]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ae0:	f7fd ff98 	bl	8000a14 <HAL_GetTick>
 8002ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae6:	e00a      	b.n	8002afe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae8:	f7fd ff94 	bl	8000a14 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e04f      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afe:	4b2b      	ldr	r3, [pc, #172]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 020c 	and.w	r2, r3, #12
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d1eb      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b10:	4b25      	ldr	r3, [pc, #148]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d20c      	bcs.n	8002b38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1e:	4b22      	ldr	r3, [pc, #136]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b26:	4b20      	ldr	r3, [pc, #128]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d001      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e032      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d008      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b44:	4b19      	ldr	r3, [pc, #100]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	4916      	ldr	r1, [pc, #88]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d009      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b62:	4b12      	ldr	r3, [pc, #72]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	490e      	ldr	r1, [pc, #56]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b76:	f000 f821 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	091b      	lsrs	r3, r3, #4
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	490a      	ldr	r1, [pc, #40]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b88:	5ccb      	ldrb	r3, [r1, r3]
 8002b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8e:	4a09      	ldr	r2, [pc, #36]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b92:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fd fef8 	bl	800098c <HAL_InitTick>

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40023c00 	.word	0x40023c00
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	08007ba8 	.word	0x08007ba8
 8002bb4:	20000000 	.word	0x20000000
 8002bb8:	20000004 	.word	0x20000004

08002bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bc0:	b090      	sub	sp, #64	; 0x40
 8002bc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	637b      	str	r3, [r7, #52]	; 0x34
 8002bc8:	2300      	movs	r3, #0
 8002bca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bcc:	2300      	movs	r3, #0
 8002bce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bd4:	4b59      	ldr	r3, [pc, #356]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 030c 	and.w	r3, r3, #12
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d00d      	beq.n	8002bfc <HAL_RCC_GetSysClockFreq+0x40>
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	f200 80a1 	bhi.w	8002d28 <HAL_RCC_GetSysClockFreq+0x16c>
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x34>
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d003      	beq.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bee:	e09b      	b.n	8002d28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bf0:	4b53      	ldr	r3, [pc, #332]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x184>)
 8002bf2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002bf4:	e09b      	b.n	8002d2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bf6:	4b53      	ldr	r3, [pc, #332]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bf8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bfa:	e098      	b.n	8002d2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bfc:	4b4f      	ldr	r3, [pc, #316]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c04:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c06:	4b4d      	ldr	r3, [pc, #308]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d028      	beq.n	8002c64 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c12:	4b4a      	ldr	r3, [pc, #296]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	099b      	lsrs	r3, r3, #6
 8002c18:	2200      	movs	r2, #0
 8002c1a:	623b      	str	r3, [r7, #32]
 8002c1c:	627a      	str	r2, [r7, #36]	; 0x24
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c24:	2100      	movs	r1, #0
 8002c26:	4b47      	ldr	r3, [pc, #284]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c28:	fb03 f201 	mul.w	r2, r3, r1
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	fb00 f303 	mul.w	r3, r0, r3
 8002c32:	4413      	add	r3, r2
 8002c34:	4a43      	ldr	r2, [pc, #268]	; (8002d44 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c36:	fba0 1202 	umull	r1, r2, r0, r2
 8002c3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c3c:	460a      	mov	r2, r1
 8002c3e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c42:	4413      	add	r3, r2
 8002c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c48:	2200      	movs	r2, #0
 8002c4a:	61bb      	str	r3, [r7, #24]
 8002c4c:	61fa      	str	r2, [r7, #28]
 8002c4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c56:	f7fd fabf 	bl	80001d8 <__aeabi_uldivmod>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	4613      	mov	r3, r2
 8002c60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c62:	e053      	b.n	8002d0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c64:	4b35      	ldr	r3, [pc, #212]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	099b      	lsrs	r3, r3, #6
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	613b      	str	r3, [r7, #16]
 8002c6e:	617a      	str	r2, [r7, #20]
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c76:	f04f 0b00 	mov.w	fp, #0
 8002c7a:	4652      	mov	r2, sl
 8002c7c:	465b      	mov	r3, fp
 8002c7e:	f04f 0000 	mov.w	r0, #0
 8002c82:	f04f 0100 	mov.w	r1, #0
 8002c86:	0159      	lsls	r1, r3, #5
 8002c88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c8c:	0150      	lsls	r0, r2, #5
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	ebb2 080a 	subs.w	r8, r2, sl
 8002c96:	eb63 090b 	sbc.w	r9, r3, fp
 8002c9a:	f04f 0200 	mov.w	r2, #0
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002ca6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002caa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002cae:	ebb2 0408 	subs.w	r4, r2, r8
 8002cb2:	eb63 0509 	sbc.w	r5, r3, r9
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	00eb      	lsls	r3, r5, #3
 8002cc0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cc4:	00e2      	lsls	r2, r4, #3
 8002cc6:	4614      	mov	r4, r2
 8002cc8:	461d      	mov	r5, r3
 8002cca:	eb14 030a 	adds.w	r3, r4, sl
 8002cce:	603b      	str	r3, [r7, #0]
 8002cd0:	eb45 030b 	adc.w	r3, r5, fp
 8002cd4:	607b      	str	r3, [r7, #4]
 8002cd6:	f04f 0200 	mov.w	r2, #0
 8002cda:	f04f 0300 	mov.w	r3, #0
 8002cde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ce2:	4629      	mov	r1, r5
 8002ce4:	028b      	lsls	r3, r1, #10
 8002ce6:	4621      	mov	r1, r4
 8002ce8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cec:	4621      	mov	r1, r4
 8002cee:	028a      	lsls	r2, r1, #10
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	60bb      	str	r3, [r7, #8]
 8002cfa:	60fa      	str	r2, [r7, #12]
 8002cfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d00:	f7fd fa6a 	bl	80001d8 <__aeabi_uldivmod>
 8002d04:	4602      	mov	r2, r0
 8002d06:	460b      	mov	r3, r1
 8002d08:	4613      	mov	r3, r2
 8002d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	0c1b      	lsrs	r3, r3, #16
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	3301      	adds	r3, #1
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002d1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d26:	e002      	b.n	8002d2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d2a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3740      	adds	r7, #64	; 0x40
 8002d34:	46bd      	mov	sp, r7
 8002d36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	00f42400 	.word	0x00f42400
 8002d44:	017d7840 	.word	0x017d7840

08002d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d4c:	4b03      	ldr	r3, [pc, #12]	; (8002d5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	20000000 	.word	0x20000000

08002d60 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e041      	b.n	8002df6 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d106      	bne.n	8002d8c <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7fd fd8c 	bl	80008a4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4610      	mov	r0, r2
 8002da0:	f000 f9c4 	bl	800312c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b082      	sub	sp, #8
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d122      	bne.n	8002e5a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d11b      	bne.n	8002e5a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f06f 0202 	mvn.w	r2, #2
 8002e2a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	f003 0303 	and.w	r3, r3, #3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f955 	bl	80030f0 <HAL_TIM_IC_CaptureCallback>
 8002e46:	e005      	b.n	8002e54 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f947 	bl	80030dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f958 	bl	8003104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	d122      	bne.n	8002eae <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	f003 0304 	and.w	r3, r3, #4
 8002e72:	2b04      	cmp	r3, #4
 8002e74:	d11b      	bne.n	8002eae <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f06f 0204 	mvn.w	r2, #4
 8002e7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2202      	movs	r2, #2
 8002e84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f000 f92b 	bl	80030f0 <HAL_TIM_IC_CaptureCallback>
 8002e9a:	e005      	b.n	8002ea8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f91d 	bl	80030dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f000 f92e 	bl	8003104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	f003 0308 	and.w	r3, r3, #8
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	d122      	bne.n	8002f02 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f003 0308 	and.w	r3, r3, #8
 8002ec6:	2b08      	cmp	r3, #8
 8002ec8:	d11b      	bne.n	8002f02 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f06f 0208 	mvn.w	r2, #8
 8002ed2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2204      	movs	r2, #4
 8002ed8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	f003 0303 	and.w	r3, r3, #3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d003      	beq.n	8002ef0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f901 	bl	80030f0 <HAL_TIM_IC_CaptureCallback>
 8002eee:	e005      	b.n	8002efc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f000 f8f3 	bl	80030dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f904 	bl	8003104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	f003 0310 	and.w	r3, r3, #16
 8002f0c:	2b10      	cmp	r3, #16
 8002f0e:	d122      	bne.n	8002f56 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f003 0310 	and.w	r3, r3, #16
 8002f1a:	2b10      	cmp	r3, #16
 8002f1c:	d11b      	bne.n	8002f56 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f06f 0210 	mvn.w	r2, #16
 8002f26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2208      	movs	r2, #8
 8002f2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d003      	beq.n	8002f44 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f8d7 	bl	80030f0 <HAL_TIM_IC_CaptureCallback>
 8002f42:	e005      	b.n	8002f50 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f8c9 	bl	80030dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f8da 	bl	8003104 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2200      	movs	r2, #0
 8002f54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d10e      	bne.n	8002f82 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	f003 0301 	and.w	r3, r3, #1
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d107      	bne.n	8002f82 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f06f 0201 	mvn.w	r2, #1
 8002f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f000 f8a3 	bl	80030c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f8c:	2b80      	cmp	r3, #128	; 0x80
 8002f8e:	d10e      	bne.n	8002fae <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9a:	2b80      	cmp	r3, #128	; 0x80
 8002f9c:	d107      	bne.n	8002fae <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 fb95 	bl	80036d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fb8:	2b40      	cmp	r3, #64	; 0x40
 8002fba:	d10e      	bne.n	8002fda <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc6:	2b40      	cmp	r3, #64	; 0x40
 8002fc8:	d107      	bne.n	8002fda <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002fd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f000 f89f 	bl	8003118 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	691b      	ldr	r3, [r3, #16]
 8002fe0:	f003 0320 	and.w	r3, r3, #32
 8002fe4:	2b20      	cmp	r3, #32
 8002fe6:	d10e      	bne.n	8003006 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f003 0320 	and.w	r3, r3, #32
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	d107      	bne.n	8003006 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f06f 0220 	mvn.w	r2, #32
 8002ffe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 fb5f 	bl	80036c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003006:	bf00      	nop
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800301c:	2300      	movs	r3, #0
 800301e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003026:	2b01      	cmp	r3, #1
 8003028:	d101      	bne.n	800302e <HAL_TIM_OC_ConfigChannel+0x1e>
 800302a:	2302      	movs	r3, #2
 800302c:	e048      	b.n	80030c0 <HAL_TIM_OC_ConfigChannel+0xb0>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2b0c      	cmp	r3, #12
 800303a:	d839      	bhi.n	80030b0 <HAL_TIM_OC_ConfigChannel+0xa0>
 800303c:	a201      	add	r2, pc, #4	; (adr r2, 8003044 <HAL_TIM_OC_ConfigChannel+0x34>)
 800303e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003042:	bf00      	nop
 8003044:	08003079 	.word	0x08003079
 8003048:	080030b1 	.word	0x080030b1
 800304c:	080030b1 	.word	0x080030b1
 8003050:	080030b1 	.word	0x080030b1
 8003054:	08003087 	.word	0x08003087
 8003058:	080030b1 	.word	0x080030b1
 800305c:	080030b1 	.word	0x080030b1
 8003060:	080030b1 	.word	0x080030b1
 8003064:	08003095 	.word	0x08003095
 8003068:	080030b1 	.word	0x080030b1
 800306c:	080030b1 	.word	0x080030b1
 8003070:	080030b1 	.word	0x080030b1
 8003074:	080030a3 	.word	0x080030a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68b9      	ldr	r1, [r7, #8]
 800307e:	4618      	mov	r0, r3
 8003080:	f000 f8d4 	bl	800322c <TIM_OC1_SetConfig>
      break;
 8003084:	e017      	b.n	80030b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68b9      	ldr	r1, [r7, #8]
 800308c:	4618      	mov	r0, r3
 800308e:	f000 f933 	bl	80032f8 <TIM_OC2_SetConfig>
      break;
 8003092:	e010      	b.n	80030b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68b9      	ldr	r1, [r7, #8]
 800309a:	4618      	mov	r0, r3
 800309c:	f000 f998 	bl	80033d0 <TIM_OC3_SetConfig>
      break;
 80030a0:	e009      	b.n	80030b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68b9      	ldr	r1, [r7, #8]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 f9fb 	bl	80034a4 <TIM_OC4_SetConfig>
      break;
 80030ae:	e002      	b.n	80030b6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	75fb      	strb	r3, [r7, #23]
      break;
 80030b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80030be:	7dfb      	ldrb	r3, [r7, #23]
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3718      	adds	r7, #24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003118:	b480      	push	{r7}
 800311a:	b083      	sub	sp, #12
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003120:	bf00      	nop
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a34      	ldr	r2, [pc, #208]	; (8003210 <TIM_Base_SetConfig+0xe4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d00f      	beq.n	8003164 <TIM_Base_SetConfig+0x38>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314a:	d00b      	beq.n	8003164 <TIM_Base_SetConfig+0x38>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a31      	ldr	r2, [pc, #196]	; (8003214 <TIM_Base_SetConfig+0xe8>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d007      	beq.n	8003164 <TIM_Base_SetConfig+0x38>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	4a30      	ldr	r2, [pc, #192]	; (8003218 <TIM_Base_SetConfig+0xec>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d003      	beq.n	8003164 <TIM_Base_SetConfig+0x38>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	4a2f      	ldr	r2, [pc, #188]	; (800321c <TIM_Base_SetConfig+0xf0>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d108      	bne.n	8003176 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800316a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	4313      	orrs	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a25      	ldr	r2, [pc, #148]	; (8003210 <TIM_Base_SetConfig+0xe4>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d01b      	beq.n	80031b6 <TIM_Base_SetConfig+0x8a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003184:	d017      	beq.n	80031b6 <TIM_Base_SetConfig+0x8a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a22      	ldr	r2, [pc, #136]	; (8003214 <TIM_Base_SetConfig+0xe8>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d013      	beq.n	80031b6 <TIM_Base_SetConfig+0x8a>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a21      	ldr	r2, [pc, #132]	; (8003218 <TIM_Base_SetConfig+0xec>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d00f      	beq.n	80031b6 <TIM_Base_SetConfig+0x8a>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a20      	ldr	r2, [pc, #128]	; (800321c <TIM_Base_SetConfig+0xf0>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d00b      	beq.n	80031b6 <TIM_Base_SetConfig+0x8a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a1f      	ldr	r2, [pc, #124]	; (8003220 <TIM_Base_SetConfig+0xf4>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d007      	beq.n	80031b6 <TIM_Base_SetConfig+0x8a>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a1e      	ldr	r2, [pc, #120]	; (8003224 <TIM_Base_SetConfig+0xf8>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d003      	beq.n	80031b6 <TIM_Base_SetConfig+0x8a>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a1d      	ldr	r2, [pc, #116]	; (8003228 <TIM_Base_SetConfig+0xfc>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d108      	bne.n	80031c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	695b      	ldr	r3, [r3, #20]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	4a08      	ldr	r2, [pc, #32]	; (8003210 <TIM_Base_SetConfig+0xe4>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d103      	bne.n	80031fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	691a      	ldr	r2, [r3, #16]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	615a      	str	r2, [r3, #20]
}
 8003202:	bf00      	nop
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	40010000 	.word	0x40010000
 8003214:	40000400 	.word	0x40000400
 8003218:	40000800 	.word	0x40000800
 800321c:	40000c00 	.word	0x40000c00
 8003220:	40014000 	.word	0x40014000
 8003224:	40014400 	.word	0x40014400
 8003228:	40014800 	.word	0x40014800

0800322c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800322c:	b480      	push	{r7}
 800322e:	b087      	sub	sp, #28
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	f023 0201 	bic.w	r2, r3, #1
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800325a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f023 0303 	bic.w	r3, r3, #3
 8003262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	4313      	orrs	r3, r2
 800326c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f023 0302 	bic.w	r3, r3, #2
 8003274:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	4313      	orrs	r3, r2
 800327e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a1c      	ldr	r2, [pc, #112]	; (80032f4 <TIM_OC1_SetConfig+0xc8>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d10c      	bne.n	80032a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	f023 0308 	bic.w	r3, r3, #8
 800328e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	697a      	ldr	r2, [r7, #20]
 8003296:	4313      	orrs	r3, r2
 8003298:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f023 0304 	bic.w	r3, r3, #4
 80032a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a13      	ldr	r2, [pc, #76]	; (80032f4 <TIM_OC1_SetConfig+0xc8>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d111      	bne.n	80032ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	693a      	ldr	r2, [r7, #16]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	693a      	ldr	r2, [r7, #16]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	621a      	str	r2, [r3, #32]
}
 80032e8:	bf00      	nop
 80032ea:	371c      	adds	r7, #28
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	40010000 	.word	0x40010000

080032f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	f023 0210 	bic.w	r2, r3, #16
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003326:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800332e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	021b      	lsls	r3, r3, #8
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	4313      	orrs	r3, r2
 800333a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f023 0320 	bic.w	r3, r3, #32
 8003342:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	4313      	orrs	r3, r2
 800334e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a1e      	ldr	r2, [pc, #120]	; (80033cc <TIM_OC2_SetConfig+0xd4>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d10d      	bne.n	8003374 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800335e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	4313      	orrs	r3, r2
 800336a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003372:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a15      	ldr	r2, [pc, #84]	; (80033cc <TIM_OC2_SetConfig+0xd4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d113      	bne.n	80033a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003382:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800338a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4313      	orrs	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	699b      	ldr	r3, [r3, #24]
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	621a      	str	r2, [r3, #32]
}
 80033be:	bf00      	nop
 80033c0:	371c      	adds	r7, #28
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40010000 	.word	0x40010000

080033d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b087      	sub	sp, #28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a1b      	ldr	r3, [r3, #32]
 80033de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a1b      	ldr	r3, [r3, #32]
 80033ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	69db      	ldr	r3, [r3, #28]
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f023 0303 	bic.w	r3, r3, #3
 8003406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	021b      	lsls	r3, r3, #8
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	4313      	orrs	r3, r2
 8003424:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a1d      	ldr	r2, [pc, #116]	; (80034a0 <TIM_OC3_SetConfig+0xd0>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d10d      	bne.n	800344a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003434:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	021b      	lsls	r3, r3, #8
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	4313      	orrs	r3, r2
 8003440:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003448:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a14      	ldr	r2, [pc, #80]	; (80034a0 <TIM_OC3_SetConfig+0xd0>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d113      	bne.n	800347a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4313      	orrs	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	621a      	str	r2, [r3, #32]
}
 8003494:	bf00      	nop
 8003496:	371c      	adds	r7, #28
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	40010000 	.word	0x40010000

080034a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b087      	sub	sp, #28
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a1b      	ldr	r3, [r3, #32]
 80034be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69db      	ldr	r3, [r3, #28]
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	021b      	lsls	r3, r3, #8
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	031b      	lsls	r3, r3, #12
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a10      	ldr	r2, [pc, #64]	; (8003540 <TIM_OC4_SetConfig+0x9c>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d109      	bne.n	8003518 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800350a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	019b      	lsls	r3, r3, #6
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	4313      	orrs	r3, r2
 8003516:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68fa      	ldr	r2, [r7, #12]
 8003522:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	621a      	str	r2, [r3, #32]
}
 8003532:	bf00      	nop
 8003534:	371c      	adds	r7, #28
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	40010000 	.word	0x40010000

08003544 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003554:	2b01      	cmp	r3, #1
 8003556:	d101      	bne.n	800355c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003558:	2302      	movs	r3, #2
 800355a:	e050      	b.n	80035fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2202      	movs	r2, #2
 8003568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003582:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	4313      	orrs	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a1c      	ldr	r2, [pc, #112]	; (800360c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d018      	beq.n	80035d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035a8:	d013      	beq.n	80035d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a18      	ldr	r2, [pc, #96]	; (8003610 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d00e      	beq.n	80035d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a16      	ldr	r2, [pc, #88]	; (8003614 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d009      	beq.n	80035d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a15      	ldr	r2, [pc, #84]	; (8003618 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d004      	beq.n	80035d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a13      	ldr	r2, [pc, #76]	; (800361c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d10c      	bne.n	80035ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	40010000 	.word	0x40010000
 8003610:	40000400 	.word	0x40000400
 8003614:	40000800 	.word	0x40000800
 8003618:	40000c00 	.word	0x40000c00
 800361c:	40014000 	.word	0x40014000

08003620 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003620:	b480      	push	{r7}
 8003622:	b085      	sub	sp, #20
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800362a:	2300      	movs	r3, #0
 800362c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003638:	2302      	movs	r3, #2
 800363a:	e03d      	b.n	80036b8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	4313      	orrs	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	4313      	orrs	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	4313      	orrs	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4313      	orrs	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	4313      	orrs	r3, r2
 8003696:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	69db      	ldr	r3, [r3, #28]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036ec:	b084      	sub	sp, #16
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b084      	sub	sp, #16
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
 80036f6:	f107 001c 	add.w	r0, r7, #28
 80036fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80036fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003700:	2b01      	cmp	r3, #1
 8003702:	d122      	bne.n	800374a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003708:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800372c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800372e:	2b01      	cmp	r3, #1
 8003730:	d105      	bne.n	800373e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f001 fbee 	bl	8004f20 <USB_CoreReset>
 8003744:	4603      	mov	r3, r0
 8003746:	73fb      	strb	r3, [r7, #15]
 8003748:	e01a      	b.n	8003780 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f001 fbe2 	bl	8004f20 <USB_CoreReset>
 800375c:	4603      	mov	r3, r0
 800375e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003760:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003762:	2b00      	cmp	r3, #0
 8003764:	d106      	bne.n	8003774 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	639a      	str	r2, [r3, #56]	; 0x38
 8003772:	e005      	b.n	8003780 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003778:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003782:	2b01      	cmp	r3, #1
 8003784:	d10b      	bne.n	800379e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f043 0206 	orr.w	r2, r3, #6
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f043 0220 	orr.w	r2, r3, #32
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800379e:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3710      	adds	r7, #16
 80037a4:	46bd      	mov	sp, r7
 80037a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037aa:	b004      	add	sp, #16
 80037ac:	4770      	bx	lr
	...

080037b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	4613      	mov	r3, r2
 80037bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80037be:	79fb      	ldrb	r3, [r7, #7]
 80037c0:	2b02      	cmp	r3, #2
 80037c2:	d165      	bne.n	8003890 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	4a41      	ldr	r2, [pc, #260]	; (80038cc <USB_SetTurnaroundTime+0x11c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d906      	bls.n	80037da <USB_SetTurnaroundTime+0x2a>
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	4a40      	ldr	r2, [pc, #256]	; (80038d0 <USB_SetTurnaroundTime+0x120>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d202      	bcs.n	80037da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80037d4:	230f      	movs	r3, #15
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	e062      	b.n	80038a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	4a3c      	ldr	r2, [pc, #240]	; (80038d0 <USB_SetTurnaroundTime+0x120>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d306      	bcc.n	80037f0 <USB_SetTurnaroundTime+0x40>
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	4a3b      	ldr	r2, [pc, #236]	; (80038d4 <USB_SetTurnaroundTime+0x124>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d202      	bcs.n	80037f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80037ea:	230e      	movs	r3, #14
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	e057      	b.n	80038a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	4a38      	ldr	r2, [pc, #224]	; (80038d4 <USB_SetTurnaroundTime+0x124>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d306      	bcc.n	8003806 <USB_SetTurnaroundTime+0x56>
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	4a37      	ldr	r2, [pc, #220]	; (80038d8 <USB_SetTurnaroundTime+0x128>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d202      	bcs.n	8003806 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003800:	230d      	movs	r3, #13
 8003802:	617b      	str	r3, [r7, #20]
 8003804:	e04c      	b.n	80038a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	4a33      	ldr	r2, [pc, #204]	; (80038d8 <USB_SetTurnaroundTime+0x128>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d306      	bcc.n	800381c <USB_SetTurnaroundTime+0x6c>
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	4a32      	ldr	r2, [pc, #200]	; (80038dc <USB_SetTurnaroundTime+0x12c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d802      	bhi.n	800381c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003816:	230c      	movs	r3, #12
 8003818:	617b      	str	r3, [r7, #20]
 800381a:	e041      	b.n	80038a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	4a2f      	ldr	r2, [pc, #188]	; (80038dc <USB_SetTurnaroundTime+0x12c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d906      	bls.n	8003832 <USB_SetTurnaroundTime+0x82>
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	4a2e      	ldr	r2, [pc, #184]	; (80038e0 <USB_SetTurnaroundTime+0x130>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d802      	bhi.n	8003832 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800382c:	230b      	movs	r3, #11
 800382e:	617b      	str	r3, [r7, #20]
 8003830:	e036      	b.n	80038a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	4a2a      	ldr	r2, [pc, #168]	; (80038e0 <USB_SetTurnaroundTime+0x130>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d906      	bls.n	8003848 <USB_SetTurnaroundTime+0x98>
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	4a29      	ldr	r2, [pc, #164]	; (80038e4 <USB_SetTurnaroundTime+0x134>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d802      	bhi.n	8003848 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003842:	230a      	movs	r3, #10
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	e02b      	b.n	80038a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	4a26      	ldr	r2, [pc, #152]	; (80038e4 <USB_SetTurnaroundTime+0x134>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d906      	bls.n	800385e <USB_SetTurnaroundTime+0xae>
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	4a25      	ldr	r2, [pc, #148]	; (80038e8 <USB_SetTurnaroundTime+0x138>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d202      	bcs.n	800385e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003858:	2309      	movs	r3, #9
 800385a:	617b      	str	r3, [r7, #20]
 800385c:	e020      	b.n	80038a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	4a21      	ldr	r2, [pc, #132]	; (80038e8 <USB_SetTurnaroundTime+0x138>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d306      	bcc.n	8003874 <USB_SetTurnaroundTime+0xc4>
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	4a20      	ldr	r2, [pc, #128]	; (80038ec <USB_SetTurnaroundTime+0x13c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d802      	bhi.n	8003874 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800386e:	2308      	movs	r3, #8
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	e015      	b.n	80038a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	4a1d      	ldr	r2, [pc, #116]	; (80038ec <USB_SetTurnaroundTime+0x13c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d906      	bls.n	800388a <USB_SetTurnaroundTime+0xda>
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	4a1c      	ldr	r2, [pc, #112]	; (80038f0 <USB_SetTurnaroundTime+0x140>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d202      	bcs.n	800388a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003884:	2307      	movs	r3, #7
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	e00a      	b.n	80038a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800388a:	2306      	movs	r3, #6
 800388c:	617b      	str	r3, [r7, #20]
 800388e:	e007      	b.n	80038a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003890:	79fb      	ldrb	r3, [r7, #7]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d102      	bne.n	800389c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003896:	2309      	movs	r3, #9
 8003898:	617b      	str	r3, [r7, #20]
 800389a:	e001      	b.n	80038a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800389c:	2309      	movs	r3, #9
 800389e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	68db      	ldr	r3, [r3, #12]
 80038a4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	029b      	lsls	r3, r3, #10
 80038b4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80038b8:	431a      	orrs	r2, r3
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	371c      	adds	r7, #28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	00d8acbf 	.word	0x00d8acbf
 80038d0:	00e4e1c0 	.word	0x00e4e1c0
 80038d4:	00f42400 	.word	0x00f42400
 80038d8:	01067380 	.word	0x01067380
 80038dc:	011a499f 	.word	0x011a499f
 80038e0:	01312cff 	.word	0x01312cff
 80038e4:	014ca43f 	.word	0x014ca43f
 80038e8:	016e3600 	.word	0x016e3600
 80038ec:	01a6ab1f 	.word	0x01a6ab1f
 80038f0:	01e84800 	.word	0x01e84800

080038f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b083      	sub	sp, #12
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f043 0201 	orr.w	r2, r3, #1
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	f023 0201 	bic.w	r2, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	370c      	adds	r7, #12
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr

08003938 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	460b      	mov	r3, r1
 8003942:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003944:	2300      	movs	r3, #0
 8003946:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003954:	78fb      	ldrb	r3, [r7, #3]
 8003956:	2b01      	cmp	r3, #1
 8003958:	d115      	bne.n	8003986 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003966:	2001      	movs	r0, #1
 8003968:	f7fd f860 	bl	8000a2c <HAL_Delay>
      ms++;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	3301      	adds	r3, #1
 8003970:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f001 fa45 	bl	8004e02 <USB_GetMode>
 8003978:	4603      	mov	r3, r0
 800397a:	2b01      	cmp	r3, #1
 800397c:	d01e      	beq.n	80039bc <USB_SetCurrentMode+0x84>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2b31      	cmp	r3, #49	; 0x31
 8003982:	d9f0      	bls.n	8003966 <USB_SetCurrentMode+0x2e>
 8003984:	e01a      	b.n	80039bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003986:	78fb      	ldrb	r3, [r7, #3]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d115      	bne.n	80039b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003998:	2001      	movs	r0, #1
 800399a:	f7fd f847 	bl	8000a2c <HAL_Delay>
      ms++;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	3301      	adds	r3, #1
 80039a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f001 fa2c 	bl	8004e02 <USB_GetMode>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <USB_SetCurrentMode+0x84>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2b31      	cmp	r3, #49	; 0x31
 80039b4:	d9f0      	bls.n	8003998 <USB_SetCurrentMode+0x60>
 80039b6:	e001      	b.n	80039bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e005      	b.n	80039c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2b32      	cmp	r3, #50	; 0x32
 80039c0:	d101      	bne.n	80039c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039d0:	b084      	sub	sp, #16
 80039d2:	b580      	push	{r7, lr}
 80039d4:	b086      	sub	sp, #24
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80039de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80039e2:	2300      	movs	r3, #0
 80039e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80039ea:	2300      	movs	r3, #0
 80039ec:	613b      	str	r3, [r7, #16]
 80039ee:	e009      	b.n	8003a04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	3340      	adds	r3, #64	; 0x40
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	4413      	add	r3, r2
 80039fa:	2200      	movs	r2, #0
 80039fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	3301      	adds	r3, #1
 8003a02:	613b      	str	r3, [r7, #16]
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	2b0e      	cmp	r3, #14
 8003a08:	d9f2      	bls.n	80039f0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d11c      	bne.n	8003a4a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a1e:	f043 0302 	orr.w	r3, r3, #2
 8003a22:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a28:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a34:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a40:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	639a      	str	r2, [r3, #56]	; 0x38
 8003a48:	e00b      	b.n	8003a62 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003a68:	461a      	mov	r2, r3
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a74:	4619      	mov	r1, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	680b      	ldr	r3, [r1, #0]
 8003a80:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d10c      	bne.n	8003aa2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d104      	bne.n	8003a98 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003a8e:	2100      	movs	r1, #0
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 f965 	bl	8003d60 <USB_SetDevSpeed>
 8003a96:	e008      	b.n	8003aaa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003a98:	2101      	movs	r1, #1
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f000 f960 	bl	8003d60 <USB_SetDevSpeed>
 8003aa0:	e003      	b.n	8003aaa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003aa2:	2103      	movs	r1, #3
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f000 f95b 	bl	8003d60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003aaa:	2110      	movs	r1, #16
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f8f3 	bl	8003c98 <USB_FlushTxFifo>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003abc:	6878      	ldr	r0, [r7, #4]
 8003abe:	f000 f91f 	bl	8003d00 <USB_FlushRxFifo>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ade:	461a      	mov	r2, r3
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aea:	461a      	mov	r2, r3
 8003aec:	2300      	movs	r3, #0
 8003aee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003af0:	2300      	movs	r3, #0
 8003af2:	613b      	str	r3, [r7, #16]
 8003af4:	e043      	b.n	8003b7e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	015a      	lsls	r2, r3, #5
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4413      	add	r3, r2
 8003afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b0c:	d118      	bne.n	8003b40 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10a      	bne.n	8003b2a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	015a      	lsls	r2, r3, #5
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b20:	461a      	mov	r2, r3
 8003b22:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b26:	6013      	str	r3, [r2, #0]
 8003b28:	e013      	b.n	8003b52 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b36:	461a      	mov	r2, r3
 8003b38:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	e008      	b.n	8003b52 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	015a      	lsls	r2, r3, #5
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	4413      	add	r3, r2
 8003b48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	2300      	movs	r3, #0
 8003b50:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	015a      	lsls	r2, r3, #5
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b5e:	461a      	mov	r2, r3
 8003b60:	2300      	movs	r3, #0
 8003b62:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b70:	461a      	mov	r2, r3
 8003b72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b76:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	613b      	str	r3, [r7, #16]
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d3b7      	bcc.n	8003af6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b86:	2300      	movs	r3, #0
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	e043      	b.n	8003c14 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ba2:	d118      	bne.n	8003bd6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10a      	bne.n	8003bc0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	015a      	lsls	r2, r3, #5
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	4413      	add	r3, r2
 8003bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bbc:	6013      	str	r3, [r2, #0]
 8003bbe:	e013      	b.n	8003be8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bcc:	461a      	mov	r2, r3
 8003bce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	e008      	b.n	8003be8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be2:	461a      	mov	r2, r3
 8003be4:	2300      	movs	r3, #0
 8003be6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	015a      	lsls	r2, r3, #5
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4413      	add	r3, r2
 8003bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	015a      	lsls	r2, r3, #5
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	4413      	add	r3, r2
 8003c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c06:	461a      	mov	r2, r3
 8003c08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c0c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	3301      	adds	r3, #1
 8003c12:	613b      	str	r3, [r7, #16]
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d3b7      	bcc.n	8003b8c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c2e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003c3c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d105      	bne.n	8003c50 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	699b      	ldr	r3, [r3, #24]
 8003c48:	f043 0210 	orr.w	r2, r3, #16
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	699a      	ldr	r2, [r3, #24]
 8003c54:	4b0f      	ldr	r3, [pc, #60]	; (8003c94 <USB_DevInit+0x2c4>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d005      	beq.n	8003c6e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	f043 0208 	orr.w	r2, r3, #8
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d107      	bne.n	8003c84 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c7c:	f043 0304 	orr.w	r3, r3, #4
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3718      	adds	r7, #24
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c90:	b004      	add	sp, #16
 8003c92:	4770      	bx	lr
 8003c94:	803c3800 	.word	0x803c3800

08003c98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4a13      	ldr	r2, [pc, #76]	; (8003cfc <USB_FlushTxFifo+0x64>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d901      	bls.n	8003cb8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e01b      	b.n	8003cf0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	daf2      	bge.n	8003ca6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	019b      	lsls	r3, r3, #6
 8003cc8:	f043 0220 	orr.w	r2, r3, #32
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	4a08      	ldr	r2, [pc, #32]	; (8003cfc <USB_FlushTxFifo+0x64>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d901      	bls.n	8003ce2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e006      	b.n	8003cf0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f003 0320 	and.w	r3, r3, #32
 8003cea:	2b20      	cmp	r3, #32
 8003cec:	d0f0      	beq.n	8003cd0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr
 8003cfc:	00030d40 	.word	0x00030d40

08003d00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b085      	sub	sp, #20
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	4a11      	ldr	r2, [pc, #68]	; (8003d5c <USB_FlushRxFifo+0x5c>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d901      	bls.n	8003d1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e018      	b.n	8003d50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	691b      	ldr	r3, [r3, #16]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	daf2      	bge.n	8003d0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2210      	movs	r2, #16
 8003d2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	3301      	adds	r3, #1
 8003d34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4a08      	ldr	r2, [pc, #32]	; (8003d5c <USB_FlushRxFifo+0x5c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d901      	bls.n	8003d42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e006      	b.n	8003d50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	f003 0310 	and.w	r3, r3, #16
 8003d4a:	2b10      	cmp	r3, #16
 8003d4c:	d0f0      	beq.n	8003d30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3714      	adds	r7, #20
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	00030d40 	.word	0x00030d40

08003d60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	460b      	mov	r3, r1
 8003d6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	78fb      	ldrb	r3, [r7, #3]
 8003d7a:	68f9      	ldr	r1, [r7, #12]
 8003d7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d80:	4313      	orrs	r3, r2
 8003d82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr

08003d92 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b087      	sub	sp, #28
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f003 0306 	and.w	r3, r3, #6
 8003daa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d102      	bne.n	8003db8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003db2:	2300      	movs	r3, #0
 8003db4:	75fb      	strb	r3, [r7, #23]
 8003db6:	e00a      	b.n	8003dce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d002      	beq.n	8003dc4 <USB_GetDevSpeed+0x32>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2b06      	cmp	r3, #6
 8003dc2:	d102      	bne.n	8003dca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	75fb      	strb	r3, [r7, #23]
 8003dc8:	e001      	b.n	8003dce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003dca:	230f      	movs	r3, #15
 8003dcc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003dce:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	371c      	adds	r7, #28
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	785b      	ldrb	r3, [r3, #1]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d13a      	bne.n	8003e6e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dfe:	69da      	ldr	r2, [r3, #28]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	f003 030f 	and.w	r3, r3, #15
 8003e08:	2101      	movs	r1, #1
 8003e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	68f9      	ldr	r1, [r7, #12]
 8003e12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e16:	4313      	orrs	r3, r2
 8003e18:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	015a      	lsls	r2, r3, #5
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d155      	bne.n	8003edc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	015a      	lsls	r2, r3, #5
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4413      	add	r3, r2
 8003e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	791b      	ldrb	r3, [r3, #4]
 8003e4a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e4c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	059b      	lsls	r3, r3, #22
 8003e52:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e54:	4313      	orrs	r3, r2
 8003e56:	68ba      	ldr	r2, [r7, #8]
 8003e58:	0151      	lsls	r1, r2, #5
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	440a      	add	r2, r1
 8003e5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e6a:	6013      	str	r3, [r2, #0]
 8003e6c:	e036      	b.n	8003edc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e74:	69da      	ldr	r2, [r3, #28]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	f003 030f 	and.w	r3, r3, #15
 8003e7e:	2101      	movs	r1, #1
 8003e80:	fa01 f303 	lsl.w	r3, r1, r3
 8003e84:	041b      	lsls	r3, r3, #16
 8003e86:	68f9      	ldr	r1, [r7, #12]
 8003e88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d11a      	bne.n	8003edc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	791b      	ldrb	r3, [r3, #4]
 8003ec0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ec2:	430b      	orrs	r3, r1
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	0151      	lsls	r1, r2, #5
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	440a      	add	r2, r1
 8003ece:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ed2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eda:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003edc:	2300      	movs	r3, #0
}
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3714      	adds	r7, #20
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
	...

08003eec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	785b      	ldrb	r3, [r3, #1]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d161      	bne.n	8003fcc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f1e:	d11f      	bne.n	8003f60 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	015a      	lsls	r2, r3, #5
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4413      	add	r3, r2
 8003f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	0151      	lsls	r1, r2, #5
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	440a      	add	r2, r1
 8003f36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f3e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	015a      	lsls	r2, r3, #5
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4413      	add	r3, r2
 8003f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	0151      	lsls	r1, r2, #5
 8003f52:	68fa      	ldr	r2, [r7, #12]
 8003f54:	440a      	add	r2, r1
 8003f56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	f003 030f 	and.w	r3, r3, #15
 8003f70:	2101      	movs	r1, #1
 8003f72:	fa01 f303 	lsl.w	r3, r1, r3
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	68f9      	ldr	r1, [r7, #12]
 8003f7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f80:	4013      	ands	r3, r2
 8003f82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f8a:	69da      	ldr	r2, [r3, #28]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	f003 030f 	and.w	r3, r3, #15
 8003f94:	2101      	movs	r1, #1
 8003f96:	fa01 f303 	lsl.w	r3, r1, r3
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	43db      	mvns	r3, r3
 8003f9e:	68f9      	ldr	r1, [r7, #12]
 8003fa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	015a      	lsls	r2, r3, #5
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	0159      	lsls	r1, r3, #5
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	440b      	add	r3, r1
 8003fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	4b35      	ldr	r3, [pc, #212]	; (800409c <USB_DeactivateEndpoint+0x1b0>)
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	600b      	str	r3, [r1, #0]
 8003fca:	e060      	b.n	800408e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	015a      	lsls	r2, r3, #5
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fe2:	d11f      	bne.n	8004024 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	015a      	lsls	r2, r3, #5
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68ba      	ldr	r2, [r7, #8]
 8003ff4:	0151      	lsls	r1, r2, #5
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	440a      	add	r2, r1
 8003ffa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ffe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004002:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4413      	add	r3, r2
 800400c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68ba      	ldr	r2, [r7, #8]
 8004014:	0151      	lsls	r1, r2, #5
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	440a      	add	r2, r1
 800401a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800401e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004022:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800402a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	f003 030f 	and.w	r3, r3, #15
 8004034:	2101      	movs	r1, #1
 8004036:	fa01 f303 	lsl.w	r3, r1, r3
 800403a:	041b      	lsls	r3, r3, #16
 800403c:	43db      	mvns	r3, r3
 800403e:	68f9      	ldr	r1, [r7, #12]
 8004040:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004044:	4013      	ands	r3, r2
 8004046:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404e:	69da      	ldr	r2, [r3, #28]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	f003 030f 	and.w	r3, r3, #15
 8004058:	2101      	movs	r1, #1
 800405a:	fa01 f303 	lsl.w	r3, r1, r3
 800405e:	041b      	lsls	r3, r3, #16
 8004060:	43db      	mvns	r3, r3
 8004062:	68f9      	ldr	r1, [r7, #12]
 8004064:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004068:	4013      	ands	r3, r2
 800406a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4413      	add	r3, r2
 8004074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	0159      	lsls	r1, r3, #5
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	440b      	add	r3, r1
 8004082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004086:	4619      	mov	r1, r3
 8004088:	4b05      	ldr	r3, [pc, #20]	; (80040a0 <USB_DeactivateEndpoint+0x1b4>)
 800408a:	4013      	ands	r3, r2
 800408c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	ec337800 	.word	0xec337800
 80040a0:	eff37800 	.word	0xeff37800

080040a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b08a      	sub	sp, #40	; 0x28
 80040a8:	af02      	add	r7, sp, #8
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	4613      	mov	r3, r2
 80040b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	785b      	ldrb	r3, [r3, #1]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	f040 815c 	bne.w	800437e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d132      	bne.n	8004134 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	015a      	lsls	r2, r3, #5
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	4413      	add	r3, r2
 80040d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	0151      	lsls	r1, r2, #5
 80040e0:	69fa      	ldr	r2, [r7, #28]
 80040e2:	440a      	add	r2, r1
 80040e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	015a      	lsls	r2, r3, #5
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	4413      	add	r3, r2
 80040fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	0151      	lsls	r1, r2, #5
 8004104:	69fa      	ldr	r2, [r7, #28]
 8004106:	440a      	add	r2, r1
 8004108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800410c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004110:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	0151      	lsls	r1, r2, #5
 8004124:	69fa      	ldr	r2, [r7, #28]
 8004126:	440a      	add	r2, r1
 8004128:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800412c:	0cdb      	lsrs	r3, r3, #19
 800412e:	04db      	lsls	r3, r3, #19
 8004130:	6113      	str	r3, [r2, #16]
 8004132:	e074      	b.n	800421e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004134:	69bb      	ldr	r3, [r7, #24]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	4413      	add	r3, r2
 800413c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	69ba      	ldr	r2, [r7, #24]
 8004144:	0151      	lsls	r1, r2, #5
 8004146:	69fa      	ldr	r2, [r7, #28]
 8004148:	440a      	add	r2, r1
 800414a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800414e:	0cdb      	lsrs	r3, r3, #19
 8004150:	04db      	lsls	r3, r3, #19
 8004152:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	015a      	lsls	r2, r3, #5
 8004158:	69fb      	ldr	r3, [r7, #28]
 800415a:	4413      	add	r3, r2
 800415c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	0151      	lsls	r1, r2, #5
 8004166:	69fa      	ldr	r2, [r7, #28]
 8004168:	440a      	add	r2, r1
 800416a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800416e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004172:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004176:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	015a      	lsls	r2, r3, #5
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	4413      	add	r3, r2
 8004180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004184:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	6999      	ldr	r1, [r3, #24]
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	68db      	ldr	r3, [r3, #12]
 800418e:	440b      	add	r3, r1
 8004190:	1e59      	subs	r1, r3, #1
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	fbb1 f3f3 	udiv	r3, r1, r3
 800419a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800419c:	4b9d      	ldr	r3, [pc, #628]	; (8004414 <USB_EPStartXfer+0x370>)
 800419e:	400b      	ands	r3, r1
 80041a0:	69b9      	ldr	r1, [r7, #24]
 80041a2:	0148      	lsls	r0, r1, #5
 80041a4:	69f9      	ldr	r1, [r7, #28]
 80041a6:	4401      	add	r1, r0
 80041a8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80041ac:	4313      	orrs	r3, r2
 80041ae:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041bc:	691a      	ldr	r2, [r3, #16]
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041c6:	69b9      	ldr	r1, [r7, #24]
 80041c8:	0148      	lsls	r0, r1, #5
 80041ca:	69f9      	ldr	r1, [r7, #28]
 80041cc:	4401      	add	r1, r0
 80041ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80041d2:	4313      	orrs	r3, r2
 80041d4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	791b      	ldrb	r3, [r3, #4]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d11f      	bne.n	800421e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	69ba      	ldr	r2, [r7, #24]
 80041ee:	0151      	lsls	r1, r2, #5
 80041f0:	69fa      	ldr	r2, [r7, #28]
 80041f2:	440a      	add	r2, r1
 80041f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041f8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80041fc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	015a      	lsls	r2, r3, #5
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	4413      	add	r3, r2
 8004206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	0151      	lsls	r1, r2, #5
 8004210:	69fa      	ldr	r2, [r7, #28]
 8004212:	440a      	add	r2, r1
 8004214:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004218:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800421c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800421e:	79fb      	ldrb	r3, [r7, #7]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d14b      	bne.n	80042bc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d009      	beq.n	8004240 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	015a      	lsls	r2, r3, #5
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	4413      	add	r3, r2
 8004234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004238:	461a      	mov	r2, r3
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	791b      	ldrb	r3, [r3, #4]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d128      	bne.n	800429a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004254:	2b00      	cmp	r3, #0
 8004256:	d110      	bne.n	800427a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	4413      	add	r3, r2
 8004260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	0151      	lsls	r1, r2, #5
 800426a:	69fa      	ldr	r2, [r7, #28]
 800426c:	440a      	add	r2, r1
 800426e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004272:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004276:	6013      	str	r3, [r2, #0]
 8004278:	e00f      	b.n	800429a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	4413      	add	r3, r2
 8004282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	0151      	lsls	r1, r2, #5
 800428c:	69fa      	ldr	r2, [r7, #28]
 800428e:	440a      	add	r2, r1
 8004290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004298:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	015a      	lsls	r2, r3, #5
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	4413      	add	r3, r2
 80042a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	0151      	lsls	r1, r2, #5
 80042ac:	69fa      	ldr	r2, [r7, #28]
 80042ae:	440a      	add	r2, r1
 80042b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	e133      	b.n	8004524 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	0151      	lsls	r1, r2, #5
 80042ce:	69fa      	ldr	r2, [r7, #28]
 80042d0:	440a      	add	r2, r1
 80042d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80042da:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	791b      	ldrb	r3, [r3, #4]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d015      	beq.n	8004310 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 811b 	beq.w	8004524 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	2101      	movs	r1, #1
 8004300:	fa01 f303 	lsl.w	r3, r1, r3
 8004304:	69f9      	ldr	r1, [r7, #28]
 8004306:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800430a:	4313      	orrs	r3, r2
 800430c:	634b      	str	r3, [r1, #52]	; 0x34
 800430e:	e109      	b.n	8004524 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431c:	2b00      	cmp	r3, #0
 800431e:	d110      	bne.n	8004342 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	4413      	add	r3, r2
 8004328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	69ba      	ldr	r2, [r7, #24]
 8004330:	0151      	lsls	r1, r2, #5
 8004332:	69fa      	ldr	r2, [r7, #28]
 8004334:	440a      	add	r2, r1
 8004336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800433a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800433e:	6013      	str	r3, [r2, #0]
 8004340:	e00f      	b.n	8004362 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	015a      	lsls	r2, r3, #5
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	4413      	add	r3, r2
 800434a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	0151      	lsls	r1, r2, #5
 8004354:	69fa      	ldr	r2, [r7, #28]
 8004356:	440a      	add	r2, r1
 8004358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800435c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004360:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	6919      	ldr	r1, [r3, #16]
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	781a      	ldrb	r2, [r3, #0]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	b298      	uxth	r0, r3
 8004370:	79fb      	ldrb	r3, [r7, #7]
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	4603      	mov	r3, r0
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 fade 	bl	8004938 <USB_WritePacket>
 800437c:	e0d2      	b.n	8004524 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	0151      	lsls	r1, r2, #5
 8004390:	69fa      	ldr	r2, [r7, #28]
 8004392:	440a      	add	r2, r1
 8004394:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004398:	0cdb      	lsrs	r3, r3, #19
 800439a:	04db      	lsls	r3, r3, #19
 800439c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	69ba      	ldr	r2, [r7, #24]
 80043ae:	0151      	lsls	r1, r2, #5
 80043b0:	69fa      	ldr	r2, [r7, #28]
 80043b2:	440a      	add	r2, r1
 80043b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043c0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d126      	bne.n	8004418 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	015a      	lsls	r2, r3, #5
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	4413      	add	r3, r2
 80043d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d6:	691a      	ldr	r2, [r3, #16]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043e0:	69b9      	ldr	r1, [r7, #24]
 80043e2:	0148      	lsls	r0, r1, #5
 80043e4:	69f9      	ldr	r1, [r7, #28]
 80043e6:	4401      	add	r1, r0
 80043e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043ec:	4313      	orrs	r3, r2
 80043ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	015a      	lsls	r2, r3, #5
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	4413      	add	r3, r2
 80043f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	0151      	lsls	r1, r2, #5
 8004402:	69fa      	ldr	r2, [r7, #28]
 8004404:	440a      	add	r2, r1
 8004406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800440a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800440e:	6113      	str	r3, [r2, #16]
 8004410:	e03a      	b.n	8004488 <USB_EPStartXfer+0x3e4>
 8004412:	bf00      	nop
 8004414:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	699a      	ldr	r2, [r3, #24]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	4413      	add	r3, r2
 8004422:	1e5a      	subs	r2, r3, #1
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	fbb2 f3f3 	udiv	r3, r2, r3
 800442c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	8afa      	ldrh	r2, [r7, #22]
 8004434:	fb03 f202 	mul.w	r2, r3, r2
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	015a      	lsls	r2, r3, #5
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	4413      	add	r3, r2
 8004444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004448:	691a      	ldr	r2, [r3, #16]
 800444a:	8afb      	ldrh	r3, [r7, #22]
 800444c:	04d9      	lsls	r1, r3, #19
 800444e:	4b38      	ldr	r3, [pc, #224]	; (8004530 <USB_EPStartXfer+0x48c>)
 8004450:	400b      	ands	r3, r1
 8004452:	69b9      	ldr	r1, [r7, #24]
 8004454:	0148      	lsls	r0, r1, #5
 8004456:	69f9      	ldr	r1, [r7, #28]
 8004458:	4401      	add	r1, r0
 800445a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800445e:	4313      	orrs	r3, r2
 8004460:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004462:	69bb      	ldr	r3, [r7, #24]
 8004464:	015a      	lsls	r2, r3, #5
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	4413      	add	r3, r2
 800446a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800446e:	691a      	ldr	r2, [r3, #16]
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004478:	69b9      	ldr	r1, [r7, #24]
 800447a:	0148      	lsls	r0, r1, #5
 800447c:	69f9      	ldr	r1, [r7, #28]
 800447e:	4401      	add	r1, r0
 8004480:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004484:	4313      	orrs	r3, r2
 8004486:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004488:	79fb      	ldrb	r3, [r7, #7]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d10d      	bne.n	80044aa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d009      	beq.n	80044aa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	6919      	ldr	r1, [r3, #16]
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	015a      	lsls	r2, r3, #5
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	4413      	add	r3, r2
 80044a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a6:	460a      	mov	r2, r1
 80044a8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	791b      	ldrb	r3, [r3, #4]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d128      	bne.n	8004504 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d110      	bne.n	80044e4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	69ba      	ldr	r2, [r7, #24]
 80044d2:	0151      	lsls	r1, r2, #5
 80044d4:	69fa      	ldr	r2, [r7, #28]
 80044d6:	440a      	add	r2, r1
 80044d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	e00f      	b.n	8004504 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	015a      	lsls	r2, r3, #5
 80044e8:	69fb      	ldr	r3, [r7, #28]
 80044ea:	4413      	add	r3, r2
 80044ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	69ba      	ldr	r2, [r7, #24]
 80044f4:	0151      	lsls	r1, r2, #5
 80044f6:	69fa      	ldr	r2, [r7, #28]
 80044f8:	440a      	add	r2, r1
 80044fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004502:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	4413      	add	r3, r2
 800450c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	0151      	lsls	r1, r2, #5
 8004516:	69fa      	ldr	r2, [r7, #28]
 8004518:	440a      	add	r2, r1
 800451a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800451e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004522:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3720      	adds	r7, #32
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	1ff80000 	.word	0x1ff80000

08004534 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	4613      	mov	r3, r2
 8004540:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	785b      	ldrb	r3, [r3, #1]
 8004550:	2b01      	cmp	r3, #1
 8004552:	f040 80ce 	bne.w	80046f2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d132      	bne.n	80045c4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	015a      	lsls	r2, r3, #5
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	4413      	add	r3, r2
 8004566:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	693a      	ldr	r2, [r7, #16]
 800456e:	0151      	lsls	r1, r2, #5
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	440a      	add	r2, r1
 8004574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004578:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800457c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004580:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	015a      	lsls	r2, r3, #5
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	4413      	add	r3, r2
 800458a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	0151      	lsls	r1, r2, #5
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	440a      	add	r2, r1
 8004598:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800459c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045a0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	0151      	lsls	r1, r2, #5
 80045b4:	697a      	ldr	r2, [r7, #20]
 80045b6:	440a      	add	r2, r1
 80045b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045bc:	0cdb      	lsrs	r3, r3, #19
 80045be:	04db      	lsls	r3, r3, #19
 80045c0:	6113      	str	r3, [r2, #16]
 80045c2:	e04e      	b.n	8004662 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	015a      	lsls	r2, r3, #5
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	4413      	add	r3, r2
 80045cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	0151      	lsls	r1, r2, #5
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	440a      	add	r2, r1
 80045da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045de:	0cdb      	lsrs	r3, r3, #19
 80045e0:	04db      	lsls	r3, r3, #19
 80045e2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	015a      	lsls	r2, r3, #5
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	4413      	add	r3, r2
 80045ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	0151      	lsls	r1, r2, #5
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	440a      	add	r2, r1
 80045fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045fe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004602:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004606:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	699a      	ldr	r2, [r3, #24]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	429a      	cmp	r2, r3
 8004612:	d903      	bls.n	800461c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	68da      	ldr	r2, [r3, #12]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	0151      	lsls	r1, r2, #5
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	440a      	add	r2, r1
 8004632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004636:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800463a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	4413      	add	r3, r2
 8004644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004648:	691a      	ldr	r2, [r3, #16]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004652:	6939      	ldr	r1, [r7, #16]
 8004654:	0148      	lsls	r0, r1, #5
 8004656:	6979      	ldr	r1, [r7, #20]
 8004658:	4401      	add	r1, r0
 800465a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800465e:	4313      	orrs	r3, r2
 8004660:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004662:	79fb      	ldrb	r3, [r7, #7]
 8004664:	2b01      	cmp	r3, #1
 8004666:	d11e      	bne.n	80046a6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d009      	beq.n	8004684 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	4413      	add	r3, r2
 8004678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800467c:	461a      	mov	r2, r3
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	015a      	lsls	r2, r3, #5
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	4413      	add	r3, r2
 800468c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	0151      	lsls	r1, r2, #5
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	440a      	add	r2, r1
 800469a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800469e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046a2:	6013      	str	r3, [r2, #0]
 80046a4:	e097      	b.n	80047d6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	015a      	lsls	r2, r3, #5
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	4413      	add	r3, r2
 80046ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	0151      	lsls	r1, r2, #5
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	440a      	add	r2, r1
 80046bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046c4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 8083 	beq.w	80047d6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	f003 030f 	and.w	r3, r3, #15
 80046e0:	2101      	movs	r1, #1
 80046e2:	fa01 f303 	lsl.w	r3, r1, r3
 80046e6:	6979      	ldr	r1, [r7, #20]
 80046e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046ec:	4313      	orrs	r3, r2
 80046ee:	634b      	str	r3, [r1, #52]	; 0x34
 80046f0:	e071      	b.n	80047d6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	0151      	lsls	r1, r2, #5
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	440a      	add	r2, r1
 8004708:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800470c:	0cdb      	lsrs	r3, r3, #19
 800470e:	04db      	lsls	r3, r3, #19
 8004710:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	015a      	lsls	r2, r3, #5
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	4413      	add	r3, r2
 800471a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	0151      	lsls	r1, r2, #5
 8004724:	697a      	ldr	r2, [r7, #20]
 8004726:	440a      	add	r2, r1
 8004728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800472c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004730:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004734:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	699b      	ldr	r3, [r3, #24]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d003      	beq.n	8004746 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	68da      	ldr	r2, [r3, #12]
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	4413      	add	r3, r2
 8004756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800475a:	691b      	ldr	r3, [r3, #16]
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	0151      	lsls	r1, r2, #5
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	440a      	add	r2, r1
 8004764:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004768:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800476c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	015a      	lsls	r2, r3, #5
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	4413      	add	r3, r2
 8004776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	69db      	ldr	r3, [r3, #28]
 8004780:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004784:	6939      	ldr	r1, [r7, #16]
 8004786:	0148      	lsls	r0, r1, #5
 8004788:	6979      	ldr	r1, [r7, #20]
 800478a:	4401      	add	r1, r0
 800478c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004790:	4313      	orrs	r3, r2
 8004792:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004794:	79fb      	ldrb	r3, [r7, #7]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d10d      	bne.n	80047b6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d009      	beq.n	80047b6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	6919      	ldr	r1, [r3, #16]
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	015a      	lsls	r2, r3, #5
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	4413      	add	r3, r2
 80047ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b2:	460a      	mov	r2, r1
 80047b4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	015a      	lsls	r2, r3, #5
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	4413      	add	r3, r2
 80047be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	0151      	lsls	r1, r2, #5
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	440a      	add	r2, r1
 80047cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	371c      	adds	r7, #28
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80047f2:	2300      	movs	r3, #0
 80047f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	785b      	ldrb	r3, [r3, #1]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d14a      	bne.n	8004898 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	4413      	add	r3, r2
 800480c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004816:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800481a:	f040 8086 	bne.w	800492a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	4413      	add	r3, r2
 8004828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	7812      	ldrb	r2, [r2, #0]
 8004832:	0151      	lsls	r1, r2, #5
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	440a      	add	r2, r1
 8004838:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800483c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004840:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	015a      	lsls	r2, r3, #5
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	4413      	add	r3, r2
 800484c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	683a      	ldr	r2, [r7, #0]
 8004854:	7812      	ldrb	r2, [r2, #0]
 8004856:	0151      	lsls	r1, r2, #5
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	440a      	add	r2, r1
 800485c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004860:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004864:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	3301      	adds	r3, #1
 800486a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004872:	4293      	cmp	r3, r2
 8004874:	d902      	bls.n	800487c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	75fb      	strb	r3, [r7, #23]
          break;
 800487a:	e056      	b.n	800492a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	4413      	add	r3, r2
 8004886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004890:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004894:	d0e7      	beq.n	8004866 <USB_EPStopXfer+0x82>
 8004896:	e048      	b.n	800492a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	015a      	lsls	r2, r3, #5
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048b0:	d13b      	bne.n	800492a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	7812      	ldrb	r2, [r2, #0]
 80048c6:	0151      	lsls	r1, r2, #5
 80048c8:	693a      	ldr	r2, [r7, #16]
 80048ca:	440a      	add	r2, r1
 80048cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	7812      	ldrb	r2, [r2, #0]
 80048ea:	0151      	lsls	r1, r2, #5
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	440a      	add	r2, r1
 80048f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80048f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	3301      	adds	r3, #1
 80048fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f242 7210 	movw	r2, #10000	; 0x2710
 8004906:	4293      	cmp	r3, r2
 8004908:	d902      	bls.n	8004910 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	75fb      	strb	r3, [r7, #23]
          break;
 800490e:	e00c      	b.n	800492a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	015a      	lsls	r2, r3, #5
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	4413      	add	r3, r2
 800491a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004924:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004928:	d0e7      	beq.n	80048fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800492a:	7dfb      	ldrb	r3, [r7, #23]
}
 800492c:	4618      	mov	r0, r3
 800492e:	371c      	adds	r7, #28
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004938:	b480      	push	{r7}
 800493a:	b089      	sub	sp, #36	; 0x24
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	4611      	mov	r1, r2
 8004944:	461a      	mov	r2, r3
 8004946:	460b      	mov	r3, r1
 8004948:	71fb      	strb	r3, [r7, #7]
 800494a:	4613      	mov	r3, r2
 800494c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004956:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800495a:	2b00      	cmp	r3, #0
 800495c:	d123      	bne.n	80049a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800495e:	88bb      	ldrh	r3, [r7, #4]
 8004960:	3303      	adds	r3, #3
 8004962:	089b      	lsrs	r3, r3, #2
 8004964:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004966:	2300      	movs	r3, #0
 8004968:	61bb      	str	r3, [r7, #24]
 800496a:	e018      	b.n	800499e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800496c:	79fb      	ldrb	r3, [r7, #7]
 800496e:	031a      	lsls	r2, r3, #12
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	4413      	add	r3, r2
 8004974:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004978:	461a      	mov	r2, r3
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	3301      	adds	r3, #1
 8004984:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	3301      	adds	r3, #1
 800498a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	3301      	adds	r3, #1
 8004990:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	3301      	adds	r3, #1
 8004996:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	3301      	adds	r3, #1
 800499c:	61bb      	str	r3, [r7, #24]
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d3e2      	bcc.n	800496c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3724      	adds	r7, #36	; 0x24
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b08b      	sub	sp, #44	; 0x2c
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	4613      	mov	r3, r2
 80049c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80049ca:	88fb      	ldrh	r3, [r7, #6]
 80049cc:	089b      	lsrs	r3, r3, #2
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80049d2:	88fb      	ldrh	r3, [r7, #6]
 80049d4:	f003 0303 	and.w	r3, r3, #3
 80049d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80049da:	2300      	movs	r3, #0
 80049dc:	623b      	str	r3, [r7, #32]
 80049de:	e014      	b.n	8004a0a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	3301      	adds	r3, #1
 80049f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	3301      	adds	r3, #1
 80049f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	3301      	adds	r3, #1
 80049fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	3301      	adds	r3, #1
 8004a02:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004a04:	6a3b      	ldr	r3, [r7, #32]
 8004a06:	3301      	adds	r3, #1
 8004a08:	623b      	str	r3, [r7, #32]
 8004a0a:	6a3a      	ldr	r2, [r7, #32]
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d3e6      	bcc.n	80049e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004a12:	8bfb      	ldrh	r3, [r7, #30]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d01e      	beq.n	8004a56 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a22:	461a      	mov	r2, r3
 8004a24:	f107 0310 	add.w	r3, r7, #16
 8004a28:	6812      	ldr	r2, [r2, #0]
 8004a2a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	6a3b      	ldr	r3, [r7, #32]
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	fa22 f303 	lsr.w	r3, r2, r3
 8004a38:	b2da      	uxtb	r2, r3
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	701a      	strb	r2, [r3, #0]
      i++;
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	3301      	adds	r3, #1
 8004a42:	623b      	str	r3, [r7, #32]
      pDest++;
 8004a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a46:	3301      	adds	r3, #1
 8004a48:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004a4a:	8bfb      	ldrh	r3, [r7, #30]
 8004a4c:	3b01      	subs	r3, #1
 8004a4e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004a50:	8bfb      	ldrh	r3, [r7, #30]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1ea      	bne.n	8004a2c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	372c      	adds	r7, #44	; 0x2c
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b085      	sub	sp, #20
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	785b      	ldrb	r3, [r3, #1]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d12c      	bne.n	8004ada <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	015a      	lsls	r2, r3, #5
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4413      	add	r3, r2
 8004a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	db12      	blt.n	8004ab8 <USB_EPSetStall+0x54>
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00f      	beq.n	8004ab8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	015a      	lsls	r2, r3, #5
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	0151      	lsls	r1, r2, #5
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	440a      	add	r2, r1
 8004aae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ab2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ab6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	015a      	lsls	r2, r3, #5
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4413      	add	r3, r2
 8004ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68ba      	ldr	r2, [r7, #8]
 8004ac8:	0151      	lsls	r1, r2, #5
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	440a      	add	r2, r1
 8004ace:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ad2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ad6:	6013      	str	r3, [r2, #0]
 8004ad8:	e02b      	b.n	8004b32 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	015a      	lsls	r2, r3, #5
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	db12      	blt.n	8004b12 <USB_EPSetStall+0xae>
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d00f      	beq.n	8004b12 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68ba      	ldr	r2, [r7, #8]
 8004b02:	0151      	lsls	r1, r2, #5
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	440a      	add	r2, r1
 8004b08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b10:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	015a      	lsls	r2, r3, #5
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	4413      	add	r3, r2
 8004b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	0151      	lsls	r1, r2, #5
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	440a      	add	r2, r1
 8004b28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b30:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	785b      	ldrb	r3, [r3, #1]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d128      	bne.n	8004bae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	0151      	lsls	r1, r2, #5
 8004b6e:	68fa      	ldr	r2, [r7, #12]
 8004b70:	440a      	add	r2, r1
 8004b72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b7a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	791b      	ldrb	r3, [r3, #4]
 8004b80:	2b03      	cmp	r3, #3
 8004b82:	d003      	beq.n	8004b8c <USB_EPClearStall+0x4c>
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	791b      	ldrb	r3, [r3, #4]
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d138      	bne.n	8004bfe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	015a      	lsls	r2, r3, #5
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	4413      	add	r3, r2
 8004b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68ba      	ldr	r2, [r7, #8]
 8004b9c:	0151      	lsls	r1, r2, #5
 8004b9e:	68fa      	ldr	r2, [r7, #12]
 8004ba0:	440a      	add	r2, r1
 8004ba2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ba6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004baa:	6013      	str	r3, [r2, #0]
 8004bac:	e027      	b.n	8004bfe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	015a      	lsls	r2, r3, #5
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	0151      	lsls	r1, r2, #5
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	440a      	add	r2, r1
 8004bc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004bcc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	791b      	ldrb	r3, [r3, #4]
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	d003      	beq.n	8004bde <USB_EPClearStall+0x9e>
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	791b      	ldrb	r3, [r3, #4]
 8004bda:	2b02      	cmp	r3, #2
 8004bdc:	d10f      	bne.n	8004bfe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	015a      	lsls	r2, r3, #5
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4413      	add	r3, r2
 8004be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	0151      	lsls	r1, r2, #5
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	440a      	add	r2, r1
 8004bf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bfc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3714      	adds	r7, #20
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b085      	sub	sp, #20
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	460b      	mov	r3, r1
 8004c16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c2a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004c2e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	78fb      	ldrb	r3, [r7, #3]
 8004c3a:	011b      	lsls	r3, r3, #4
 8004c3c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004c40:	68f9      	ldr	r1, [r7, #12]
 8004c42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c46:	4313      	orrs	r3, r2
 8004c48:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3714      	adds	r7, #20
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr

08004c58 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c72:	f023 0303 	bic.w	r3, r3, #3
 8004c76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c86:	f023 0302 	bic.w	r3, r3, #2
 8004c8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3714      	adds	r7, #20
 8004c92:	46bd      	mov	sp, r7
 8004c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c98:	4770      	bx	lr

08004c9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c9a:	b480      	push	{r7}
 8004c9c:	b085      	sub	sp, #20
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004cb4:	f023 0303 	bic.w	r3, r3, #3
 8004cb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cc8:	f043 0302 	orr.w	r3, r3, #2
 8004ccc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b085      	sub	sp, #20
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr

08004d02 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d02:	b480      	push	{r7}
 8004d04:	b085      	sub	sp, #20
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	4013      	ands	r3, r2
 8004d24:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	0c1b      	lsrs	r3, r3, #16
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3714      	adds	r7, #20
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d36:	b480      	push	{r7}
 8004d38:	b085      	sub	sp, #20
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d48:	699b      	ldr	r3, [r3, #24]
 8004d4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	4013      	ands	r3, r2
 8004d58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	b29b      	uxth	r3, r3
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr

08004d6a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	b085      	sub	sp, #20
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
 8004d72:	460b      	mov	r3, r1
 8004d74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004d7a:	78fb      	ldrb	r3, [r7, #3]
 8004d7c:	015a      	lsls	r2, r3, #5
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	4413      	add	r3, r2
 8004d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	4013      	ands	r3, r2
 8004d96:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d98:	68bb      	ldr	r3, [r7, #8]
}
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	3714      	adds	r7, #20
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr

08004da6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004da6:	b480      	push	{r7}
 8004da8:	b087      	sub	sp, #28
 8004daa:	af00      	add	r7, sp, #0
 8004dac:	6078      	str	r0, [r7, #4]
 8004dae:	460b      	mov	r3, r1
 8004db0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004dca:	78fb      	ldrb	r3, [r7, #3]
 8004dcc:	f003 030f 	and.w	r3, r3, #15
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8004dd6:	01db      	lsls	r3, r3, #7
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004de0:	78fb      	ldrb	r3, [r7, #3]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	4013      	ands	r3, r2
 8004df2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004df4:	68bb      	ldr	r3, [r7, #8]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	371c      	adds	r7, #28
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004e02:	b480      	push	{r7}
 8004e04:	b083      	sub	sp, #12
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b085      	sub	sp, #20
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e38:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004e3c:	f023 0307 	bic.w	r3, r3, #7
 8004e40:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e54:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3714      	adds	r7, #20
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b087      	sub	sp, #28
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	607a      	str	r2, [r7, #4]
 8004e70:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	333c      	adds	r3, #60	; 0x3c
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	4a26      	ldr	r2, [pc, #152]	; (8004f1c <USB_EP0_OutStart+0xb8>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d90a      	bls.n	8004e9e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e98:	d101      	bne.n	8004e9e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	e037      	b.n	8004f0e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004ebc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ecc:	f043 0318 	orr.w	r3, r3, #24
 8004ed0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ee0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004ee4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004ee6:	7afb      	ldrb	r3, [r7, #11]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d10f      	bne.n	8004f0c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f06:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004f0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	371c      	adds	r7, #28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	4f54300a 	.word	0x4f54300a

08004f20 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	4a13      	ldr	r2, [pc, #76]	; (8004f84 <USB_CoreReset+0x64>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d901      	bls.n	8004f3e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004f3a:	2303      	movs	r3, #3
 8004f3c:	e01b      	b.n	8004f76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	daf2      	bge.n	8004f2c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004f46:	2300      	movs	r3, #0
 8004f48:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	f043 0201 	orr.w	r2, r3, #1
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	3301      	adds	r3, #1
 8004f5a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4a09      	ldr	r2, [pc, #36]	; (8004f84 <USB_CoreReset+0x64>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d901      	bls.n	8004f68 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004f64:	2303      	movs	r3, #3
 8004f66:	e006      	b.n	8004f76 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	f003 0301 	and.w	r3, r3, #1
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d0f0      	beq.n	8004f56 <USB_CoreReset+0x36>

  return HAL_OK;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3714      	adds	r7, #20
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	00030d40 	.word	0x00030d40

08004f88 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	460b      	mov	r3, r1
 8004f92:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004f94:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004f98:	f002 fcbc 	bl	8007914 <USBD_static_malloc>
 8004f9c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d109      	bne.n	8004fb8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	32b0      	adds	r2, #176	; 0xb0
 8004fae:	2100      	movs	r1, #0
 8004fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e0d4      	b.n	8005162 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004fb8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	68f8      	ldr	r0, [r7, #12]
 8004fc0:	f002 fd28 	bl	8007a14 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	32b0      	adds	r2, #176	; 0xb0
 8004fce:	68f9      	ldr	r1, [r7, #12]
 8004fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	32b0      	adds	r2, #176	; 0xb0
 8004fde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	7c1b      	ldrb	r3, [r3, #16]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d138      	bne.n	8005062 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004ff0:	4b5e      	ldr	r3, [pc, #376]	; (800516c <USBD_CDC_Init+0x1e4>)
 8004ff2:	7819      	ldrb	r1, [r3, #0]
 8004ff4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f002 fb67 	bl	80076ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005000:	4b5a      	ldr	r3, [pc, #360]	; (800516c <USBD_CDC_Init+0x1e4>)
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	f003 020f 	and.w	r2, r3, #15
 8005008:	6879      	ldr	r1, [r7, #4]
 800500a:	4613      	mov	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	440b      	add	r3, r1
 8005014:	3324      	adds	r3, #36	; 0x24
 8005016:	2201      	movs	r2, #1
 8005018:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800501a:	4b55      	ldr	r3, [pc, #340]	; (8005170 <USBD_CDC_Init+0x1e8>)
 800501c:	7819      	ldrb	r1, [r3, #0]
 800501e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005022:	2202      	movs	r2, #2
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f002 fb52 	bl	80076ce <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800502a:	4b51      	ldr	r3, [pc, #324]	; (8005170 <USBD_CDC_Init+0x1e8>)
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	f003 020f 	and.w	r2, r3, #15
 8005032:	6879      	ldr	r1, [r7, #4]
 8005034:	4613      	mov	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	440b      	add	r3, r1
 800503e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005042:	2201      	movs	r2, #1
 8005044:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005046:	4b4b      	ldr	r3, [pc, #300]	; (8005174 <USBD_CDC_Init+0x1ec>)
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	f003 020f 	and.w	r2, r3, #15
 800504e:	6879      	ldr	r1, [r7, #4]
 8005050:	4613      	mov	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	440b      	add	r3, r1
 800505a:	3326      	adds	r3, #38	; 0x26
 800505c:	2210      	movs	r2, #16
 800505e:	801a      	strh	r2, [r3, #0]
 8005060:	e035      	b.n	80050ce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005062:	4b42      	ldr	r3, [pc, #264]	; (800516c <USBD_CDC_Init+0x1e4>)
 8005064:	7819      	ldrb	r1, [r3, #0]
 8005066:	2340      	movs	r3, #64	; 0x40
 8005068:	2202      	movs	r2, #2
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f002 fb2f 	bl	80076ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005070:	4b3e      	ldr	r3, [pc, #248]	; (800516c <USBD_CDC_Init+0x1e4>)
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	f003 020f 	and.w	r2, r3, #15
 8005078:	6879      	ldr	r1, [r7, #4]
 800507a:	4613      	mov	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	440b      	add	r3, r1
 8005084:	3324      	adds	r3, #36	; 0x24
 8005086:	2201      	movs	r2, #1
 8005088:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800508a:	4b39      	ldr	r3, [pc, #228]	; (8005170 <USBD_CDC_Init+0x1e8>)
 800508c:	7819      	ldrb	r1, [r3, #0]
 800508e:	2340      	movs	r3, #64	; 0x40
 8005090:	2202      	movs	r2, #2
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f002 fb1b 	bl	80076ce <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005098:	4b35      	ldr	r3, [pc, #212]	; (8005170 <USBD_CDC_Init+0x1e8>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	f003 020f 	and.w	r2, r3, #15
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	4613      	mov	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	440b      	add	r3, r1
 80050ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80050b0:	2201      	movs	r2, #1
 80050b2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80050b4:	4b2f      	ldr	r3, [pc, #188]	; (8005174 <USBD_CDC_Init+0x1ec>)
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	f003 020f 	and.w	r2, r3, #15
 80050bc:	6879      	ldr	r1, [r7, #4]
 80050be:	4613      	mov	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4413      	add	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	440b      	add	r3, r1
 80050c8:	3326      	adds	r3, #38	; 0x26
 80050ca:	2210      	movs	r2, #16
 80050cc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80050ce:	4b29      	ldr	r3, [pc, #164]	; (8005174 <USBD_CDC_Init+0x1ec>)
 80050d0:	7819      	ldrb	r1, [r3, #0]
 80050d2:	2308      	movs	r3, #8
 80050d4:	2203      	movs	r2, #3
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f002 faf9 	bl	80076ce <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80050dc:	4b25      	ldr	r3, [pc, #148]	; (8005174 <USBD_CDC_Init+0x1ec>)
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	f003 020f 	and.w	r2, r3, #15
 80050e4:	6879      	ldr	r1, [r7, #4]
 80050e6:	4613      	mov	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	440b      	add	r3, r1
 80050f0:	3324      	adds	r3, #36	; 0x24
 80050f2:	2201      	movs	r2, #1
 80050f4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	33b0      	adds	r3, #176	; 0xb0
 8005108:	009b      	lsls	r3, r3, #2
 800510a:	4413      	add	r3, r2
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	2200      	movs	r2, #0
 8005116:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005128:	2b00      	cmp	r3, #0
 800512a:	d101      	bne.n	8005130 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800512c:	2302      	movs	r3, #2
 800512e:	e018      	b.n	8005162 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	7c1b      	ldrb	r3, [r3, #16]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10a      	bne.n	800514e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005138:	4b0d      	ldr	r3, [pc, #52]	; (8005170 <USBD_CDC_Init+0x1e8>)
 800513a:	7819      	ldrb	r1, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005142:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f002 fbb0 	bl	80078ac <USBD_LL_PrepareReceive>
 800514c:	e008      	b.n	8005160 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800514e:	4b08      	ldr	r3, [pc, #32]	; (8005170 <USBD_CDC_Init+0x1e8>)
 8005150:	7819      	ldrb	r1, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005158:	2340      	movs	r3, #64	; 0x40
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f002 fba6 	bl	80078ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	20000093 	.word	0x20000093
 8005170:	20000094 	.word	0x20000094
 8005174:	20000095 	.word	0x20000095

08005178 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b082      	sub	sp, #8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	460b      	mov	r3, r1
 8005182:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005184:	4b3a      	ldr	r3, [pc, #232]	; (8005270 <USBD_CDC_DeInit+0xf8>)
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	4619      	mov	r1, r3
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f002 fac5 	bl	800771a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005190:	4b37      	ldr	r3, [pc, #220]	; (8005270 <USBD_CDC_DeInit+0xf8>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	f003 020f 	and.w	r2, r3, #15
 8005198:	6879      	ldr	r1, [r7, #4]
 800519a:	4613      	mov	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	440b      	add	r3, r1
 80051a4:	3324      	adds	r3, #36	; 0x24
 80051a6:	2200      	movs	r2, #0
 80051a8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80051aa:	4b32      	ldr	r3, [pc, #200]	; (8005274 <USBD_CDC_DeInit+0xfc>)
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	4619      	mov	r1, r3
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f002 fab2 	bl	800771a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80051b6:	4b2f      	ldr	r3, [pc, #188]	; (8005274 <USBD_CDC_DeInit+0xfc>)
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	f003 020f 	and.w	r2, r3, #15
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	4613      	mov	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4413      	add	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	440b      	add	r3, r1
 80051ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80051ce:	2200      	movs	r2, #0
 80051d0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80051d2:	4b29      	ldr	r3, [pc, #164]	; (8005278 <USBD_CDC_DeInit+0x100>)
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	4619      	mov	r1, r3
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f002 fa9e 	bl	800771a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80051de:	4b26      	ldr	r3, [pc, #152]	; (8005278 <USBD_CDC_DeInit+0x100>)
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	f003 020f 	and.w	r2, r3, #15
 80051e6:	6879      	ldr	r1, [r7, #4]
 80051e8:	4613      	mov	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	4413      	add	r3, r2
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	440b      	add	r3, r1
 80051f2:	3324      	adds	r3, #36	; 0x24
 80051f4:	2200      	movs	r2, #0
 80051f6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80051f8:	4b1f      	ldr	r3, [pc, #124]	; (8005278 <USBD_CDC_DeInit+0x100>)
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	f003 020f 	and.w	r2, r3, #15
 8005200:	6879      	ldr	r1, [r7, #4]
 8005202:	4613      	mov	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4413      	add	r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	440b      	add	r3, r1
 800520c:	3326      	adds	r3, #38	; 0x26
 800520e:	2200      	movs	r2, #0
 8005210:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	32b0      	adds	r2, #176	; 0xb0
 800521c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d01f      	beq.n	8005264 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	33b0      	adds	r3, #176	; 0xb0
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	4413      	add	r3, r2
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	32b0      	adds	r2, #176	; 0xb0
 8005242:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005246:	4618      	mov	r0, r3
 8005248:	f002 fb72 	bl	8007930 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	32b0      	adds	r2, #176	; 0xb0
 8005256:	2100      	movs	r1, #0
 8005258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3708      	adds	r7, #8
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	20000093 	.word	0x20000093
 8005274:	20000094 	.word	0x20000094
 8005278:	20000095 	.word	0x20000095

0800527c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	32b0      	adds	r2, #176	; 0xb0
 8005290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005294:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005296:	2300      	movs	r3, #0
 8005298:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800529a:	2300      	movs	r3, #0
 800529c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800529e:	2300      	movs	r3, #0
 80052a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e0bf      	b.n	800542c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d050      	beq.n	800535a <USBD_CDC_Setup+0xde>
 80052b8:	2b20      	cmp	r3, #32
 80052ba:	f040 80af 	bne.w	800541c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	88db      	ldrh	r3, [r3, #6]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d03a      	beq.n	800533c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	b25b      	sxtb	r3, r3
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	da1b      	bge.n	8005308 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	33b0      	adds	r3, #176	; 0xb0
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	683a      	ldr	r2, [r7, #0]
 80052e4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80052e6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	88d2      	ldrh	r2, [r2, #6]
 80052ec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	88db      	ldrh	r3, [r3, #6]
 80052f2:	2b07      	cmp	r3, #7
 80052f4:	bf28      	it	cs
 80052f6:	2307      	movcs	r3, #7
 80052f8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	89fa      	ldrh	r2, [r7, #14]
 80052fe:	4619      	mov	r1, r3
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f001 fd89 	bl	8006e18 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005306:	e090      	b.n	800542a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	785a      	ldrb	r2, [r3, #1]
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	88db      	ldrh	r3, [r3, #6]
 8005316:	2b3f      	cmp	r3, #63	; 0x3f
 8005318:	d803      	bhi.n	8005322 <USBD_CDC_Setup+0xa6>
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	88db      	ldrh	r3, [r3, #6]
 800531e:	b2da      	uxtb	r2, r3
 8005320:	e000      	b.n	8005324 <USBD_CDC_Setup+0xa8>
 8005322:	2240      	movs	r2, #64	; 0x40
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800532a:	6939      	ldr	r1, [r7, #16]
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005332:	461a      	mov	r2, r3
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f001 fd9b 	bl	8006e70 <USBD_CtlPrepareRx>
      break;
 800533a:	e076      	b.n	800542a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	33b0      	adds	r3, #176	; 0xb0
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	683a      	ldr	r2, [r7, #0]
 8005350:	7850      	ldrb	r0, [r2, #1]
 8005352:	2200      	movs	r2, #0
 8005354:	6839      	ldr	r1, [r7, #0]
 8005356:	4798      	blx	r3
      break;
 8005358:	e067      	b.n	800542a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	785b      	ldrb	r3, [r3, #1]
 800535e:	2b0b      	cmp	r3, #11
 8005360:	d851      	bhi.n	8005406 <USBD_CDC_Setup+0x18a>
 8005362:	a201      	add	r2, pc, #4	; (adr r2, 8005368 <USBD_CDC_Setup+0xec>)
 8005364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005368:	08005399 	.word	0x08005399
 800536c:	08005415 	.word	0x08005415
 8005370:	08005407 	.word	0x08005407
 8005374:	08005407 	.word	0x08005407
 8005378:	08005407 	.word	0x08005407
 800537c:	08005407 	.word	0x08005407
 8005380:	08005407 	.word	0x08005407
 8005384:	08005407 	.word	0x08005407
 8005388:	08005407 	.word	0x08005407
 800538c:	08005407 	.word	0x08005407
 8005390:	080053c3 	.word	0x080053c3
 8005394:	080053ed 	.word	0x080053ed
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b03      	cmp	r3, #3
 80053a2:	d107      	bne.n	80053b4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80053a4:	f107 030a 	add.w	r3, r7, #10
 80053a8:	2202      	movs	r2, #2
 80053aa:	4619      	mov	r1, r3
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f001 fd33 	bl	8006e18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80053b2:	e032      	b.n	800541a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80053b4:	6839      	ldr	r1, [r7, #0]
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f001 fcbd 	bl	8006d36 <USBD_CtlError>
            ret = USBD_FAIL;
 80053bc:	2303      	movs	r3, #3
 80053be:	75fb      	strb	r3, [r7, #23]
          break;
 80053c0:	e02b      	b.n	800541a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b03      	cmp	r3, #3
 80053cc:	d107      	bne.n	80053de <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80053ce:	f107 030d 	add.w	r3, r7, #13
 80053d2:	2201      	movs	r2, #1
 80053d4:	4619      	mov	r1, r3
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f001 fd1e 	bl	8006e18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80053dc:	e01d      	b.n	800541a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80053de:	6839      	ldr	r1, [r7, #0]
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f001 fca8 	bl	8006d36 <USBD_CtlError>
            ret = USBD_FAIL;
 80053e6:	2303      	movs	r3, #3
 80053e8:	75fb      	strb	r3, [r7, #23]
          break;
 80053ea:	e016      	b.n	800541a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b03      	cmp	r3, #3
 80053f6:	d00f      	beq.n	8005418 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80053f8:	6839      	ldr	r1, [r7, #0]
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f001 fc9b 	bl	8006d36 <USBD_CtlError>
            ret = USBD_FAIL;
 8005400:	2303      	movs	r3, #3
 8005402:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005404:	e008      	b.n	8005418 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005406:	6839      	ldr	r1, [r7, #0]
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f001 fc94 	bl	8006d36 <USBD_CtlError>
          ret = USBD_FAIL;
 800540e:	2303      	movs	r3, #3
 8005410:	75fb      	strb	r3, [r7, #23]
          break;
 8005412:	e002      	b.n	800541a <USBD_CDC_Setup+0x19e>
          break;
 8005414:	bf00      	nop
 8005416:	e008      	b.n	800542a <USBD_CDC_Setup+0x1ae>
          break;
 8005418:	bf00      	nop
      }
      break;
 800541a:	e006      	b.n	800542a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800541c:	6839      	ldr	r1, [r7, #0]
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f001 fc89 	bl	8006d36 <USBD_CtlError>
      ret = USBD_FAIL;
 8005424:	2303      	movs	r3, #3
 8005426:	75fb      	strb	r3, [r7, #23]
      break;
 8005428:	bf00      	nop
  }

  return (uint8_t)ret;
 800542a:	7dfb      	ldrb	r3, [r7, #23]
}
 800542c:	4618      	mov	r0, r3
 800542e:	3718      	adds	r7, #24
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	460b      	mov	r3, r1
 800543e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005446:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	32b0      	adds	r2, #176	; 0xb0
 8005452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d101      	bne.n	800545e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800545a:	2303      	movs	r3, #3
 800545c:	e065      	b.n	800552a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	32b0      	adds	r2, #176	; 0xb0
 8005468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800546c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800546e:	78fb      	ldrb	r3, [r7, #3]
 8005470:	f003 020f 	and.w	r2, r3, #15
 8005474:	6879      	ldr	r1, [r7, #4]
 8005476:	4613      	mov	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	440b      	add	r3, r1
 8005480:	3318      	adds	r3, #24
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d02f      	beq.n	80054e8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005488:	78fb      	ldrb	r3, [r7, #3]
 800548a:	f003 020f 	and.w	r2, r3, #15
 800548e:	6879      	ldr	r1, [r7, #4]
 8005490:	4613      	mov	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	440b      	add	r3, r1
 800549a:	3318      	adds	r3, #24
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	78fb      	ldrb	r3, [r7, #3]
 80054a0:	f003 010f 	and.w	r1, r3, #15
 80054a4:	68f8      	ldr	r0, [r7, #12]
 80054a6:	460b      	mov	r3, r1
 80054a8:	00db      	lsls	r3, r3, #3
 80054aa:	440b      	add	r3, r1
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	4403      	add	r3, r0
 80054b0:	3348      	adds	r3, #72	; 0x48
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	fbb2 f1f3 	udiv	r1, r2, r3
 80054b8:	fb01 f303 	mul.w	r3, r1, r3
 80054bc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d112      	bne.n	80054e8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80054c2:	78fb      	ldrb	r3, [r7, #3]
 80054c4:	f003 020f 	and.w	r2, r3, #15
 80054c8:	6879      	ldr	r1, [r7, #4]
 80054ca:	4613      	mov	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	440b      	add	r3, r1
 80054d4:	3318      	adds	r3, #24
 80054d6:	2200      	movs	r2, #0
 80054d8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80054da:	78f9      	ldrb	r1, [r7, #3]
 80054dc:	2300      	movs	r3, #0
 80054de:	2200      	movs	r2, #0
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f002 f9c2 	bl	800786a <USBD_LL_Transmit>
 80054e6:	e01f      	b.n	8005528 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	33b0      	adds	r3, #176	; 0xb0
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d010      	beq.n	8005528 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	33b0      	adds	r3, #176	; 0xb0
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005524:	78fa      	ldrb	r2, [r7, #3]
 8005526:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005532:	b580      	push	{r7, lr}
 8005534:	b084      	sub	sp, #16
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
 800553a:	460b      	mov	r3, r1
 800553c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	32b0      	adds	r2, #176	; 0xb0
 8005548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800554c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	32b0      	adds	r2, #176	; 0xb0
 8005558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005560:	2303      	movs	r3, #3
 8005562:	e01a      	b.n	800559a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005564:	78fb      	ldrb	r3, [r7, #3]
 8005566:	4619      	mov	r1, r3
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f002 f9c0 	bl	80078ee <USBD_LL_GetRxDataSize>
 800556e:	4602      	mov	r2, r0
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	33b0      	adds	r3, #176	; 0xb0
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	4413      	add	r3, r2
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005594:	4611      	mov	r1, r2
 8005596:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b084      	sub	sp, #16
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	32b0      	adds	r2, #176	; 0xb0
 80055b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e025      	b.n	8005610 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	33b0      	adds	r3, #176	; 0xb0
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	4413      	add	r3, r2
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d01a      	beq.n	800560e <USBD_CDC_EP0_RxReady+0x6c>
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80055de:	2bff      	cmp	r3, #255	; 0xff
 80055e0:	d015      	beq.n	800560e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	33b0      	adds	r3, #176	; 0xb0
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4413      	add	r3, r2
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80055fa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005602:	b292      	uxth	r2, r2
 8005604:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	22ff      	movs	r2, #255	; 0xff
 800560a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005620:	2182      	movs	r1, #130	; 0x82
 8005622:	4818      	ldr	r0, [pc, #96]	; (8005684 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005624:	f000 fd4f 	bl	80060c6 <USBD_GetEpDesc>
 8005628:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800562a:	2101      	movs	r1, #1
 800562c:	4815      	ldr	r0, [pc, #84]	; (8005684 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800562e:	f000 fd4a 	bl	80060c6 <USBD_GetEpDesc>
 8005632:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005634:	2181      	movs	r1, #129	; 0x81
 8005636:	4813      	ldr	r0, [pc, #76]	; (8005684 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005638:	f000 fd45 	bl	80060c6 <USBD_GetEpDesc>
 800563c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d002      	beq.n	800564a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	2210      	movs	r2, #16
 8005648:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d006      	beq.n	800565e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	2200      	movs	r2, #0
 8005654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005658:	711a      	strb	r2, [r3, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d006      	beq.n	8005672 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2200      	movs	r2, #0
 8005668:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800566c:	711a      	strb	r2, [r3, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2243      	movs	r2, #67	; 0x43
 8005676:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005678:	4b02      	ldr	r3, [pc, #8]	; (8005684 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800567a:	4618      	mov	r0, r3
 800567c:	3718      	adds	r7, #24
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	20000050 	.word	0x20000050

08005688 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005690:	2182      	movs	r1, #130	; 0x82
 8005692:	4818      	ldr	r0, [pc, #96]	; (80056f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005694:	f000 fd17 	bl	80060c6 <USBD_GetEpDesc>
 8005698:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800569a:	2101      	movs	r1, #1
 800569c:	4815      	ldr	r0, [pc, #84]	; (80056f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800569e:	f000 fd12 	bl	80060c6 <USBD_GetEpDesc>
 80056a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80056a4:	2181      	movs	r1, #129	; 0x81
 80056a6:	4813      	ldr	r0, [pc, #76]	; (80056f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80056a8:	f000 fd0d 	bl	80060c6 <USBD_GetEpDesc>
 80056ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	2210      	movs	r2, #16
 80056b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d006      	beq.n	80056ce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	2200      	movs	r2, #0
 80056c4:	711a      	strb	r2, [r3, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f042 0202 	orr.w	r2, r2, #2
 80056cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d006      	beq.n	80056e2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2200      	movs	r2, #0
 80056d8:	711a      	strb	r2, [r3, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f042 0202 	orr.w	r2, r2, #2
 80056e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2243      	movs	r2, #67	; 0x43
 80056e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80056e8:	4b02      	ldr	r3, [pc, #8]	; (80056f4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3718      	adds	r7, #24
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	20000050 	.word	0x20000050

080056f8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005700:	2182      	movs	r1, #130	; 0x82
 8005702:	4818      	ldr	r0, [pc, #96]	; (8005764 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005704:	f000 fcdf 	bl	80060c6 <USBD_GetEpDesc>
 8005708:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800570a:	2101      	movs	r1, #1
 800570c:	4815      	ldr	r0, [pc, #84]	; (8005764 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800570e:	f000 fcda 	bl	80060c6 <USBD_GetEpDesc>
 8005712:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005714:	2181      	movs	r1, #129	; 0x81
 8005716:	4813      	ldr	r0, [pc, #76]	; (8005764 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005718:	f000 fcd5 	bl	80060c6 <USBD_GetEpDesc>
 800571c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	2210      	movs	r2, #16
 8005728:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d006      	beq.n	800573e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	2200      	movs	r2, #0
 8005734:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005738:	711a      	strb	r2, [r3, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d006      	beq.n	8005752 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800574c:	711a      	strb	r2, [r3, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2243      	movs	r2, #67	; 0x43
 8005756:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005758:	4b02      	ldr	r3, [pc, #8]	; (8005764 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800575a:	4618      	mov	r0, r3
 800575c:	3718      	adds	r7, #24
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	20000050 	.word	0x20000050

08005768 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	220a      	movs	r2, #10
 8005774:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005776:	4b03      	ldr	r3, [pc, #12]	; (8005784 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005778:	4618      	mov	r0, r3
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr
 8005784:	2000000c 	.word	0x2000000c

08005788 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005798:	2303      	movs	r3, #3
 800579a:	e009      	b.n	80057b0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	33b0      	adds	r3, #176	; 0xb0
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	683a      	ldr	r2, [r7, #0]
 80057ac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	370c      	adds	r7, #12
 80057b4:	46bd      	mov	sp, r7
 80057b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ba:	4770      	bx	lr

080057bc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80057bc:	b480      	push	{r7}
 80057be:	b087      	sub	sp, #28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	32b0      	adds	r2, #176	; 0xb0
 80057d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057d6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80057de:	2303      	movs	r3, #3
 80057e0:	e008      	b.n	80057f4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80057f2:	2300      	movs	r3, #0
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	371c      	adds	r7, #28
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	32b0      	adds	r2, #176	; 0xb0
 8005814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005818:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005820:	2303      	movs	r3, #3
 8005822:	e004      	b.n	800582e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
	...

0800583c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	32b0      	adds	r2, #176	; 0xb0
 800584e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005852:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005854:	2301      	movs	r3, #1
 8005856:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	32b0      	adds	r2, #176	; 0xb0
 8005862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800586a:	2303      	movs	r3, #3
 800586c:	e025      	b.n	80058ba <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005874:	2b00      	cmp	r3, #0
 8005876:	d11f      	bne.n	80058b8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	2201      	movs	r2, #1
 800587c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005880:	4b10      	ldr	r3, [pc, #64]	; (80058c4 <USBD_CDC_TransmitPacket+0x88>)
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	f003 020f 	and.w	r2, r3, #15
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	4613      	mov	r3, r2
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4413      	add	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4403      	add	r3, r0
 800589a:	3318      	adds	r3, #24
 800589c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800589e:	4b09      	ldr	r3, [pc, #36]	; (80058c4 <USBD_CDC_TransmitPacket+0x88>)
 80058a0:	7819      	ldrb	r1, [r3, #0]
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f001 ffdb 	bl	800786a <USBD_LL_Transmit>

    ret = USBD_OK;
 80058b4:	2300      	movs	r3, #0
 80058b6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80058b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	20000093 	.word	0x20000093

080058c8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	32b0      	adds	r2, #176	; 0xb0
 80058da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058de:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	32b0      	adds	r2, #176	; 0xb0
 80058ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80058f2:	2303      	movs	r3, #3
 80058f4:	e018      	b.n	8005928 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	7c1b      	ldrb	r3, [r3, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10a      	bne.n	8005914 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80058fe:	4b0c      	ldr	r3, [pc, #48]	; (8005930 <USBD_CDC_ReceivePacket+0x68>)
 8005900:	7819      	ldrb	r1, [r3, #0]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005908:	f44f 7300 	mov.w	r3, #512	; 0x200
 800590c:	6878      	ldr	r0, [r7, #4]
 800590e:	f001 ffcd 	bl	80078ac <USBD_LL_PrepareReceive>
 8005912:	e008      	b.n	8005926 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005914:	4b06      	ldr	r3, [pc, #24]	; (8005930 <USBD_CDC_ReceivePacket+0x68>)
 8005916:	7819      	ldrb	r1, [r3, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800591e:	2340      	movs	r3, #64	; 0x40
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f001 ffc3 	bl	80078ac <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	20000094 	.word	0x20000094

08005934 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	4613      	mov	r3, r2
 8005940:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d101      	bne.n	800594c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005948:	2303      	movs	r3, #3
 800594a:	e01f      	b.n	800598c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2200      	movs	r2, #0
 8005960:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d003      	beq.n	8005972 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	68ba      	ldr	r2, [r7, #8]
 800596e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	79fa      	ldrb	r2, [r7, #7]
 800597e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f001 fe3d 	bl	8007600 <USBD_LL_Init>
 8005986:	4603      	mov	r3, r0
 8005988:	75fb      	strb	r3, [r7, #23]

  return ret;
 800598a:	7dfb      	ldrb	r3, [r7, #23]
}
 800598c:	4618      	mov	r0, r3
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800599e:	2300      	movs	r3, #0
 80059a0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d101      	bne.n	80059ac <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80059a8:	2303      	movs	r3, #3
 80059aa:	e025      	b.n	80059f8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	32ae      	adds	r2, #174	; 0xae
 80059be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d00f      	beq.n	80059e8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	32ae      	adds	r2, #174	; 0xae
 80059d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d8:	f107 020e 	add.w	r2, r7, #14
 80059dc:	4610      	mov	r0, r2
 80059de:	4798      	blx	r3
 80059e0:	4602      	mov	r2, r0
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80059ee:	1c5a      	adds	r2, r3, #1
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3710      	adds	r7, #16
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f001 fe45 	bl	8007698 <USBD_LL_Start>
 8005a0e:	4603      	mov	r3, r0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005a20:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a2e:	b580      	push	{r7, lr}
 8005a30:	b084      	sub	sp, #16
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	6078      	str	r0, [r7, #4]
 8005a36:	460b      	mov	r3, r1
 8005a38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d009      	beq.n	8005a5c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	78fa      	ldrb	r2, [r7, #3]
 8005a52:	4611      	mov	r1, r2
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	4798      	blx	r3
 8005a58:	4603      	mov	r3, r0
 8005a5a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b084      	sub	sp, #16
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	460b      	mov	r3, r1
 8005a70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a72:	2300      	movs	r3, #0
 8005a74:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	78fa      	ldrb	r2, [r7, #3]
 8005a80:	4611      	mov	r1, r2
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	4798      	blx	r3
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d001      	beq.n	8005a90 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3710      	adds	r7, #16
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b084      	sub	sp, #16
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
 8005aa2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005aaa:	6839      	ldr	r1, [r7, #0]
 8005aac:	4618      	mov	r0, r3
 8005aae:	f001 f908 	bl	8006cc2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ace:	f003 031f 	and.w	r3, r3, #31
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d01a      	beq.n	8005b0c <USBD_LL_SetupStage+0x72>
 8005ad6:	2b02      	cmp	r3, #2
 8005ad8:	d822      	bhi.n	8005b20 <USBD_LL_SetupStage+0x86>
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d002      	beq.n	8005ae4 <USBD_LL_SetupStage+0x4a>
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d00a      	beq.n	8005af8 <USBD_LL_SetupStage+0x5e>
 8005ae2:	e01d      	b.n	8005b20 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005aea:	4619      	mov	r1, r3
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 fb5f 	bl	80061b0 <USBD_StdDevReq>
 8005af2:	4603      	mov	r3, r0
 8005af4:	73fb      	strb	r3, [r7, #15]
      break;
 8005af6:	e020      	b.n	8005b3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005afe:	4619      	mov	r1, r3
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	f000 fbc7 	bl	8006294 <USBD_StdItfReq>
 8005b06:	4603      	mov	r3, r0
 8005b08:	73fb      	strb	r3, [r7, #15]
      break;
 8005b0a:	e016      	b.n	8005b3a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b12:	4619      	mov	r1, r3
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 fc29 	bl	800636c <USBD_StdEPReq>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	73fb      	strb	r3, [r7, #15]
      break;
 8005b1e:	e00c      	b.n	8005b3a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005b26:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	4619      	mov	r1, r3
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f001 fe12 	bl	8007758 <USBD_LL_StallEP>
 8005b34:	4603      	mov	r3, r0
 8005b36:	73fb      	strb	r3, [r7, #15]
      break;
 8005b38:	bf00      	nop
  }

  return ret;
 8005b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	460b      	mov	r3, r1
 8005b4e:	607a      	str	r2, [r7, #4]
 8005b50:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005b56:	7afb      	ldrb	r3, [r7, #11]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d16e      	bne.n	8005c3a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005b62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005b6a:	2b03      	cmp	r3, #3
 8005b6c:	f040 8098 	bne.w	8005ca0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d913      	bls.n	8005ba4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	68db      	ldr	r3, [r3, #12]
 8005b84:	1ad2      	subs	r2, r2, r3
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	4293      	cmp	r3, r2
 8005b94:	bf28      	it	cs
 8005b96:	4613      	movcs	r3, r2
 8005b98:	461a      	mov	r2, r3
 8005b9a:	6879      	ldr	r1, [r7, #4]
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f001 f984 	bl	8006eaa <USBD_CtlContinueRx>
 8005ba2:	e07d      	b.n	8005ca0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005baa:	f003 031f 	and.w	r3, r3, #31
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d014      	beq.n	8005bdc <USBD_LL_DataOutStage+0x98>
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d81d      	bhi.n	8005bf2 <USBD_LL_DataOutStage+0xae>
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <USBD_LL_DataOutStage+0x7c>
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d003      	beq.n	8005bc6 <USBD_LL_DataOutStage+0x82>
 8005bbe:	e018      	b.n	8005bf2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	75bb      	strb	r3, [r7, #22]
            break;
 8005bc4:	e018      	b.n	8005bf8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	4619      	mov	r1, r3
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 fa5e 	bl	8006092 <USBD_CoreFindIF>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	75bb      	strb	r3, [r7, #22]
            break;
 8005bda:	e00d      	b.n	8005bf8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	4619      	mov	r1, r3
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f000 fa60 	bl	80060ac <USBD_CoreFindEP>
 8005bec:	4603      	mov	r3, r0
 8005bee:	75bb      	strb	r3, [r7, #22]
            break;
 8005bf0:	e002      	b.n	8005bf8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	75bb      	strb	r3, [r7, #22]
            break;
 8005bf6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005bf8:	7dbb      	ldrb	r3, [r7, #22]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d119      	bne.n	8005c32 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b03      	cmp	r3, #3
 8005c08:	d113      	bne.n	8005c32 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005c0a:	7dba      	ldrb	r2, [r7, #22]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	32ae      	adds	r2, #174	; 0xae
 8005c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00b      	beq.n	8005c32 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005c1a:	7dba      	ldrb	r2, [r7, #22]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005c22:	7dba      	ldrb	r2, [r7, #22]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	32ae      	adds	r2, #174	; 0xae
 8005c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005c32:	68f8      	ldr	r0, [r7, #12]
 8005c34:	f001 f94a 	bl	8006ecc <USBD_CtlSendStatus>
 8005c38:	e032      	b.n	8005ca0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005c3a:	7afb      	ldrb	r3, [r7, #11]
 8005c3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	4619      	mov	r1, r3
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 fa31 	bl	80060ac <USBD_CoreFindEP>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c4e:	7dbb      	ldrb	r3, [r7, #22]
 8005c50:	2bff      	cmp	r3, #255	; 0xff
 8005c52:	d025      	beq.n	8005ca0 <USBD_LL_DataOutStage+0x15c>
 8005c54:	7dbb      	ldrb	r3, [r7, #22]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d122      	bne.n	8005ca0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b03      	cmp	r3, #3
 8005c64:	d117      	bne.n	8005c96 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005c66:	7dba      	ldrb	r2, [r7, #22]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	32ae      	adds	r2, #174	; 0xae
 8005c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c70:	699b      	ldr	r3, [r3, #24]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00f      	beq.n	8005c96 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005c76:	7dba      	ldrb	r2, [r7, #22]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005c7e:	7dba      	ldrb	r2, [r7, #22]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	32ae      	adds	r2, #174	; 0xae
 8005c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c88:	699b      	ldr	r3, [r3, #24]
 8005c8a:	7afa      	ldrb	r2, [r7, #11]
 8005c8c:	4611      	mov	r1, r2
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	4798      	blx	r3
 8005c92:	4603      	mov	r3, r0
 8005c94:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005c96:	7dfb      	ldrb	r3, [r7, #23]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d001      	beq.n	8005ca0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005c9c:	7dfb      	ldrb	r3, [r7, #23]
 8005c9e:	e000      	b.n	8005ca2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3718      	adds	r7, #24
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b086      	sub	sp, #24
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	60f8      	str	r0, [r7, #12]
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	607a      	str	r2, [r7, #4]
 8005cb6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005cb8:	7afb      	ldrb	r3, [r7, #11]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d16f      	bne.n	8005d9e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	3314      	adds	r3, #20
 8005cc2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d15a      	bne.n	8005d84 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	689a      	ldr	r2, [r3, #8]
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d914      	bls.n	8005d04 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	689a      	ldr	r2, [r3, #8]
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	1ad2      	subs	r2, r2, r3
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	461a      	mov	r2, r3
 8005cee:	6879      	ldr	r1, [r7, #4]
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f001 f8ac 	bl	8006e4e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	2100      	movs	r1, #0
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f001 fdd5 	bl	80078ac <USBD_LL_PrepareReceive>
 8005d02:	e03f      	b.n	8005d84 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d11c      	bne.n	8005d4a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d316      	bcc.n	8005d4a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	685a      	ldr	r2, [r3, #4]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d20f      	bcs.n	8005d4a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	68f8      	ldr	r0, [r7, #12]
 8005d30:	f001 f88d 	bl	8006e4e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	2200      	movs	r2, #0
 8005d40:	2100      	movs	r1, #0
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f001 fdb2 	bl	80078ac <USBD_LL_PrepareReceive>
 8005d48:	e01c      	b.n	8005d84 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b03      	cmp	r3, #3
 8005d54:	d10f      	bne.n	8005d76 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d009      	beq.n	8005d76 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	68f8      	ldr	r0, [r7, #12]
 8005d74:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d76:	2180      	movs	r1, #128	; 0x80
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f001 fced 	bl	8007758 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f001 f8b7 	bl	8006ef2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d03a      	beq.n	8005e04 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f7ff fe42 	bl	8005a18 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005d9c:	e032      	b.n	8005e04 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005d9e:	7afb      	ldrb	r3, [r7, #11]
 8005da0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	4619      	mov	r1, r3
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f000 f97f 	bl	80060ac <USBD_CoreFindEP>
 8005dae:	4603      	mov	r3, r0
 8005db0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005db2:	7dfb      	ldrb	r3, [r7, #23]
 8005db4:	2bff      	cmp	r3, #255	; 0xff
 8005db6:	d025      	beq.n	8005e04 <USBD_LL_DataInStage+0x15a>
 8005db8:	7dfb      	ldrb	r3, [r7, #23]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d122      	bne.n	8005e04 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dc4:	b2db      	uxtb	r3, r3
 8005dc6:	2b03      	cmp	r3, #3
 8005dc8:	d11c      	bne.n	8005e04 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005dca:	7dfa      	ldrb	r2, [r7, #23]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	32ae      	adds	r2, #174	; 0xae
 8005dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d014      	beq.n	8005e04 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005dda:	7dfa      	ldrb	r2, [r7, #23]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005de2:	7dfa      	ldrb	r2, [r7, #23]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	32ae      	adds	r2, #174	; 0xae
 8005de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	7afa      	ldrb	r2, [r7, #11]
 8005df0:	4611      	mov	r1, r2
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	4798      	blx	r3
 8005df6:	4603      	mov	r3, r0
 8005df8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005dfa:	7dbb      	ldrb	r3, [r7, #22]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d001      	beq.n	8005e04 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005e00:	7dbb      	ldrb	r3, [r7, #22]
 8005e02:	e000      	b.n	8005e06 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}

08005e0e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b084      	sub	sp, #16
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e16:	2300      	movs	r3, #0
 8005e18:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2201      	movs	r2, #1
 8005e1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d014      	beq.n	8005e74 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00e      	beq.n	8005e74 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	6852      	ldr	r2, [r2, #4]
 8005e62:	b2d2      	uxtb	r2, r2
 8005e64:	4611      	mov	r1, r2
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	4798      	blx	r3
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005e70:	2303      	movs	r3, #3
 8005e72:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e74:	2340      	movs	r3, #64	; 0x40
 8005e76:	2200      	movs	r2, #0
 8005e78:	2100      	movs	r1, #0
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f001 fc27 	bl	80076ce <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2240      	movs	r2, #64	; 0x40
 8005e8c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005e90:	2340      	movs	r3, #64	; 0x40
 8005e92:	2200      	movs	r2, #0
 8005e94:	2180      	movs	r1, #128	; 0x80
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f001 fc19 	bl	80076ce <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2240      	movs	r2, #64	; 0x40
 8005ea6:	621a      	str	r2, [r3, #32]

  return ret;
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005eb2:	b480      	push	{r7}
 8005eb4:	b083      	sub	sp, #12
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
 8005eba:	460b      	mov	r3, r1
 8005ebc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	78fa      	ldrb	r2, [r7, #3]
 8005ec2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b083      	sub	sp, #12
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ee0:	b2da      	uxtb	r2, r3
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2204      	movs	r2, #4
 8005eec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005efe:	b480      	push	{r7}
 8005f00:	b083      	sub	sp, #12
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b04      	cmp	r3, #4
 8005f10:	d106      	bne.n	8005f20 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005f18:	b2da      	uxtb	r2, r3
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b082      	sub	sp, #8
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b03      	cmp	r3, #3
 8005f40:	d110      	bne.n	8005f64 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d00b      	beq.n	8005f64 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f52:	69db      	ldr	r3, [r3, #28]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d005      	beq.n	8005f64 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f5e:	69db      	ldr	r3, [r3, #28]
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3708      	adds	r7, #8
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b082      	sub	sp, #8
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
 8005f76:	460b      	mov	r3, r1
 8005f78:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	32ae      	adds	r2, #174	; 0xae
 8005f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d101      	bne.n	8005f90 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	e01c      	b.n	8005fca <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b03      	cmp	r3, #3
 8005f9a:	d115      	bne.n	8005fc8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	32ae      	adds	r2, #174	; 0xae
 8005fa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005faa:	6a1b      	ldr	r3, [r3, #32]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00b      	beq.n	8005fc8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	32ae      	adds	r2, #174	; 0xae
 8005fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fbe:	6a1b      	ldr	r3, [r3, #32]
 8005fc0:	78fa      	ldrb	r2, [r7, #3]
 8005fc2:	4611      	mov	r1, r2
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3708      	adds	r7, #8
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}

08005fd2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b082      	sub	sp, #8
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	460b      	mov	r3, r1
 8005fdc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	32ae      	adds	r2, #174	; 0xae
 8005fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d101      	bne.n	8005ff4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e01c      	b.n	800602e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b03      	cmp	r3, #3
 8005ffe:	d115      	bne.n	800602c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	32ae      	adds	r2, #174	; 0xae
 800600a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800600e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006010:	2b00      	cmp	r3, #0
 8006012:	d00b      	beq.n	800602c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	32ae      	adds	r2, #174	; 0xae
 800601e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006024:	78fa      	ldrb	r2, [r7, #3]
 8006026:	4611      	mov	r1, r2
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}

08006036 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006036:	b480      	push	{r7}
 8006038:	b083      	sub	sp, #12
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	4618      	mov	r0, r3
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006054:	2300      	movs	r3, #0
 8006056:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00e      	beq.n	8006088 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	6852      	ldr	r2, [r2, #4]
 8006076:	b2d2      	uxtb	r2, r2
 8006078:	4611      	mov	r1, r2
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	4798      	blx	r3
 800607e:	4603      	mov	r3, r0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d001      	beq.n	8006088 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006084:	2303      	movs	r3, #3
 8006086:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006088:	7bfb      	ldrb	r3, [r7, #15]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}

08006092 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
 800609a:	460b      	mov	r3, r1
 800609c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800609e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	460b      	mov	r3, r1
 80060b6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80060b8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	370c      	adds	r7, #12
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b086      	sub	sp, #24
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
 80060ce:	460b      	mov	r3, r1
 80060d0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80060da:	2300      	movs	r3, #0
 80060dc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	885b      	ldrh	r3, [r3, #2]
 80060e2:	b29a      	uxth	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d920      	bls.n	8006130 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	b29b      	uxth	r3, r3
 80060f4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80060f6:	e013      	b.n	8006120 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80060f8:	f107 030a 	add.w	r3, r7, #10
 80060fc:	4619      	mov	r1, r3
 80060fe:	6978      	ldr	r0, [r7, #20]
 8006100:	f000 f81b 	bl	800613a <USBD_GetNextDesc>
 8006104:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	785b      	ldrb	r3, [r3, #1]
 800610a:	2b05      	cmp	r3, #5
 800610c:	d108      	bne.n	8006120 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	789b      	ldrb	r3, [r3, #2]
 8006116:	78fa      	ldrb	r2, [r7, #3]
 8006118:	429a      	cmp	r2, r3
 800611a:	d008      	beq.n	800612e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800611c:	2300      	movs	r3, #0
 800611e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	885b      	ldrh	r3, [r3, #2]
 8006124:	b29a      	uxth	r2, r3
 8006126:	897b      	ldrh	r3, [r7, #10]
 8006128:	429a      	cmp	r2, r3
 800612a:	d8e5      	bhi.n	80060f8 <USBD_GetEpDesc+0x32>
 800612c:	e000      	b.n	8006130 <USBD_GetEpDesc+0x6a>
          break;
 800612e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006130:	693b      	ldr	r3, [r7, #16]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3718      	adds	r7, #24
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800613a:	b480      	push	{r7}
 800613c:	b085      	sub	sp, #20
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
 8006142:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	881a      	ldrh	r2, [r3, #0]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	b29b      	uxth	r3, r3
 8006152:	4413      	add	r3, r2
 8006154:	b29a      	uxth	r2, r3
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	461a      	mov	r2, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4413      	add	r3, r2
 8006164:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006166:	68fb      	ldr	r3, [r7, #12]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3714      	adds	r7, #20
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006174:	b480      	push	{r7}
 8006176:	b087      	sub	sp, #28
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	3301      	adds	r3, #1
 800618a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006192:	8a3b      	ldrh	r3, [r7, #16]
 8006194:	021b      	lsls	r3, r3, #8
 8006196:	b21a      	sxth	r2, r3
 8006198:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800619c:	4313      	orrs	r3, r2
 800619e:	b21b      	sxth	r3, r3
 80061a0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80061a2:	89fb      	ldrh	r3, [r7, #14]
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	371c      	adds	r7, #28
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
 80061b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80061ba:	2300      	movs	r3, #0
 80061bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	781b      	ldrb	r3, [r3, #0]
 80061c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80061c6:	2b40      	cmp	r3, #64	; 0x40
 80061c8:	d005      	beq.n	80061d6 <USBD_StdDevReq+0x26>
 80061ca:	2b40      	cmp	r3, #64	; 0x40
 80061cc:	d857      	bhi.n	800627e <USBD_StdDevReq+0xce>
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00f      	beq.n	80061f2 <USBD_StdDevReq+0x42>
 80061d2:	2b20      	cmp	r3, #32
 80061d4:	d153      	bne.n	800627e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	32ae      	adds	r2, #174	; 0xae
 80061e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	6839      	ldr	r1, [r7, #0]
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	4798      	blx	r3
 80061ec:	4603      	mov	r3, r0
 80061ee:	73fb      	strb	r3, [r7, #15]
      break;
 80061f0:	e04a      	b.n	8006288 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	785b      	ldrb	r3, [r3, #1]
 80061f6:	2b09      	cmp	r3, #9
 80061f8:	d83b      	bhi.n	8006272 <USBD_StdDevReq+0xc2>
 80061fa:	a201      	add	r2, pc, #4	; (adr r2, 8006200 <USBD_StdDevReq+0x50>)
 80061fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006200:	08006255 	.word	0x08006255
 8006204:	08006269 	.word	0x08006269
 8006208:	08006273 	.word	0x08006273
 800620c:	0800625f 	.word	0x0800625f
 8006210:	08006273 	.word	0x08006273
 8006214:	08006233 	.word	0x08006233
 8006218:	08006229 	.word	0x08006229
 800621c:	08006273 	.word	0x08006273
 8006220:	0800624b 	.word	0x0800624b
 8006224:	0800623d 	.word	0x0800623d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006228:	6839      	ldr	r1, [r7, #0]
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 fa3c 	bl	80066a8 <USBD_GetDescriptor>
          break;
 8006230:	e024      	b.n	800627c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006232:	6839      	ldr	r1, [r7, #0]
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 fba1 	bl	800697c <USBD_SetAddress>
          break;
 800623a:	e01f      	b.n	800627c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800623c:	6839      	ldr	r1, [r7, #0]
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 fbe0 	bl	8006a04 <USBD_SetConfig>
 8006244:	4603      	mov	r3, r0
 8006246:	73fb      	strb	r3, [r7, #15]
          break;
 8006248:	e018      	b.n	800627c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800624a:	6839      	ldr	r1, [r7, #0]
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fc83 	bl	8006b58 <USBD_GetConfig>
          break;
 8006252:	e013      	b.n	800627c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006254:	6839      	ldr	r1, [r7, #0]
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 fcb4 	bl	8006bc4 <USBD_GetStatus>
          break;
 800625c:	e00e      	b.n	800627c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800625e:	6839      	ldr	r1, [r7, #0]
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fce3 	bl	8006c2c <USBD_SetFeature>
          break;
 8006266:	e009      	b.n	800627c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fd07 	bl	8006c7e <USBD_ClrFeature>
          break;
 8006270:	e004      	b.n	800627c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006272:	6839      	ldr	r1, [r7, #0]
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f000 fd5e 	bl	8006d36 <USBD_CtlError>
          break;
 800627a:	bf00      	nop
      }
      break;
 800627c:	e004      	b.n	8006288 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800627e:	6839      	ldr	r1, [r7, #0]
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 fd58 	bl	8006d36 <USBD_CtlError>
      break;
 8006286:	bf00      	nop
  }

  return ret;
 8006288:	7bfb      	ldrb	r3, [r7, #15]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop

08006294 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
 800629c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800629e:	2300      	movs	r3, #0
 80062a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062aa:	2b40      	cmp	r3, #64	; 0x40
 80062ac:	d005      	beq.n	80062ba <USBD_StdItfReq+0x26>
 80062ae:	2b40      	cmp	r3, #64	; 0x40
 80062b0:	d852      	bhi.n	8006358 <USBD_StdItfReq+0xc4>
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d001      	beq.n	80062ba <USBD_StdItfReq+0x26>
 80062b6:	2b20      	cmp	r3, #32
 80062b8:	d14e      	bne.n	8006358 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	3b01      	subs	r3, #1
 80062c4:	2b02      	cmp	r3, #2
 80062c6:	d840      	bhi.n	800634a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	889b      	ldrh	r3, [r3, #4]
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d836      	bhi.n	8006340 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	889b      	ldrh	r3, [r3, #4]
 80062d6:	b2db      	uxtb	r3, r3
 80062d8:	4619      	mov	r1, r3
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7ff fed9 	bl	8006092 <USBD_CoreFindIF>
 80062e0:	4603      	mov	r3, r0
 80062e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062e4:	7bbb      	ldrb	r3, [r7, #14]
 80062e6:	2bff      	cmp	r3, #255	; 0xff
 80062e8:	d01d      	beq.n	8006326 <USBD_StdItfReq+0x92>
 80062ea:	7bbb      	ldrb	r3, [r7, #14]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d11a      	bne.n	8006326 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80062f0:	7bba      	ldrb	r2, [r7, #14]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	32ae      	adds	r2, #174	; 0xae
 80062f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d00f      	beq.n	8006320 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006300:	7bba      	ldrb	r2, [r7, #14]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006308:	7bba      	ldrb	r2, [r7, #14]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	32ae      	adds	r2, #174	; 0xae
 800630e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	6839      	ldr	r1, [r7, #0]
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	4798      	blx	r3
 800631a:	4603      	mov	r3, r0
 800631c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800631e:	e004      	b.n	800632a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006320:	2303      	movs	r3, #3
 8006322:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006324:	e001      	b.n	800632a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006326:	2303      	movs	r3, #3
 8006328:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	88db      	ldrh	r3, [r3, #6]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d110      	bne.n	8006354 <USBD_StdItfReq+0xc0>
 8006332:	7bfb      	ldrb	r3, [r7, #15]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d10d      	bne.n	8006354 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 fdc7 	bl	8006ecc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800633e:	e009      	b.n	8006354 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006340:	6839      	ldr	r1, [r7, #0]
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fcf7 	bl	8006d36 <USBD_CtlError>
          break;
 8006348:	e004      	b.n	8006354 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800634a:	6839      	ldr	r1, [r7, #0]
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fcf2 	bl	8006d36 <USBD_CtlError>
          break;
 8006352:	e000      	b.n	8006356 <USBD_StdItfReq+0xc2>
          break;
 8006354:	bf00      	nop
      }
      break;
 8006356:	e004      	b.n	8006362 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006358:	6839      	ldr	r1, [r7, #0]
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fceb 	bl	8006d36 <USBD_CtlError>
      break;
 8006360:	bf00      	nop
  }

  return ret;
 8006362:	7bfb      	ldrb	r3, [r7, #15]
}
 8006364:	4618      	mov	r0, r3
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006376:	2300      	movs	r3, #0
 8006378:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	889b      	ldrh	r3, [r3, #4]
 800637e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006388:	2b40      	cmp	r3, #64	; 0x40
 800638a:	d007      	beq.n	800639c <USBD_StdEPReq+0x30>
 800638c:	2b40      	cmp	r3, #64	; 0x40
 800638e:	f200 817f 	bhi.w	8006690 <USBD_StdEPReq+0x324>
 8006392:	2b00      	cmp	r3, #0
 8006394:	d02a      	beq.n	80063ec <USBD_StdEPReq+0x80>
 8006396:	2b20      	cmp	r3, #32
 8006398:	f040 817a 	bne.w	8006690 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800639c:	7bbb      	ldrb	r3, [r7, #14]
 800639e:	4619      	mov	r1, r3
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7ff fe83 	bl	80060ac <USBD_CoreFindEP>
 80063a6:	4603      	mov	r3, r0
 80063a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063aa:	7b7b      	ldrb	r3, [r7, #13]
 80063ac:	2bff      	cmp	r3, #255	; 0xff
 80063ae:	f000 8174 	beq.w	800669a <USBD_StdEPReq+0x32e>
 80063b2:	7b7b      	ldrb	r3, [r7, #13]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f040 8170 	bne.w	800669a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80063ba:	7b7a      	ldrb	r2, [r7, #13]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80063c2:	7b7a      	ldrb	r2, [r7, #13]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	32ae      	adds	r2, #174	; 0xae
 80063c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f000 8163 	beq.w	800669a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80063d4:	7b7a      	ldrb	r2, [r7, #13]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	32ae      	adds	r2, #174	; 0xae
 80063da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	6839      	ldr	r1, [r7, #0]
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	4798      	blx	r3
 80063e6:	4603      	mov	r3, r0
 80063e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80063ea:	e156      	b.n	800669a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	785b      	ldrb	r3, [r3, #1]
 80063f0:	2b03      	cmp	r3, #3
 80063f2:	d008      	beq.n	8006406 <USBD_StdEPReq+0x9a>
 80063f4:	2b03      	cmp	r3, #3
 80063f6:	f300 8145 	bgt.w	8006684 <USBD_StdEPReq+0x318>
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f000 809b 	beq.w	8006536 <USBD_StdEPReq+0x1ca>
 8006400:	2b01      	cmp	r3, #1
 8006402:	d03c      	beq.n	800647e <USBD_StdEPReq+0x112>
 8006404:	e13e      	b.n	8006684 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b02      	cmp	r3, #2
 8006410:	d002      	beq.n	8006418 <USBD_StdEPReq+0xac>
 8006412:	2b03      	cmp	r3, #3
 8006414:	d016      	beq.n	8006444 <USBD_StdEPReq+0xd8>
 8006416:	e02c      	b.n	8006472 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006418:	7bbb      	ldrb	r3, [r7, #14]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d00d      	beq.n	800643a <USBD_StdEPReq+0xce>
 800641e:	7bbb      	ldrb	r3, [r7, #14]
 8006420:	2b80      	cmp	r3, #128	; 0x80
 8006422:	d00a      	beq.n	800643a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006424:	7bbb      	ldrb	r3, [r7, #14]
 8006426:	4619      	mov	r1, r3
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f001 f995 	bl	8007758 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800642e:	2180      	movs	r1, #128	; 0x80
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f001 f991 	bl	8007758 <USBD_LL_StallEP>
 8006436:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006438:	e020      	b.n	800647c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800643a:	6839      	ldr	r1, [r7, #0]
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 fc7a 	bl	8006d36 <USBD_CtlError>
              break;
 8006442:	e01b      	b.n	800647c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	885b      	ldrh	r3, [r3, #2]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10e      	bne.n	800646a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800644c:	7bbb      	ldrb	r3, [r7, #14]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00b      	beq.n	800646a <USBD_StdEPReq+0xfe>
 8006452:	7bbb      	ldrb	r3, [r7, #14]
 8006454:	2b80      	cmp	r3, #128	; 0x80
 8006456:	d008      	beq.n	800646a <USBD_StdEPReq+0xfe>
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	88db      	ldrh	r3, [r3, #6]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d104      	bne.n	800646a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006460:	7bbb      	ldrb	r3, [r7, #14]
 8006462:	4619      	mov	r1, r3
 8006464:	6878      	ldr	r0, [r7, #4]
 8006466:	f001 f977 	bl	8007758 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fd2e 	bl	8006ecc <USBD_CtlSendStatus>

              break;
 8006470:	e004      	b.n	800647c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006472:	6839      	ldr	r1, [r7, #0]
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fc5e 	bl	8006d36 <USBD_CtlError>
              break;
 800647a:	bf00      	nop
          }
          break;
 800647c:	e107      	b.n	800668e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b02      	cmp	r3, #2
 8006488:	d002      	beq.n	8006490 <USBD_StdEPReq+0x124>
 800648a:	2b03      	cmp	r3, #3
 800648c:	d016      	beq.n	80064bc <USBD_StdEPReq+0x150>
 800648e:	e04b      	b.n	8006528 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006490:	7bbb      	ldrb	r3, [r7, #14]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d00d      	beq.n	80064b2 <USBD_StdEPReq+0x146>
 8006496:	7bbb      	ldrb	r3, [r7, #14]
 8006498:	2b80      	cmp	r3, #128	; 0x80
 800649a:	d00a      	beq.n	80064b2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800649c:	7bbb      	ldrb	r3, [r7, #14]
 800649e:	4619      	mov	r1, r3
 80064a0:	6878      	ldr	r0, [r7, #4]
 80064a2:	f001 f959 	bl	8007758 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80064a6:	2180      	movs	r1, #128	; 0x80
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f001 f955 	bl	8007758 <USBD_LL_StallEP>
 80064ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80064b0:	e040      	b.n	8006534 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80064b2:	6839      	ldr	r1, [r7, #0]
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fc3e 	bl	8006d36 <USBD_CtlError>
              break;
 80064ba:	e03b      	b.n	8006534 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	885b      	ldrh	r3, [r3, #2]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d136      	bne.n	8006532 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80064c4:	7bbb      	ldrb	r3, [r7, #14]
 80064c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d004      	beq.n	80064d8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80064ce:	7bbb      	ldrb	r3, [r7, #14]
 80064d0:	4619      	mov	r1, r3
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f001 f95f 	bl	8007796 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 fcf7 	bl	8006ecc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80064de:	7bbb      	ldrb	r3, [r7, #14]
 80064e0:	4619      	mov	r1, r3
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7ff fde2 	bl	80060ac <USBD_CoreFindEP>
 80064e8:	4603      	mov	r3, r0
 80064ea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064ec:	7b7b      	ldrb	r3, [r7, #13]
 80064ee:	2bff      	cmp	r3, #255	; 0xff
 80064f0:	d01f      	beq.n	8006532 <USBD_StdEPReq+0x1c6>
 80064f2:	7b7b      	ldrb	r3, [r7, #13]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d11c      	bne.n	8006532 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80064f8:	7b7a      	ldrb	r2, [r7, #13]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006500:	7b7a      	ldrb	r2, [r7, #13]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	32ae      	adds	r2, #174	; 0xae
 8006506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d010      	beq.n	8006532 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006510:	7b7a      	ldrb	r2, [r7, #13]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	32ae      	adds	r2, #174	; 0xae
 8006516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	6839      	ldr	r1, [r7, #0]
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	4798      	blx	r3
 8006522:	4603      	mov	r3, r0
 8006524:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006526:	e004      	b.n	8006532 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006528:	6839      	ldr	r1, [r7, #0]
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 fc03 	bl	8006d36 <USBD_CtlError>
              break;
 8006530:	e000      	b.n	8006534 <USBD_StdEPReq+0x1c8>
              break;
 8006532:	bf00      	nop
          }
          break;
 8006534:	e0ab      	b.n	800668e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b02      	cmp	r3, #2
 8006540:	d002      	beq.n	8006548 <USBD_StdEPReq+0x1dc>
 8006542:	2b03      	cmp	r3, #3
 8006544:	d032      	beq.n	80065ac <USBD_StdEPReq+0x240>
 8006546:	e097      	b.n	8006678 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006548:	7bbb      	ldrb	r3, [r7, #14]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d007      	beq.n	800655e <USBD_StdEPReq+0x1f2>
 800654e:	7bbb      	ldrb	r3, [r7, #14]
 8006550:	2b80      	cmp	r3, #128	; 0x80
 8006552:	d004      	beq.n	800655e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006554:	6839      	ldr	r1, [r7, #0]
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 fbed 	bl	8006d36 <USBD_CtlError>
                break;
 800655c:	e091      	b.n	8006682 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800655e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006562:	2b00      	cmp	r3, #0
 8006564:	da0b      	bge.n	800657e <USBD_StdEPReq+0x212>
 8006566:	7bbb      	ldrb	r3, [r7, #14]
 8006568:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800656c:	4613      	mov	r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	3310      	adds	r3, #16
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	4413      	add	r3, r2
 800657a:	3304      	adds	r3, #4
 800657c:	e00b      	b.n	8006596 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800657e:	7bbb      	ldrb	r3, [r7, #14]
 8006580:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006584:	4613      	mov	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	4413      	add	r3, r2
 8006594:	3304      	adds	r3, #4
 8006596:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	2200      	movs	r2, #0
 800659c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	2202      	movs	r2, #2
 80065a2:	4619      	mov	r1, r3
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 fc37 	bl	8006e18 <USBD_CtlSendData>
              break;
 80065aa:	e06a      	b.n	8006682 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80065ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	da11      	bge.n	80065d8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80065b4:	7bbb      	ldrb	r3, [r7, #14]
 80065b6:	f003 020f 	and.w	r2, r3, #15
 80065ba:	6879      	ldr	r1, [r7, #4]
 80065bc:	4613      	mov	r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4413      	add	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	440b      	add	r3, r1
 80065c6:	3324      	adds	r3, #36	; 0x24
 80065c8:	881b      	ldrh	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d117      	bne.n	80065fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80065ce:	6839      	ldr	r1, [r7, #0]
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 fbb0 	bl	8006d36 <USBD_CtlError>
                  break;
 80065d6:	e054      	b.n	8006682 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80065d8:	7bbb      	ldrb	r3, [r7, #14]
 80065da:	f003 020f 	and.w	r2, r3, #15
 80065de:	6879      	ldr	r1, [r7, #4]
 80065e0:	4613      	mov	r3, r2
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	4413      	add	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	440b      	add	r3, r1
 80065ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80065ee:	881b      	ldrh	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d104      	bne.n	80065fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80065f4:	6839      	ldr	r1, [r7, #0]
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fb9d 	bl	8006d36 <USBD_CtlError>
                  break;
 80065fc:	e041      	b.n	8006682 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80065fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006602:	2b00      	cmp	r3, #0
 8006604:	da0b      	bge.n	800661e <USBD_StdEPReq+0x2b2>
 8006606:	7bbb      	ldrb	r3, [r7, #14]
 8006608:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800660c:	4613      	mov	r3, r2
 800660e:	009b      	lsls	r3, r3, #2
 8006610:	4413      	add	r3, r2
 8006612:	009b      	lsls	r3, r3, #2
 8006614:	3310      	adds	r3, #16
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	4413      	add	r3, r2
 800661a:	3304      	adds	r3, #4
 800661c:	e00b      	b.n	8006636 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800661e:	7bbb      	ldrb	r3, [r7, #14]
 8006620:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006624:	4613      	mov	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	4413      	add	r3, r2
 8006634:	3304      	adds	r3, #4
 8006636:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006638:	7bbb      	ldrb	r3, [r7, #14]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d002      	beq.n	8006644 <USBD_StdEPReq+0x2d8>
 800663e:	7bbb      	ldrb	r3, [r7, #14]
 8006640:	2b80      	cmp	r3, #128	; 0x80
 8006642:	d103      	bne.n	800664c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	2200      	movs	r2, #0
 8006648:	601a      	str	r2, [r3, #0]
 800664a:	e00e      	b.n	800666a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800664c:	7bbb      	ldrb	r3, [r7, #14]
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f001 f8bf 	bl	80077d4 <USBD_LL_IsStallEP>
 8006656:	4603      	mov	r3, r0
 8006658:	2b00      	cmp	r3, #0
 800665a:	d003      	beq.n	8006664 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	2201      	movs	r2, #1
 8006660:	601a      	str	r2, [r3, #0]
 8006662:	e002      	b.n	800666a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2200      	movs	r2, #0
 8006668:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	2202      	movs	r2, #2
 800666e:	4619      	mov	r1, r3
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 fbd1 	bl	8006e18 <USBD_CtlSendData>
              break;
 8006676:	e004      	b.n	8006682 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006678:	6839      	ldr	r1, [r7, #0]
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fb5b 	bl	8006d36 <USBD_CtlError>
              break;
 8006680:	bf00      	nop
          }
          break;
 8006682:	e004      	b.n	800668e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006684:	6839      	ldr	r1, [r7, #0]
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 fb55 	bl	8006d36 <USBD_CtlError>
          break;
 800668c:	bf00      	nop
      }
      break;
 800668e:	e005      	b.n	800669c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006690:	6839      	ldr	r1, [r7, #0]
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f000 fb4f 	bl	8006d36 <USBD_CtlError>
      break;
 8006698:	e000      	b.n	800669c <USBD_StdEPReq+0x330>
      break;
 800669a:	bf00      	nop
  }

  return ret;
 800669c:	7bfb      	ldrb	r3, [r7, #15]
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
	...

080066a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80066b2:	2300      	movs	r3, #0
 80066b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80066b6:	2300      	movs	r3, #0
 80066b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80066ba:	2300      	movs	r3, #0
 80066bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	885b      	ldrh	r3, [r3, #2]
 80066c2:	0a1b      	lsrs	r3, r3, #8
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	3b01      	subs	r3, #1
 80066c8:	2b06      	cmp	r3, #6
 80066ca:	f200 8128 	bhi.w	800691e <USBD_GetDescriptor+0x276>
 80066ce:	a201      	add	r2, pc, #4	; (adr r2, 80066d4 <USBD_GetDescriptor+0x2c>)
 80066d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d4:	080066f1 	.word	0x080066f1
 80066d8:	08006709 	.word	0x08006709
 80066dc:	08006749 	.word	0x08006749
 80066e0:	0800691f 	.word	0x0800691f
 80066e4:	0800691f 	.word	0x0800691f
 80066e8:	080068bf 	.word	0x080068bf
 80066ec:	080068eb 	.word	0x080068eb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	7c12      	ldrb	r2, [r2, #16]
 80066fc:	f107 0108 	add.w	r1, r7, #8
 8006700:	4610      	mov	r0, r2
 8006702:	4798      	blx	r3
 8006704:	60f8      	str	r0, [r7, #12]
      break;
 8006706:	e112      	b.n	800692e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	7c1b      	ldrb	r3, [r3, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10d      	bne.n	800672c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006718:	f107 0208 	add.w	r2, r7, #8
 800671c:	4610      	mov	r0, r2
 800671e:	4798      	blx	r3
 8006720:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	3301      	adds	r3, #1
 8006726:	2202      	movs	r2, #2
 8006728:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800672a:	e100      	b.n	800692e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006734:	f107 0208 	add.w	r2, r7, #8
 8006738:	4610      	mov	r0, r2
 800673a:	4798      	blx	r3
 800673c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	3301      	adds	r3, #1
 8006742:	2202      	movs	r2, #2
 8006744:	701a      	strb	r2, [r3, #0]
      break;
 8006746:	e0f2      	b.n	800692e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	885b      	ldrh	r3, [r3, #2]
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b05      	cmp	r3, #5
 8006750:	f200 80ac 	bhi.w	80068ac <USBD_GetDescriptor+0x204>
 8006754:	a201      	add	r2, pc, #4	; (adr r2, 800675c <USBD_GetDescriptor+0xb4>)
 8006756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675a:	bf00      	nop
 800675c:	08006775 	.word	0x08006775
 8006760:	080067a9 	.word	0x080067a9
 8006764:	080067dd 	.word	0x080067dd
 8006768:	08006811 	.word	0x08006811
 800676c:	08006845 	.word	0x08006845
 8006770:	08006879 	.word	0x08006879
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00b      	beq.n	8006798 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	7c12      	ldrb	r2, [r2, #16]
 800678c:	f107 0108 	add.w	r1, r7, #8
 8006790:	4610      	mov	r0, r2
 8006792:	4798      	blx	r3
 8006794:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006796:	e091      	b.n	80068bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006798:	6839      	ldr	r1, [r7, #0]
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 facb 	bl	8006d36 <USBD_CtlError>
            err++;
 80067a0:	7afb      	ldrb	r3, [r7, #11]
 80067a2:	3301      	adds	r3, #1
 80067a4:	72fb      	strb	r3, [r7, #11]
          break;
 80067a6:	e089      	b.n	80068bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00b      	beq.n	80067cc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	7c12      	ldrb	r2, [r2, #16]
 80067c0:	f107 0108 	add.w	r1, r7, #8
 80067c4:	4610      	mov	r0, r2
 80067c6:	4798      	blx	r3
 80067c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067ca:	e077      	b.n	80068bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067cc:	6839      	ldr	r1, [r7, #0]
 80067ce:	6878      	ldr	r0, [r7, #4]
 80067d0:	f000 fab1 	bl	8006d36 <USBD_CtlError>
            err++;
 80067d4:	7afb      	ldrb	r3, [r7, #11]
 80067d6:	3301      	adds	r3, #1
 80067d8:	72fb      	strb	r3, [r7, #11]
          break;
 80067da:	e06f      	b.n	80068bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d00b      	beq.n	8006800 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067ee:	68db      	ldr	r3, [r3, #12]
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	7c12      	ldrb	r2, [r2, #16]
 80067f4:	f107 0108 	add.w	r1, r7, #8
 80067f8:	4610      	mov	r0, r2
 80067fa:	4798      	blx	r3
 80067fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067fe:	e05d      	b.n	80068bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fa97 	bl	8006d36 <USBD_CtlError>
            err++;
 8006808:	7afb      	ldrb	r3, [r7, #11]
 800680a:	3301      	adds	r3, #1
 800680c:	72fb      	strb	r3, [r7, #11]
          break;
 800680e:	e055      	b.n	80068bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006816:	691b      	ldr	r3, [r3, #16]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00b      	beq.n	8006834 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	687a      	ldr	r2, [r7, #4]
 8006826:	7c12      	ldrb	r2, [r2, #16]
 8006828:	f107 0108 	add.w	r1, r7, #8
 800682c:	4610      	mov	r0, r2
 800682e:	4798      	blx	r3
 8006830:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006832:	e043      	b.n	80068bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006834:	6839      	ldr	r1, [r7, #0]
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 fa7d 	bl	8006d36 <USBD_CtlError>
            err++;
 800683c:	7afb      	ldrb	r3, [r7, #11]
 800683e:	3301      	adds	r3, #1
 8006840:	72fb      	strb	r3, [r7, #11]
          break;
 8006842:	e03b      	b.n	80068bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00b      	beq.n	8006868 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006856:	695b      	ldr	r3, [r3, #20]
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	7c12      	ldrb	r2, [r2, #16]
 800685c:	f107 0108 	add.w	r1, r7, #8
 8006860:	4610      	mov	r0, r2
 8006862:	4798      	blx	r3
 8006864:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006866:	e029      	b.n	80068bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006868:	6839      	ldr	r1, [r7, #0]
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 fa63 	bl	8006d36 <USBD_CtlError>
            err++;
 8006870:	7afb      	ldrb	r3, [r7, #11]
 8006872:	3301      	adds	r3, #1
 8006874:	72fb      	strb	r3, [r7, #11]
          break;
 8006876:	e021      	b.n	80068bc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00b      	beq.n	800689c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800688a:	699b      	ldr	r3, [r3, #24]
 800688c:	687a      	ldr	r2, [r7, #4]
 800688e:	7c12      	ldrb	r2, [r2, #16]
 8006890:	f107 0108 	add.w	r1, r7, #8
 8006894:	4610      	mov	r0, r2
 8006896:	4798      	blx	r3
 8006898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800689a:	e00f      	b.n	80068bc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800689c:	6839      	ldr	r1, [r7, #0]
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 fa49 	bl	8006d36 <USBD_CtlError>
            err++;
 80068a4:	7afb      	ldrb	r3, [r7, #11]
 80068a6:	3301      	adds	r3, #1
 80068a8:	72fb      	strb	r3, [r7, #11]
          break;
 80068aa:	e007      	b.n	80068bc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80068ac:	6839      	ldr	r1, [r7, #0]
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fa41 	bl	8006d36 <USBD_CtlError>
          err++;
 80068b4:	7afb      	ldrb	r3, [r7, #11]
 80068b6:	3301      	adds	r3, #1
 80068b8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80068ba:	bf00      	nop
      }
      break;
 80068bc:	e037      	b.n	800692e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	7c1b      	ldrb	r3, [r3, #16]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d109      	bne.n	80068da <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ce:	f107 0208 	add.w	r2, r7, #8
 80068d2:	4610      	mov	r0, r2
 80068d4:	4798      	blx	r3
 80068d6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80068d8:	e029      	b.n	800692e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80068da:	6839      	ldr	r1, [r7, #0]
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 fa2a 	bl	8006d36 <USBD_CtlError>
        err++;
 80068e2:	7afb      	ldrb	r3, [r7, #11]
 80068e4:	3301      	adds	r3, #1
 80068e6:	72fb      	strb	r3, [r7, #11]
      break;
 80068e8:	e021      	b.n	800692e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	7c1b      	ldrb	r3, [r3, #16]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d10d      	bne.n	800690e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fa:	f107 0208 	add.w	r2, r7, #8
 80068fe:	4610      	mov	r0, r2
 8006900:	4798      	blx	r3
 8006902:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	3301      	adds	r3, #1
 8006908:	2207      	movs	r2, #7
 800690a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800690c:	e00f      	b.n	800692e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800690e:	6839      	ldr	r1, [r7, #0]
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 fa10 	bl	8006d36 <USBD_CtlError>
        err++;
 8006916:	7afb      	ldrb	r3, [r7, #11]
 8006918:	3301      	adds	r3, #1
 800691a:	72fb      	strb	r3, [r7, #11]
      break;
 800691c:	e007      	b.n	800692e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800691e:	6839      	ldr	r1, [r7, #0]
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fa08 	bl	8006d36 <USBD_CtlError>
      err++;
 8006926:	7afb      	ldrb	r3, [r7, #11]
 8006928:	3301      	adds	r3, #1
 800692a:	72fb      	strb	r3, [r7, #11]
      break;
 800692c:	bf00      	nop
  }

  if (err != 0U)
 800692e:	7afb      	ldrb	r3, [r7, #11]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d11e      	bne.n	8006972 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	88db      	ldrh	r3, [r3, #6]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d016      	beq.n	800696a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800693c:	893b      	ldrh	r3, [r7, #8]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00e      	beq.n	8006960 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	88da      	ldrh	r2, [r3, #6]
 8006946:	893b      	ldrh	r3, [r7, #8]
 8006948:	4293      	cmp	r3, r2
 800694a:	bf28      	it	cs
 800694c:	4613      	movcs	r3, r2
 800694e:	b29b      	uxth	r3, r3
 8006950:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006952:	893b      	ldrh	r3, [r7, #8]
 8006954:	461a      	mov	r2, r3
 8006956:	68f9      	ldr	r1, [r7, #12]
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f000 fa5d 	bl	8006e18 <USBD_CtlSendData>
 800695e:	e009      	b.n	8006974 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006960:	6839      	ldr	r1, [r7, #0]
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 f9e7 	bl	8006d36 <USBD_CtlError>
 8006968:	e004      	b.n	8006974 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 faae 	bl	8006ecc <USBD_CtlSendStatus>
 8006970:	e000      	b.n	8006974 <USBD_GetDescriptor+0x2cc>
    return;
 8006972:	bf00      	nop
  }
}
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop

0800697c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	889b      	ldrh	r3, [r3, #4]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d131      	bne.n	80069f2 <USBD_SetAddress+0x76>
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	88db      	ldrh	r3, [r3, #6]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d12d      	bne.n	80069f2 <USBD_SetAddress+0x76>
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	885b      	ldrh	r3, [r3, #2]
 800699a:	2b7f      	cmp	r3, #127	; 0x7f
 800699c:	d829      	bhi.n	80069f2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	885b      	ldrh	r3, [r3, #2]
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069a8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b03      	cmp	r3, #3
 80069b4:	d104      	bne.n	80069c0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f9bc 	bl	8006d36 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069be:	e01d      	b.n	80069fc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	7bfa      	ldrb	r2, [r7, #15]
 80069c4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
 80069ca:	4619      	mov	r1, r3
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	f000 ff2d 	bl	800782c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 fa7a 	bl	8006ecc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80069d8:	7bfb      	ldrb	r3, [r7, #15]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d004      	beq.n	80069e8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2202      	movs	r2, #2
 80069e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069e6:	e009      	b.n	80069fc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069f0:	e004      	b.n	80069fc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80069f2:	6839      	ldr	r1, [r7, #0]
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f000 f99e 	bl	8006d36 <USBD_CtlError>
  }
}
 80069fa:	bf00      	nop
 80069fc:	bf00      	nop
 80069fe:	3710      	adds	r7, #16
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
 8006a0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a0e:	2300      	movs	r3, #0
 8006a10:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	885b      	ldrh	r3, [r3, #2]
 8006a16:	b2da      	uxtb	r2, r3
 8006a18:	4b4e      	ldr	r3, [pc, #312]	; (8006b54 <USBD_SetConfig+0x150>)
 8006a1a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006a1c:	4b4d      	ldr	r3, [pc, #308]	; (8006b54 <USBD_SetConfig+0x150>)
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d905      	bls.n	8006a30 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006a24:	6839      	ldr	r1, [r7, #0]
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f985 	bl	8006d36 <USBD_CtlError>
    return USBD_FAIL;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e08c      	b.n	8006b4a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d002      	beq.n	8006a42 <USBD_SetConfig+0x3e>
 8006a3c:	2b03      	cmp	r3, #3
 8006a3e:	d029      	beq.n	8006a94 <USBD_SetConfig+0x90>
 8006a40:	e075      	b.n	8006b2e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006a42:	4b44      	ldr	r3, [pc, #272]	; (8006b54 <USBD_SetConfig+0x150>)
 8006a44:	781b      	ldrb	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d020      	beq.n	8006a8c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006a4a:	4b42      	ldr	r3, [pc, #264]	; (8006b54 <USBD_SetConfig+0x150>)
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a54:	4b3f      	ldr	r3, [pc, #252]	; (8006b54 <USBD_SetConfig+0x150>)
 8006a56:	781b      	ldrb	r3, [r3, #0]
 8006a58:	4619      	mov	r1, r3
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f7fe ffe7 	bl	8005a2e <USBD_SetClassConfig>
 8006a60:	4603      	mov	r3, r0
 8006a62:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d008      	beq.n	8006a7c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006a6a:	6839      	ldr	r1, [r7, #0]
 8006a6c:	6878      	ldr	r0, [r7, #4]
 8006a6e:	f000 f962 	bl	8006d36 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2202      	movs	r2, #2
 8006a76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006a7a:	e065      	b.n	8006b48 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fa25 	bl	8006ecc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2203      	movs	r2, #3
 8006a86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006a8a:	e05d      	b.n	8006b48 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fa1d 	bl	8006ecc <USBD_CtlSendStatus>
      break;
 8006a92:	e059      	b.n	8006b48 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006a94:	4b2f      	ldr	r3, [pc, #188]	; (8006b54 <USBD_SetConfig+0x150>)
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d112      	bne.n	8006ac2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006aa4:	4b2b      	ldr	r3, [pc, #172]	; (8006b54 <USBD_SetConfig+0x150>)
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006aae:	4b29      	ldr	r3, [pc, #164]	; (8006b54 <USBD_SetConfig+0x150>)
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f7fe ffd6 	bl	8005a66 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 fa06 	bl	8006ecc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ac0:	e042      	b.n	8006b48 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006ac2:	4b24      	ldr	r3, [pc, #144]	; (8006b54 <USBD_SetConfig+0x150>)
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d02a      	beq.n	8006b26 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	b2db      	uxtb	r3, r3
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f7fe ffc4 	bl	8005a66 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006ade:	4b1d      	ldr	r3, [pc, #116]	; (8006b54 <USBD_SetConfig+0x150>)
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ae8:	4b1a      	ldr	r3, [pc, #104]	; (8006b54 <USBD_SetConfig+0x150>)
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	4619      	mov	r1, r3
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7fe ff9d 	bl	8005a2e <USBD_SetClassConfig>
 8006af4:	4603      	mov	r3, r0
 8006af6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00f      	beq.n	8006b1e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006afe:	6839      	ldr	r1, [r7, #0]
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f918 	bl	8006d36 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	b2db      	uxtb	r3, r3
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7fe ffa9 	bl	8005a66 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2202      	movs	r2, #2
 8006b18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006b1c:	e014      	b.n	8006b48 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006b1e:	6878      	ldr	r0, [r7, #4]
 8006b20:	f000 f9d4 	bl	8006ecc <USBD_CtlSendStatus>
      break;
 8006b24:	e010      	b.n	8006b48 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f9d0 	bl	8006ecc <USBD_CtlSendStatus>
      break;
 8006b2c:	e00c      	b.n	8006b48 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006b2e:	6839      	ldr	r1, [r7, #0]
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f900 	bl	8006d36 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b36:	4b07      	ldr	r3, [pc, #28]	; (8006b54 <USBD_SetConfig+0x150>)
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f7fe ff92 	bl	8005a66 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006b42:	2303      	movs	r3, #3
 8006b44:	73fb      	strb	r3, [r7, #15]
      break;
 8006b46:	bf00      	nop
  }

  return ret;
 8006b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	200001c8 	.word	0x200001c8

08006b58 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	88db      	ldrh	r3, [r3, #6]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d004      	beq.n	8006b74 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006b6a:	6839      	ldr	r1, [r7, #0]
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f000 f8e2 	bl	8006d36 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006b72:	e023      	b.n	8006bbc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	2b02      	cmp	r3, #2
 8006b7e:	dc02      	bgt.n	8006b86 <USBD_GetConfig+0x2e>
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	dc03      	bgt.n	8006b8c <USBD_GetConfig+0x34>
 8006b84:	e015      	b.n	8006bb2 <USBD_GetConfig+0x5a>
 8006b86:	2b03      	cmp	r3, #3
 8006b88:	d00b      	beq.n	8006ba2 <USBD_GetConfig+0x4a>
 8006b8a:	e012      	b.n	8006bb2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	3308      	adds	r3, #8
 8006b96:	2201      	movs	r2, #1
 8006b98:	4619      	mov	r1, r3
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f93c 	bl	8006e18 <USBD_CtlSendData>
        break;
 8006ba0:	e00c      	b.n	8006bbc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	3304      	adds	r3, #4
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	4619      	mov	r1, r3
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f934 	bl	8006e18 <USBD_CtlSendData>
        break;
 8006bb0:	e004      	b.n	8006bbc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006bb2:	6839      	ldr	r1, [r7, #0]
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 f8be 	bl	8006d36 <USBD_CtlError>
        break;
 8006bba:	bf00      	nop
}
 8006bbc:	bf00      	nop
 8006bbe:	3708      	adds	r7, #8
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bd4:	b2db      	uxtb	r3, r3
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d81e      	bhi.n	8006c1a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	88db      	ldrh	r3, [r3, #6]
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d004      	beq.n	8006bee <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006be4:	6839      	ldr	r1, [r7, #0]
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f8a5 	bl	8006d36 <USBD_CtlError>
        break;
 8006bec:	e01a      	b.n	8006c24 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d005      	beq.n	8006c0a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	f043 0202 	orr.w	r2, r3, #2
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	330c      	adds	r3, #12
 8006c0e:	2202      	movs	r2, #2
 8006c10:	4619      	mov	r1, r3
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f000 f900 	bl	8006e18 <USBD_CtlSendData>
      break;
 8006c18:	e004      	b.n	8006c24 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006c1a:	6839      	ldr	r1, [r7, #0]
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 f88a 	bl	8006d36 <USBD_CtlError>
      break;
 8006c22:	bf00      	nop
  }
}
 8006c24:	bf00      	nop
 8006c26:	3708      	adds	r7, #8
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	885b      	ldrh	r3, [r3, #2]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d107      	bne.n	8006c4e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 f940 	bl	8006ecc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006c4c:	e013      	b.n	8006c76 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	885b      	ldrh	r3, [r3, #2]
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d10b      	bne.n	8006c6e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	889b      	ldrh	r3, [r3, #4]
 8006c5a:	0a1b      	lsrs	r3, r3, #8
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	b2da      	uxtb	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 f930 	bl	8006ecc <USBD_CtlSendStatus>
}
 8006c6c:	e003      	b.n	8006c76 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006c6e:	6839      	ldr	r1, [r7, #0]
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 f860 	bl	8006d36 <USBD_CtlError>
}
 8006c76:	bf00      	nop
 8006c78:	3708      	adds	r7, #8
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b082      	sub	sp, #8
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
 8006c86:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	3b01      	subs	r3, #1
 8006c92:	2b02      	cmp	r3, #2
 8006c94:	d80b      	bhi.n	8006cae <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	885b      	ldrh	r3, [r3, #2]
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d10c      	bne.n	8006cb8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f910 	bl	8006ecc <USBD_CtlSendStatus>
      }
      break;
 8006cac:	e004      	b.n	8006cb8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006cae:	6839      	ldr	r1, [r7, #0]
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f000 f840 	bl	8006d36 <USBD_CtlError>
      break;
 8006cb6:	e000      	b.n	8006cba <USBD_ClrFeature+0x3c>
      break;
 8006cb8:	bf00      	nop
  }
}
 8006cba:	bf00      	nop
 8006cbc:	3708      	adds	r7, #8
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b084      	sub	sp, #16
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	781a      	ldrb	r2, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	781a      	ldrb	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	f7ff fa41 	bl	8006174 <SWAPBYTE>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	3301      	adds	r3, #1
 8006d04:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006d06:	68f8      	ldr	r0, [r7, #12]
 8006d08:	f7ff fa34 	bl	8006174 <SWAPBYTE>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	461a      	mov	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	3301      	adds	r3, #1
 8006d18:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	3301      	adds	r3, #1
 8006d1e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f7ff fa27 	bl	8006174 <SWAPBYTE>
 8006d26:	4603      	mov	r3, r0
 8006d28:	461a      	mov	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	80da      	strh	r2, [r3, #6]
}
 8006d2e:	bf00      	nop
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	b082      	sub	sp, #8
 8006d3a:	af00      	add	r7, sp, #0
 8006d3c:	6078      	str	r0, [r7, #4]
 8006d3e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d40:	2180      	movs	r1, #128	; 0x80
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fd08 	bl	8007758 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006d48:	2100      	movs	r1, #0
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 fd04 	bl	8007758 <USBD_LL_StallEP>
}
 8006d50:	bf00      	nop
 8006d52:	3708      	adds	r7, #8
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006d64:	2300      	movs	r3, #0
 8006d66:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d036      	beq.n	8006ddc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006d72:	6938      	ldr	r0, [r7, #16]
 8006d74:	f000 f836 	bl	8006de4 <USBD_GetLen>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	005b      	lsls	r3, r3, #1
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006d86:	7dfb      	ldrb	r3, [r7, #23]
 8006d88:	68ba      	ldr	r2, [r7, #8]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	7812      	ldrb	r2, [r2, #0]
 8006d90:	701a      	strb	r2, [r3, #0]
  idx++;
 8006d92:	7dfb      	ldrb	r3, [r7, #23]
 8006d94:	3301      	adds	r3, #1
 8006d96:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006d98:	7dfb      	ldrb	r3, [r7, #23]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	2203      	movs	r2, #3
 8006da0:	701a      	strb	r2, [r3, #0]
  idx++;
 8006da2:	7dfb      	ldrb	r3, [r7, #23]
 8006da4:	3301      	adds	r3, #1
 8006da6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006da8:	e013      	b.n	8006dd2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006daa:	7dfb      	ldrb	r3, [r7, #23]
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	4413      	add	r3, r2
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	7812      	ldrb	r2, [r2, #0]
 8006db4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	3301      	adds	r3, #1
 8006dba:	613b      	str	r3, [r7, #16]
    idx++;
 8006dbc:	7dfb      	ldrb	r3, [r7, #23]
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006dc2:	7dfb      	ldrb	r3, [r7, #23]
 8006dc4:	68ba      	ldr	r2, [r7, #8]
 8006dc6:	4413      	add	r3, r2
 8006dc8:	2200      	movs	r2, #0
 8006dca:	701a      	strb	r2, [r3, #0]
    idx++;
 8006dcc:	7dfb      	ldrb	r3, [r7, #23]
 8006dce:	3301      	adds	r3, #1
 8006dd0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1e7      	bne.n	8006daa <USBD_GetString+0x52>
 8006dda:	e000      	b.n	8006dde <USBD_GetString+0x86>
    return;
 8006ddc:	bf00      	nop
  }
}
 8006dde:	3718      	adds	r7, #24
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006dec:	2300      	movs	r3, #0
 8006dee:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006df4:	e005      	b.n	8006e02 <USBD_GetLen+0x1e>
  {
    len++;
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1f5      	bne.n	8006df6 <USBD_GetLen+0x12>
  }

  return len;
 8006e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3714      	adds	r7, #20
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2202      	movs	r2, #2
 8006e28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f000 fd13 	bl	800786a <USBD_LL_Transmit>

  return USBD_OK;
 8006e44:	2300      	movs	r3, #0
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3710      	adds	r7, #16
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}

08006e4e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006e4e:	b580      	push	{r7, lr}
 8006e50:	b084      	sub	sp, #16
 8006e52:	af00      	add	r7, sp, #0
 8006e54:	60f8      	str	r0, [r7, #12]
 8006e56:	60b9      	str	r1, [r7, #8]
 8006e58:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	68ba      	ldr	r2, [r7, #8]
 8006e5e:	2100      	movs	r1, #0
 8006e60:	68f8      	ldr	r0, [r7, #12]
 8006e62:	f000 fd02 	bl	800786a <USBD_LL_Transmit>

  return USBD_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3710      	adds	r7, #16
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2203      	movs	r2, #3
 8006e80:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	68ba      	ldr	r2, [r7, #8]
 8006e98:	2100      	movs	r1, #0
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f000 fd06 	bl	80078ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}

08006eaa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006eaa:	b580      	push	{r7, lr}
 8006eac:	b084      	sub	sp, #16
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	60f8      	str	r0, [r7, #12]
 8006eb2:	60b9      	str	r1, [r7, #8]
 8006eb4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	2100      	movs	r1, #0
 8006ebc:	68f8      	ldr	r0, [r7, #12]
 8006ebe:	f000 fcf5 	bl	80078ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ec2:	2300      	movs	r3, #0
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2204      	movs	r2, #4
 8006ed8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006edc:	2300      	movs	r3, #0
 8006ede:	2200      	movs	r2, #0
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fcc1 	bl	800786a <USBD_LL_Transmit>

  return USBD_OK;
 8006ee8:	2300      	movs	r3, #0
}
 8006eea:	4618      	mov	r0, r3
 8006eec:	3708      	adds	r7, #8
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b082      	sub	sp, #8
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2205      	movs	r2, #5
 8006efe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006f02:	2300      	movs	r3, #0
 8006f04:	2200      	movs	r2, #0
 8006f06:	2100      	movs	r1, #0
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 fccf 	bl	80078ac <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3708      	adds	r7, #8
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	4912      	ldr	r1, [pc, #72]	; (8006f68 <MX_USB_DEVICE_Init+0x50>)
 8006f20:	4812      	ldr	r0, [pc, #72]	; (8006f6c <MX_USB_DEVICE_Init+0x54>)
 8006f22:	f7fe fd07 	bl	8005934 <USBD_Init>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d001      	beq.n	8006f30 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006f2c:	f7f9 fbbc 	bl	80006a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006f30:	490f      	ldr	r1, [pc, #60]	; (8006f70 <MX_USB_DEVICE_Init+0x58>)
 8006f32:	480e      	ldr	r0, [pc, #56]	; (8006f6c <MX_USB_DEVICE_Init+0x54>)
 8006f34:	f7fe fd2e 	bl	8005994 <USBD_RegisterClass>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d001      	beq.n	8006f42 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006f3e:	f7f9 fbb3 	bl	80006a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006f42:	490c      	ldr	r1, [pc, #48]	; (8006f74 <MX_USB_DEVICE_Init+0x5c>)
 8006f44:	4809      	ldr	r0, [pc, #36]	; (8006f6c <MX_USB_DEVICE_Init+0x54>)
 8006f46:	f7fe fc1f 	bl	8005788 <USBD_CDC_RegisterInterface>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d001      	beq.n	8006f54 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006f50:	f7f9 fbaa 	bl	80006a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006f54:	4805      	ldr	r0, [pc, #20]	; (8006f6c <MX_USB_DEVICE_Init+0x54>)
 8006f56:	f7fe fd53 	bl	8005a00 <USBD_Start>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d001      	beq.n	8006f64 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006f60:	f7f9 fba2 	bl	80006a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006f64:	bf00      	nop
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	200000ac 	.word	0x200000ac
 8006f6c:	200001cc 	.word	0x200001cc
 8006f70:	20000018 	.word	0x20000018
 8006f74:	20000098 	.word	0x20000098

08006f78 <ProcessReceivedData>:
  * @{
  */

/* USER CODE BEGIN PRIVATE_MACRO */
void ProcessReceivedData(uint8_t* Buf, uint32_t Len)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
    char receivedString[16] = {0}; // Buffer for string (up to 15 characters + 1 for 0)
 8006f82:	2300      	movs	r3, #0
 8006f84:	60bb      	str	r3, [r7, #8]
 8006f86:	f107 030c 	add.w	r3, r7, #12
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	601a      	str	r2, [r3, #0]
 8006f8e:	605a      	str	r2, [r3, #4]
 8006f90:	609a      	str	r2, [r3, #8]
    if (Len < sizeof(receivedString)) // Check that the data length is within buffer
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b0f      	cmp	r3, #15
 8006f96:	d815      	bhi.n	8006fc4 <ProcessReceivedData+0x4c>
    {
        memcpy(receivedString, Buf, Len); // Copy data to string
 8006f98:	f107 0308 	add.w	r3, r7, #8
 8006f9c:	683a      	ldr	r2, [r7, #0]
 8006f9e:	6879      	ldr	r1, [r7, #4]
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f000 fd29 	bl	80079f8 <memcpy>
        receivedString[Len] = '\0'; // End string with 0
 8006fa6:	f107 0208 	add.w	r2, r7, #8
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	4413      	add	r3, r2
 8006fae:	2200      	movs	r2, #0
 8006fb0:	701a      	strb	r2, [r3, #0]

        // Convert string to number
        receivedValue = atoi(receivedString);
 8006fb2:	f107 0308 	add.w	r3, r7, #8
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 fcf0 	bl	800799c <atoi>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	b21a      	sxth	r2, r3
 8006fc0:	4b02      	ldr	r3, [pc, #8]	; (8006fcc <ProcessReceivedData+0x54>)
 8006fc2:	801a      	strh	r2, [r3, #0]
    }
}
 8006fc4:	bf00      	nop
 8006fc6:	3718      	adds	r7, #24
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}
 8006fcc:	200004a8 	.word	0x200004a8

08006fd0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	4905      	ldr	r1, [pc, #20]	; (8006fec <CDC_Init_FS+0x1c>)
 8006fd8:	4805      	ldr	r0, [pc, #20]	; (8006ff0 <CDC_Init_FS+0x20>)
 8006fda:	f7fe fbef 	bl	80057bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006fde:	4905      	ldr	r1, [pc, #20]	; (8006ff4 <CDC_Init_FS+0x24>)
 8006fe0:	4803      	ldr	r0, [pc, #12]	; (8006ff0 <CDC_Init_FS+0x20>)
 8006fe2:	f7fe fc0d 	bl	8005800 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006fe6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	20000cac 	.word	0x20000cac
 8006ff0:	200001cc 	.word	0x200001cc
 8006ff4:	200004ac 	.word	0x200004ac

08006ff8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006ffc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007008:	b480      	push	{r7}
 800700a:	b083      	sub	sp, #12
 800700c:	af00      	add	r7, sp, #0
 800700e:	4603      	mov	r3, r0
 8007010:	6039      	str	r1, [r7, #0]
 8007012:	71fb      	strb	r3, [r7, #7]
 8007014:	4613      	mov	r3, r2
 8007016:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007018:	79fb      	ldrb	r3, [r7, #7]
 800701a:	2b23      	cmp	r3, #35	; 0x23
 800701c:	d84a      	bhi.n	80070b4 <CDC_Control_FS+0xac>
 800701e:	a201      	add	r2, pc, #4	; (adr r2, 8007024 <CDC_Control_FS+0x1c>)
 8007020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007024:	080070b5 	.word	0x080070b5
 8007028:	080070b5 	.word	0x080070b5
 800702c:	080070b5 	.word	0x080070b5
 8007030:	080070b5 	.word	0x080070b5
 8007034:	080070b5 	.word	0x080070b5
 8007038:	080070b5 	.word	0x080070b5
 800703c:	080070b5 	.word	0x080070b5
 8007040:	080070b5 	.word	0x080070b5
 8007044:	080070b5 	.word	0x080070b5
 8007048:	080070b5 	.word	0x080070b5
 800704c:	080070b5 	.word	0x080070b5
 8007050:	080070b5 	.word	0x080070b5
 8007054:	080070b5 	.word	0x080070b5
 8007058:	080070b5 	.word	0x080070b5
 800705c:	080070b5 	.word	0x080070b5
 8007060:	080070b5 	.word	0x080070b5
 8007064:	080070b5 	.word	0x080070b5
 8007068:	080070b5 	.word	0x080070b5
 800706c:	080070b5 	.word	0x080070b5
 8007070:	080070b5 	.word	0x080070b5
 8007074:	080070b5 	.word	0x080070b5
 8007078:	080070b5 	.word	0x080070b5
 800707c:	080070b5 	.word	0x080070b5
 8007080:	080070b5 	.word	0x080070b5
 8007084:	080070b5 	.word	0x080070b5
 8007088:	080070b5 	.word	0x080070b5
 800708c:	080070b5 	.word	0x080070b5
 8007090:	080070b5 	.word	0x080070b5
 8007094:	080070b5 	.word	0x080070b5
 8007098:	080070b5 	.word	0x080070b5
 800709c:	080070b5 	.word	0x080070b5
 80070a0:	080070b5 	.word	0x080070b5
 80070a4:	080070b5 	.word	0x080070b5
 80070a8:	080070b5 	.word	0x080070b5
 80070ac:	080070b5 	.word	0x080070b5
 80070b0:	080070b5 	.word	0x080070b5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80070b4:	bf00      	nop
  }

  return (USBD_OK);
 80070b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
 80070cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	ProcessReceivedData(Buf, *Len); // Обработка полученных данных
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4619      	mov	r1, r3
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f7ff ff4f 	bl	8006f78 <ProcessReceivedData>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80070da:	6879      	ldr	r1, [r7, #4]
 80070dc:	4805      	ldr	r0, [pc, #20]	; (80070f4 <CDC_Receive_FS+0x30>)
 80070de:	f7fe fb8f 	bl	8005800 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80070e2:	4804      	ldr	r0, [pc, #16]	; (80070f4 <CDC_Receive_FS+0x30>)
 80070e4:	f7fe fbf0 	bl	80058c8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80070e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	200001cc 	.word	0x200001cc

080070f8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	460b      	mov	r3, r1
 8007102:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007104:	2300      	movs	r3, #0
 8007106:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007108:	4b0d      	ldr	r3, [pc, #52]	; (8007140 <CDC_Transmit_FS+0x48>)
 800710a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800710e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007116:	2b00      	cmp	r3, #0
 8007118:	d001      	beq.n	800711e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800711a:	2301      	movs	r3, #1
 800711c:	e00b      	b.n	8007136 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800711e:	887b      	ldrh	r3, [r7, #2]
 8007120:	461a      	mov	r2, r3
 8007122:	6879      	ldr	r1, [r7, #4]
 8007124:	4806      	ldr	r0, [pc, #24]	; (8007140 <CDC_Transmit_FS+0x48>)
 8007126:	f7fe fb49 	bl	80057bc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800712a:	4805      	ldr	r0, [pc, #20]	; (8007140 <CDC_Transmit_FS+0x48>)
 800712c:	f7fe fb86 	bl	800583c <USBD_CDC_TransmitPacket>
 8007130:	4603      	mov	r3, r0
 8007132:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007134:	7bfb      	ldrb	r3, [r7, #15]
}
 8007136:	4618      	mov	r0, r3
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	200001cc 	.word	0x200001cc

08007144 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007144:	b480      	push	{r7}
 8007146:	b087      	sub	sp, #28
 8007148:	af00      	add	r7, sp, #0
 800714a:	60f8      	str	r0, [r7, #12]
 800714c:	60b9      	str	r1, [r7, #8]
 800714e:	4613      	mov	r3, r2
 8007150:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007152:	2300      	movs	r3, #0
 8007154:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007156:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800715a:	4618      	mov	r0, r3
 800715c:	371c      	adds	r7, #28
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
	...

08007168 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	4603      	mov	r3, r0
 8007170:	6039      	str	r1, [r7, #0]
 8007172:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	2212      	movs	r2, #18
 8007178:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800717a:	4b03      	ldr	r3, [pc, #12]	; (8007188 <USBD_FS_DeviceDescriptor+0x20>)
}
 800717c:	4618      	mov	r0, r3
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr
 8007188:	200000c8 	.word	0x200000c8

0800718c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800718c:	b480      	push	{r7}
 800718e:	b083      	sub	sp, #12
 8007190:	af00      	add	r7, sp, #0
 8007192:	4603      	mov	r3, r0
 8007194:	6039      	str	r1, [r7, #0]
 8007196:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	2204      	movs	r2, #4
 800719c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800719e:	4b03      	ldr	r3, [pc, #12]	; (80071ac <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr
 80071ac:	200000dc 	.word	0x200000dc

080071b0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	4603      	mov	r3, r0
 80071b8:	6039      	str	r1, [r7, #0]
 80071ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80071bc:	79fb      	ldrb	r3, [r7, #7]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d105      	bne.n	80071ce <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	4907      	ldr	r1, [pc, #28]	; (80071e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80071c6:	4808      	ldr	r0, [pc, #32]	; (80071e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80071c8:	f7ff fdc6 	bl	8006d58 <USBD_GetString>
 80071cc:	e004      	b.n	80071d8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80071ce:	683a      	ldr	r2, [r7, #0]
 80071d0:	4904      	ldr	r1, [pc, #16]	; (80071e4 <USBD_FS_ProductStrDescriptor+0x34>)
 80071d2:	4805      	ldr	r0, [pc, #20]	; (80071e8 <USBD_FS_ProductStrDescriptor+0x38>)
 80071d4:	f7ff fdc0 	bl	8006d58 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071d8:	4b02      	ldr	r3, [pc, #8]	; (80071e4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3708      	adds	r7, #8
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}
 80071e2:	bf00      	nop
 80071e4:	200014ac 	.word	0x200014ac
 80071e8:	08007b60 	.word	0x08007b60

080071ec <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	4603      	mov	r3, r0
 80071f4:	6039      	str	r1, [r7, #0]
 80071f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80071f8:	683a      	ldr	r2, [r7, #0]
 80071fa:	4904      	ldr	r1, [pc, #16]	; (800720c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80071fc:	4804      	ldr	r0, [pc, #16]	; (8007210 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80071fe:	f7ff fdab 	bl	8006d58 <USBD_GetString>
  return USBD_StrDesc;
 8007202:	4b02      	ldr	r3, [pc, #8]	; (800720c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007204:	4618      	mov	r0, r3
 8007206:	3708      	adds	r7, #8
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	200014ac 	.word	0x200014ac
 8007210:	08007b78 	.word	0x08007b78

08007214 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	4603      	mov	r3, r0
 800721c:	6039      	str	r1, [r7, #0]
 800721e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	221a      	movs	r2, #26
 8007224:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007226:	f000 f843 	bl	80072b0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800722a:	4b02      	ldr	r3, [pc, #8]	; (8007234 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800722c:	4618      	mov	r0, r3
 800722e:	3708      	adds	r7, #8
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	200000e0 	.word	0x200000e0

08007238 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	4603      	mov	r3, r0
 8007240:	6039      	str	r1, [r7, #0]
 8007242:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007244:	79fb      	ldrb	r3, [r7, #7]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d105      	bne.n	8007256 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800724a:	683a      	ldr	r2, [r7, #0]
 800724c:	4907      	ldr	r1, [pc, #28]	; (800726c <USBD_FS_ConfigStrDescriptor+0x34>)
 800724e:	4808      	ldr	r0, [pc, #32]	; (8007270 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007250:	f7ff fd82 	bl	8006d58 <USBD_GetString>
 8007254:	e004      	b.n	8007260 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007256:	683a      	ldr	r2, [r7, #0]
 8007258:	4904      	ldr	r1, [pc, #16]	; (800726c <USBD_FS_ConfigStrDescriptor+0x34>)
 800725a:	4805      	ldr	r0, [pc, #20]	; (8007270 <USBD_FS_ConfigStrDescriptor+0x38>)
 800725c:	f7ff fd7c 	bl	8006d58 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007260:	4b02      	ldr	r3, [pc, #8]	; (800726c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007262:	4618      	mov	r0, r3
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	200014ac 	.word	0x200014ac
 8007270:	08007b8c 	.word	0x08007b8c

08007274 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	4603      	mov	r3, r0
 800727c:	6039      	str	r1, [r7, #0]
 800727e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007280:	79fb      	ldrb	r3, [r7, #7]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d105      	bne.n	8007292 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007286:	683a      	ldr	r2, [r7, #0]
 8007288:	4907      	ldr	r1, [pc, #28]	; (80072a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800728a:	4808      	ldr	r0, [pc, #32]	; (80072ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 800728c:	f7ff fd64 	bl	8006d58 <USBD_GetString>
 8007290:	e004      	b.n	800729c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007292:	683a      	ldr	r2, [r7, #0]
 8007294:	4904      	ldr	r1, [pc, #16]	; (80072a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007296:	4805      	ldr	r0, [pc, #20]	; (80072ac <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007298:	f7ff fd5e 	bl	8006d58 <USBD_GetString>
  }
  return USBD_StrDesc;
 800729c:	4b02      	ldr	r3, [pc, #8]	; (80072a8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3708      	adds	r7, #8
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	200014ac 	.word	0x200014ac
 80072ac:	08007b98 	.word	0x08007b98

080072b0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80072b6:	4b0f      	ldr	r3, [pc, #60]	; (80072f4 <Get_SerialNum+0x44>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80072bc:	4b0e      	ldr	r3, [pc, #56]	; (80072f8 <Get_SerialNum+0x48>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80072c2:	4b0e      	ldr	r3, [pc, #56]	; (80072fc <Get_SerialNum+0x4c>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4413      	add	r3, r2
 80072ce:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d009      	beq.n	80072ea <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80072d6:	2208      	movs	r2, #8
 80072d8:	4909      	ldr	r1, [pc, #36]	; (8007300 <Get_SerialNum+0x50>)
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f000 f814 	bl	8007308 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80072e0:	2204      	movs	r2, #4
 80072e2:	4908      	ldr	r1, [pc, #32]	; (8007304 <Get_SerialNum+0x54>)
 80072e4:	68b8      	ldr	r0, [r7, #8]
 80072e6:	f000 f80f 	bl	8007308 <IntToUnicode>
  }
}
 80072ea:	bf00      	nop
 80072ec:	3710      	adds	r7, #16
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	1fff7a10 	.word	0x1fff7a10
 80072f8:	1fff7a14 	.word	0x1fff7a14
 80072fc:	1fff7a18 	.word	0x1fff7a18
 8007300:	200000e2 	.word	0x200000e2
 8007304:	200000f2 	.word	0x200000f2

08007308 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007308:	b480      	push	{r7}
 800730a:	b087      	sub	sp, #28
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	4613      	mov	r3, r2
 8007314:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007316:	2300      	movs	r3, #0
 8007318:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800731a:	2300      	movs	r3, #0
 800731c:	75fb      	strb	r3, [r7, #23]
 800731e:	e027      	b.n	8007370 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	0f1b      	lsrs	r3, r3, #28
 8007324:	2b09      	cmp	r3, #9
 8007326:	d80b      	bhi.n	8007340 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	0f1b      	lsrs	r3, r3, #28
 800732c:	b2da      	uxtb	r2, r3
 800732e:	7dfb      	ldrb	r3, [r7, #23]
 8007330:	005b      	lsls	r3, r3, #1
 8007332:	4619      	mov	r1, r3
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	440b      	add	r3, r1
 8007338:	3230      	adds	r2, #48	; 0x30
 800733a:	b2d2      	uxtb	r2, r2
 800733c:	701a      	strb	r2, [r3, #0]
 800733e:	e00a      	b.n	8007356 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	0f1b      	lsrs	r3, r3, #28
 8007344:	b2da      	uxtb	r2, r3
 8007346:	7dfb      	ldrb	r3, [r7, #23]
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	4619      	mov	r1, r3
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	440b      	add	r3, r1
 8007350:	3237      	adds	r2, #55	; 0x37
 8007352:	b2d2      	uxtb	r2, r2
 8007354:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	011b      	lsls	r3, r3, #4
 800735a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800735c:	7dfb      	ldrb	r3, [r7, #23]
 800735e:	005b      	lsls	r3, r3, #1
 8007360:	3301      	adds	r3, #1
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	4413      	add	r3, r2
 8007366:	2200      	movs	r2, #0
 8007368:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800736a:	7dfb      	ldrb	r3, [r7, #23]
 800736c:	3301      	adds	r3, #1
 800736e:	75fb      	strb	r3, [r7, #23]
 8007370:	7dfa      	ldrb	r2, [r7, #23]
 8007372:	79fb      	ldrb	r3, [r7, #7]
 8007374:	429a      	cmp	r2, r3
 8007376:	d3d3      	bcc.n	8007320 <IntToUnicode+0x18>
  }
}
 8007378:	bf00      	nop
 800737a:	bf00      	nop
 800737c:	371c      	adds	r7, #28
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
	...

08007388 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b08a      	sub	sp, #40	; 0x28
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007390:	f107 0314 	add.w	r3, r7, #20
 8007394:	2200      	movs	r2, #0
 8007396:	601a      	str	r2, [r3, #0]
 8007398:	605a      	str	r2, [r3, #4]
 800739a:	609a      	str	r2, [r3, #8]
 800739c:	60da      	str	r2, [r3, #12]
 800739e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073a8:	d13a      	bne.n	8007420 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80073aa:	2300      	movs	r3, #0
 80073ac:	613b      	str	r3, [r7, #16]
 80073ae:	4b1e      	ldr	r3, [pc, #120]	; (8007428 <HAL_PCD_MspInit+0xa0>)
 80073b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b2:	4a1d      	ldr	r2, [pc, #116]	; (8007428 <HAL_PCD_MspInit+0xa0>)
 80073b4:	f043 0301 	orr.w	r3, r3, #1
 80073b8:	6313      	str	r3, [r2, #48]	; 0x30
 80073ba:	4b1b      	ldr	r3, [pc, #108]	; (8007428 <HAL_PCD_MspInit+0xa0>)
 80073bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073be:	f003 0301 	and.w	r3, r3, #1
 80073c2:	613b      	str	r3, [r7, #16]
 80073c4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80073c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80073ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073cc:	2302      	movs	r3, #2
 80073ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073d0:	2300      	movs	r3, #0
 80073d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073d4:	2303      	movs	r3, #3
 80073d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80073d8:	230a      	movs	r3, #10
 80073da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073dc:	f107 0314 	add.w	r3, r7, #20
 80073e0:	4619      	mov	r1, r3
 80073e2:	4812      	ldr	r0, [pc, #72]	; (800742c <HAL_PCD_MspInit+0xa4>)
 80073e4:	f7f9 fc58 	bl	8000c98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80073e8:	4b0f      	ldr	r3, [pc, #60]	; (8007428 <HAL_PCD_MspInit+0xa0>)
 80073ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ec:	4a0e      	ldr	r2, [pc, #56]	; (8007428 <HAL_PCD_MspInit+0xa0>)
 80073ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073f2:	6353      	str	r3, [r2, #52]	; 0x34
 80073f4:	2300      	movs	r3, #0
 80073f6:	60fb      	str	r3, [r7, #12]
 80073f8:	4b0b      	ldr	r3, [pc, #44]	; (8007428 <HAL_PCD_MspInit+0xa0>)
 80073fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073fc:	4a0a      	ldr	r2, [pc, #40]	; (8007428 <HAL_PCD_MspInit+0xa0>)
 80073fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007402:	6453      	str	r3, [r2, #68]	; 0x44
 8007404:	4b08      	ldr	r3, [pc, #32]	; (8007428 <HAL_PCD_MspInit+0xa0>)
 8007406:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007408:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800740c:	60fb      	str	r3, [r7, #12]
 800740e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007410:	2200      	movs	r2, #0
 8007412:	2100      	movs	r1, #0
 8007414:	2043      	movs	r0, #67	; 0x43
 8007416:	f7f9 fc08 	bl	8000c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800741a:	2043      	movs	r0, #67	; 0x43
 800741c:	f7f9 fc21 	bl	8000c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007420:	bf00      	nop
 8007422:	3728      	adds	r7, #40	; 0x28
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}
 8007428:	40023800 	.word	0x40023800
 800742c:	40020000 	.word	0x40020000

08007430 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b082      	sub	sp, #8
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007444:	4619      	mov	r1, r3
 8007446:	4610      	mov	r0, r2
 8007448:	f7fe fb27 	bl	8005a9a <USBD_LL_SetupStage>
}
 800744c:	bf00      	nop
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	460b      	mov	r3, r1
 800745e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007466:	78fa      	ldrb	r2, [r7, #3]
 8007468:	6879      	ldr	r1, [r7, #4]
 800746a:	4613      	mov	r3, r2
 800746c:	00db      	lsls	r3, r3, #3
 800746e:	4413      	add	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	440b      	add	r3, r1
 8007474:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	78fb      	ldrb	r3, [r7, #3]
 800747c:	4619      	mov	r1, r3
 800747e:	f7fe fb61 	bl	8005b44 <USBD_LL_DataOutStage>
}
 8007482:	bf00      	nop
 8007484:	3708      	adds	r7, #8
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b082      	sub	sp, #8
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
 8007492:	460b      	mov	r3, r1
 8007494:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800749c:	78fa      	ldrb	r2, [r7, #3]
 800749e:	6879      	ldr	r1, [r7, #4]
 80074a0:	4613      	mov	r3, r2
 80074a2:	00db      	lsls	r3, r3, #3
 80074a4:	4413      	add	r3, r2
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	440b      	add	r3, r1
 80074aa:	334c      	adds	r3, #76	; 0x4c
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	78fb      	ldrb	r3, [r7, #3]
 80074b0:	4619      	mov	r1, r3
 80074b2:	f7fe fbfa 	bl	8005caa <USBD_LL_DataInStage>
}
 80074b6:	bf00      	nop
 80074b8:	3708      	adds	r7, #8
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}

080074be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074be:	b580      	push	{r7, lr}
 80074c0:	b082      	sub	sp, #8
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7fe fd2e 	bl	8005f2e <USBD_LL_SOF>
}
 80074d2:	bf00      	nop
 80074d4:	3708      	adds	r7, #8
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074da:	b580      	push	{r7, lr}
 80074dc:	b084      	sub	sp, #16
 80074de:	af00      	add	r7, sp, #0
 80074e0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80074e2:	2301      	movs	r3, #1
 80074e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	68db      	ldr	r3, [r3, #12]
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d001      	beq.n	80074f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80074ee:	f7f9 f8db 	bl	80006a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80074f8:	7bfa      	ldrb	r2, [r7, #15]
 80074fa:	4611      	mov	r1, r2
 80074fc:	4618      	mov	r0, r3
 80074fe:	f7fe fcd8 	bl	8005eb2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007508:	4618      	mov	r0, r3
 800750a:	f7fe fc80 	bl	8005e0e <USBD_LL_Reset>
}
 800750e:	bf00      	nop
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
	...

08007518 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b082      	sub	sp, #8
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007526:	4618      	mov	r0, r3
 8007528:	f7fe fcd3 	bl	8005ed2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	6812      	ldr	r2, [r2, #0]
 800753a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800753e:	f043 0301 	orr.w	r3, r3, #1
 8007542:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a1b      	ldr	r3, [r3, #32]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d005      	beq.n	8007558 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800754c:	4b04      	ldr	r3, [pc, #16]	; (8007560 <HAL_PCD_SuspendCallback+0x48>)
 800754e:	691b      	ldr	r3, [r3, #16]
 8007550:	4a03      	ldr	r2, [pc, #12]	; (8007560 <HAL_PCD_SuspendCallback+0x48>)
 8007552:	f043 0306 	orr.w	r3, r3, #6
 8007556:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007558:	bf00      	nop
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}
 8007560:	e000ed00 	.word	0xe000ed00

08007564 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007572:	4618      	mov	r0, r3
 8007574:	f7fe fcc3 	bl	8005efe <USBD_LL_Resume>
}
 8007578:	bf00      	nop
 800757a:	3708      	adds	r7, #8
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b082      	sub	sp, #8
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	460b      	mov	r3, r1
 800758a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007592:	78fa      	ldrb	r2, [r7, #3]
 8007594:	4611      	mov	r1, r2
 8007596:	4618      	mov	r0, r3
 8007598:	f7fe fd1b 	bl	8005fd2 <USBD_LL_IsoOUTIncomplete>
}
 800759c:	bf00      	nop
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
 80075ac:	460b      	mov	r3, r1
 80075ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80075b6:	78fa      	ldrb	r2, [r7, #3]
 80075b8:	4611      	mov	r1, r2
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7fe fcd7 	bl	8005f6e <USBD_LL_IsoINIncomplete>
}
 80075c0:	bf00      	nop
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7fe fd2d 	bl	8006036 <USBD_LL_DevConnected>
}
 80075dc:	bf00      	nop
 80075de:	3708      	adds	r7, #8
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7fe fd2a 	bl	800604c <USBD_LL_DevDisconnected>
}
 80075f8:	bf00      	nop
 80075fa:	3708      	adds	r7, #8
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d13c      	bne.n	800768a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007610:	4a20      	ldr	r2, [pc, #128]	; (8007694 <USBD_LL_Init+0x94>)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a1e      	ldr	r2, [pc, #120]	; (8007694 <USBD_LL_Init+0x94>)
 800761c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007620:	4b1c      	ldr	r3, [pc, #112]	; (8007694 <USBD_LL_Init+0x94>)
 8007622:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007626:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007628:	4b1a      	ldr	r3, [pc, #104]	; (8007694 <USBD_LL_Init+0x94>)
 800762a:	2204      	movs	r2, #4
 800762c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800762e:	4b19      	ldr	r3, [pc, #100]	; (8007694 <USBD_LL_Init+0x94>)
 8007630:	2202      	movs	r2, #2
 8007632:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007634:	4b17      	ldr	r3, [pc, #92]	; (8007694 <USBD_LL_Init+0x94>)
 8007636:	2200      	movs	r2, #0
 8007638:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800763a:	4b16      	ldr	r3, [pc, #88]	; (8007694 <USBD_LL_Init+0x94>)
 800763c:	2202      	movs	r2, #2
 800763e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007640:	4b14      	ldr	r3, [pc, #80]	; (8007694 <USBD_LL_Init+0x94>)
 8007642:	2200      	movs	r2, #0
 8007644:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007646:	4b13      	ldr	r3, [pc, #76]	; (8007694 <USBD_LL_Init+0x94>)
 8007648:	2200      	movs	r2, #0
 800764a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800764c:	4b11      	ldr	r3, [pc, #68]	; (8007694 <USBD_LL_Init+0x94>)
 800764e:	2200      	movs	r2, #0
 8007650:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007652:	4b10      	ldr	r3, [pc, #64]	; (8007694 <USBD_LL_Init+0x94>)
 8007654:	2200      	movs	r2, #0
 8007656:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007658:	4b0e      	ldr	r3, [pc, #56]	; (8007694 <USBD_LL_Init+0x94>)
 800765a:	2200      	movs	r2, #0
 800765c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800765e:	480d      	ldr	r0, [pc, #52]	; (8007694 <USBD_LL_Init+0x94>)
 8007660:	f7f9 fcd1 	bl	8001006 <HAL_PCD_Init>
 8007664:	4603      	mov	r3, r0
 8007666:	2b00      	cmp	r3, #0
 8007668:	d001      	beq.n	800766e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800766a:	f7f9 f81d 	bl	80006a8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800766e:	2180      	movs	r1, #128	; 0x80
 8007670:	4808      	ldr	r0, [pc, #32]	; (8007694 <USBD_LL_Init+0x94>)
 8007672:	f7fa ff28 	bl	80024c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007676:	2240      	movs	r2, #64	; 0x40
 8007678:	2100      	movs	r1, #0
 800767a:	4806      	ldr	r0, [pc, #24]	; (8007694 <USBD_LL_Init+0x94>)
 800767c:	f7fa fedc 	bl	8002438 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007680:	2280      	movs	r2, #128	; 0x80
 8007682:	2101      	movs	r1, #1
 8007684:	4803      	ldr	r0, [pc, #12]	; (8007694 <USBD_LL_Init+0x94>)
 8007686:	f7fa fed7 	bl	8002438 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800768a:	2300      	movs	r3, #0
}
 800768c:	4618      	mov	r0, r3
 800768e:	3708      	adds	r7, #8
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}
 8007694:	200016ac 	.word	0x200016ac

08007698 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076a0:	2300      	movs	r3, #0
 80076a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076a4:	2300      	movs	r3, #0
 80076a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076ae:	4618      	mov	r0, r3
 80076b0:	f7f9 fdc6 	bl	8001240 <HAL_PCD_Start>
 80076b4:	4603      	mov	r3, r0
 80076b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076b8:	7bfb      	ldrb	r3, [r7, #15]
 80076ba:	4618      	mov	r0, r3
 80076bc:	f000 f942 	bl	8007944 <USBD_Get_USB_Status>
 80076c0:	4603      	mov	r3, r0
 80076c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b084      	sub	sp, #16
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	4608      	mov	r0, r1
 80076d8:	4611      	mov	r1, r2
 80076da:	461a      	mov	r2, r3
 80076dc:	4603      	mov	r3, r0
 80076de:	70fb      	strb	r3, [r7, #3]
 80076e0:	460b      	mov	r3, r1
 80076e2:	70bb      	strb	r3, [r7, #2]
 80076e4:	4613      	mov	r3, r2
 80076e6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076e8:	2300      	movs	r3, #0
 80076ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076ec:	2300      	movs	r3, #0
 80076ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80076f6:	78bb      	ldrb	r3, [r7, #2]
 80076f8:	883a      	ldrh	r2, [r7, #0]
 80076fa:	78f9      	ldrb	r1, [r7, #3]
 80076fc:	f7fa fa97 	bl	8001c2e <HAL_PCD_EP_Open>
 8007700:	4603      	mov	r3, r0
 8007702:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007704:	7bfb      	ldrb	r3, [r7, #15]
 8007706:	4618      	mov	r0, r3
 8007708:	f000 f91c 	bl	8007944 <USBD_Get_USB_Status>
 800770c:	4603      	mov	r3, r0
 800770e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007710:	7bbb      	ldrb	r3, [r7, #14]
}
 8007712:	4618      	mov	r0, r3
 8007714:	3710      	adds	r7, #16
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b084      	sub	sp, #16
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
 8007722:	460b      	mov	r3, r1
 8007724:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007726:	2300      	movs	r3, #0
 8007728:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800772a:	2300      	movs	r3, #0
 800772c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007734:	78fa      	ldrb	r2, [r7, #3]
 8007736:	4611      	mov	r1, r2
 8007738:	4618      	mov	r0, r3
 800773a:	f7fa fae0 	bl	8001cfe <HAL_PCD_EP_Close>
 800773e:	4603      	mov	r3, r0
 8007740:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007742:	7bfb      	ldrb	r3, [r7, #15]
 8007744:	4618      	mov	r0, r3
 8007746:	f000 f8fd 	bl	8007944 <USBD_Get_USB_Status>
 800774a:	4603      	mov	r3, r0
 800774c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800774e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007750:	4618      	mov	r0, r3
 8007752:	3710      	adds	r7, #16
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	460b      	mov	r3, r1
 8007762:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007764:	2300      	movs	r3, #0
 8007766:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007768:	2300      	movs	r3, #0
 800776a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007772:	78fa      	ldrb	r2, [r7, #3]
 8007774:	4611      	mov	r1, r2
 8007776:	4618      	mov	r0, r3
 8007778:	f7fa fbb8 	bl	8001eec <HAL_PCD_EP_SetStall>
 800777c:	4603      	mov	r3, r0
 800777e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007780:	7bfb      	ldrb	r3, [r7, #15]
 8007782:	4618      	mov	r0, r3
 8007784:	f000 f8de 	bl	8007944 <USBD_Get_USB_Status>
 8007788:	4603      	mov	r3, r0
 800778a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800778c:	7bbb      	ldrb	r3, [r7, #14]
}
 800778e:	4618      	mov	r0, r3
 8007790:	3710      	adds	r7, #16
 8007792:	46bd      	mov	sp, r7
 8007794:	bd80      	pop	{r7, pc}

08007796 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007796:	b580      	push	{r7, lr}
 8007798:	b084      	sub	sp, #16
 800779a:	af00      	add	r7, sp, #0
 800779c:	6078      	str	r0, [r7, #4]
 800779e:	460b      	mov	r3, r1
 80077a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077a2:	2300      	movs	r3, #0
 80077a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077b0:	78fa      	ldrb	r2, [r7, #3]
 80077b2:	4611      	mov	r1, r2
 80077b4:	4618      	mov	r0, r3
 80077b6:	f7fa fbfd 	bl	8001fb4 <HAL_PCD_EP_ClrStall>
 80077ba:	4603      	mov	r3, r0
 80077bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077be:	7bfb      	ldrb	r3, [r7, #15]
 80077c0:	4618      	mov	r0, r3
 80077c2:	f000 f8bf 	bl	8007944 <USBD_Get_USB_Status>
 80077c6:	4603      	mov	r3, r0
 80077c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	460b      	mov	r3, r1
 80077de:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077e6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80077e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	da0b      	bge.n	8007808 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80077f0:	78fb      	ldrb	r3, [r7, #3]
 80077f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077f6:	68f9      	ldr	r1, [r7, #12]
 80077f8:	4613      	mov	r3, r2
 80077fa:	00db      	lsls	r3, r3, #3
 80077fc:	4413      	add	r3, r2
 80077fe:	009b      	lsls	r3, r3, #2
 8007800:	440b      	add	r3, r1
 8007802:	333e      	adds	r3, #62	; 0x3e
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	e00b      	b.n	8007820 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007808:	78fb      	ldrb	r3, [r7, #3]
 800780a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800780e:	68f9      	ldr	r1, [r7, #12]
 8007810:	4613      	mov	r3, r2
 8007812:	00db      	lsls	r3, r3, #3
 8007814:	4413      	add	r3, r2
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	440b      	add	r3, r1
 800781a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800781e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007820:	4618      	mov	r0, r3
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b084      	sub	sp, #16
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	460b      	mov	r3, r1
 8007836:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007838:	2300      	movs	r3, #0
 800783a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800783c:	2300      	movs	r3, #0
 800783e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007846:	78fa      	ldrb	r2, [r7, #3]
 8007848:	4611      	mov	r1, r2
 800784a:	4618      	mov	r0, r3
 800784c:	f7fa f9ca 	bl	8001be4 <HAL_PCD_SetAddress>
 8007850:	4603      	mov	r3, r0
 8007852:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007854:	7bfb      	ldrb	r3, [r7, #15]
 8007856:	4618      	mov	r0, r3
 8007858:	f000 f874 	bl	8007944 <USBD_Get_USB_Status>
 800785c:	4603      	mov	r3, r0
 800785e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007860:	7bbb      	ldrb	r3, [r7, #14]
}
 8007862:	4618      	mov	r0, r3
 8007864:	3710      	adds	r7, #16
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}

0800786a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800786a:	b580      	push	{r7, lr}
 800786c:	b086      	sub	sp, #24
 800786e:	af00      	add	r7, sp, #0
 8007870:	60f8      	str	r0, [r7, #12]
 8007872:	607a      	str	r2, [r7, #4]
 8007874:	603b      	str	r3, [r7, #0]
 8007876:	460b      	mov	r3, r1
 8007878:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800787a:	2300      	movs	r3, #0
 800787c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800787e:	2300      	movs	r3, #0
 8007880:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007888:	7af9      	ldrb	r1, [r7, #11]
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	f7fa fae3 	bl	8001e58 <HAL_PCD_EP_Transmit>
 8007892:	4603      	mov	r3, r0
 8007894:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007896:	7dfb      	ldrb	r3, [r7, #23]
 8007898:	4618      	mov	r0, r3
 800789a:	f000 f853 	bl	8007944 <USBD_Get_USB_Status>
 800789e:	4603      	mov	r3, r0
 80078a0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80078a2:	7dbb      	ldrb	r3, [r7, #22]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3718      	adds	r7, #24
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b086      	sub	sp, #24
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	607a      	str	r2, [r7, #4]
 80078b6:	603b      	str	r3, [r7, #0]
 80078b8:	460b      	mov	r3, r1
 80078ba:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078bc:	2300      	movs	r3, #0
 80078be:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078c0:	2300      	movs	r3, #0
 80078c2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80078ca:	7af9      	ldrb	r1, [r7, #11]
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	f7fa fa5f 	bl	8001d92 <HAL_PCD_EP_Receive>
 80078d4:	4603      	mov	r3, r0
 80078d6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078d8:	7dfb      	ldrb	r3, [r7, #23]
 80078da:	4618      	mov	r0, r3
 80078dc:	f000 f832 	bl	8007944 <USBD_Get_USB_Status>
 80078e0:	4603      	mov	r3, r0
 80078e2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80078e4:	7dbb      	ldrb	r3, [r7, #22]
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3718      	adds	r7, #24
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b082      	sub	sp, #8
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	460b      	mov	r3, r1
 80078f8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007900:	78fa      	ldrb	r2, [r7, #3]
 8007902:	4611      	mov	r1, r2
 8007904:	4618      	mov	r0, r3
 8007906:	f7fa fa8f 	bl	8001e28 <HAL_PCD_EP_GetRxCount>
 800790a:	4603      	mov	r3, r0
}
 800790c:	4618      	mov	r0, r3
 800790e:	3708      	adds	r7, #8
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800791c:	4b03      	ldr	r3, [pc, #12]	; (800792c <USBD_static_malloc+0x18>)
}
 800791e:	4618      	mov	r0, r3
 8007920:	370c      	adds	r7, #12
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	20001bb8 	.word	0x20001bb8

08007930 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]

}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007944:	b480      	push	{r7}
 8007946:	b085      	sub	sp, #20
 8007948:	af00      	add	r7, sp, #0
 800794a:	4603      	mov	r3, r0
 800794c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800794e:	2300      	movs	r3, #0
 8007950:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007952:	79fb      	ldrb	r3, [r7, #7]
 8007954:	2b03      	cmp	r3, #3
 8007956:	d817      	bhi.n	8007988 <USBD_Get_USB_Status+0x44>
 8007958:	a201      	add	r2, pc, #4	; (adr r2, 8007960 <USBD_Get_USB_Status+0x1c>)
 800795a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795e:	bf00      	nop
 8007960:	08007971 	.word	0x08007971
 8007964:	08007977 	.word	0x08007977
 8007968:	0800797d 	.word	0x0800797d
 800796c:	08007983 	.word	0x08007983
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007970:	2300      	movs	r3, #0
 8007972:	73fb      	strb	r3, [r7, #15]
    break;
 8007974:	e00b      	b.n	800798e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007976:	2303      	movs	r3, #3
 8007978:	73fb      	strb	r3, [r7, #15]
    break;
 800797a:	e008      	b.n	800798e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800797c:	2301      	movs	r3, #1
 800797e:	73fb      	strb	r3, [r7, #15]
    break;
 8007980:	e005      	b.n	800798e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007982:	2303      	movs	r3, #3
 8007984:	73fb      	strb	r3, [r7, #15]
    break;
 8007986:	e002      	b.n	800798e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007988:	2303      	movs	r3, #3
 800798a:	73fb      	strb	r3, [r7, #15]
    break;
 800798c:	bf00      	nop
  }
  return usb_status;
 800798e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3714      	adds	r7, #20
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <atoi>:
 800799c:	220a      	movs	r2, #10
 800799e:	2100      	movs	r1, #0
 80079a0:	f000 b8c2 	b.w	8007b28 <strtol>

080079a4 <__errno>:
 80079a4:	4b01      	ldr	r3, [pc, #4]	; (80079ac <__errno+0x8>)
 80079a6:	6818      	ldr	r0, [r3, #0]
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	200000fc 	.word	0x200000fc

080079b0 <__libc_init_array>:
 80079b0:	b570      	push	{r4, r5, r6, lr}
 80079b2:	4d0d      	ldr	r5, [pc, #52]	; (80079e8 <__libc_init_array+0x38>)
 80079b4:	4c0d      	ldr	r4, [pc, #52]	; (80079ec <__libc_init_array+0x3c>)
 80079b6:	1b64      	subs	r4, r4, r5
 80079b8:	10a4      	asrs	r4, r4, #2
 80079ba:	2600      	movs	r6, #0
 80079bc:	42a6      	cmp	r6, r4
 80079be:	d109      	bne.n	80079d4 <__libc_init_array+0x24>
 80079c0:	4d0b      	ldr	r5, [pc, #44]	; (80079f0 <__libc_init_array+0x40>)
 80079c2:	4c0c      	ldr	r4, [pc, #48]	; (80079f4 <__libc_init_array+0x44>)
 80079c4:	f000 f8ba 	bl	8007b3c <_init>
 80079c8:	1b64      	subs	r4, r4, r5
 80079ca:	10a4      	asrs	r4, r4, #2
 80079cc:	2600      	movs	r6, #0
 80079ce:	42a6      	cmp	r6, r4
 80079d0:	d105      	bne.n	80079de <__libc_init_array+0x2e>
 80079d2:	bd70      	pop	{r4, r5, r6, pc}
 80079d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80079d8:	4798      	blx	r3
 80079da:	3601      	adds	r6, #1
 80079dc:	e7ee      	b.n	80079bc <__libc_init_array+0xc>
 80079de:	f855 3b04 	ldr.w	r3, [r5], #4
 80079e2:	4798      	blx	r3
 80079e4:	3601      	adds	r6, #1
 80079e6:	e7f2      	b.n	80079ce <__libc_init_array+0x1e>
 80079e8:	08007cc4 	.word	0x08007cc4
 80079ec:	08007cc4 	.word	0x08007cc4
 80079f0:	08007cc4 	.word	0x08007cc4
 80079f4:	08007cc8 	.word	0x08007cc8

080079f8 <memcpy>:
 80079f8:	440a      	add	r2, r1
 80079fa:	4291      	cmp	r1, r2
 80079fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a00:	d100      	bne.n	8007a04 <memcpy+0xc>
 8007a02:	4770      	bx	lr
 8007a04:	b510      	push	{r4, lr}
 8007a06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a0e:	4291      	cmp	r1, r2
 8007a10:	d1f9      	bne.n	8007a06 <memcpy+0xe>
 8007a12:	bd10      	pop	{r4, pc}

08007a14 <memset>:
 8007a14:	4402      	add	r2, r0
 8007a16:	4603      	mov	r3, r0
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d100      	bne.n	8007a1e <memset+0xa>
 8007a1c:	4770      	bx	lr
 8007a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8007a22:	e7f9      	b.n	8007a18 <memset+0x4>

08007a24 <_strtol_l.constprop.0>:
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a2a:	d001      	beq.n	8007a30 <_strtol_l.constprop.0+0xc>
 8007a2c:	2b24      	cmp	r3, #36	; 0x24
 8007a2e:	d906      	bls.n	8007a3e <_strtol_l.constprop.0+0x1a>
 8007a30:	f7ff ffb8 	bl	80079a4 <__errno>
 8007a34:	2316      	movs	r3, #22
 8007a36:	6003      	str	r3, [r0, #0]
 8007a38:	2000      	movs	r0, #0
 8007a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a3e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007b24 <_strtol_l.constprop.0+0x100>
 8007a42:	460d      	mov	r5, r1
 8007a44:	462e      	mov	r6, r5
 8007a46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a4a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007a4e:	f017 0708 	ands.w	r7, r7, #8
 8007a52:	d1f7      	bne.n	8007a44 <_strtol_l.constprop.0+0x20>
 8007a54:	2c2d      	cmp	r4, #45	; 0x2d
 8007a56:	d132      	bne.n	8007abe <_strtol_l.constprop.0+0x9a>
 8007a58:	782c      	ldrb	r4, [r5, #0]
 8007a5a:	2701      	movs	r7, #1
 8007a5c:	1cb5      	adds	r5, r6, #2
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d05b      	beq.n	8007b1a <_strtol_l.constprop.0+0xf6>
 8007a62:	2b10      	cmp	r3, #16
 8007a64:	d109      	bne.n	8007a7a <_strtol_l.constprop.0+0x56>
 8007a66:	2c30      	cmp	r4, #48	; 0x30
 8007a68:	d107      	bne.n	8007a7a <_strtol_l.constprop.0+0x56>
 8007a6a:	782c      	ldrb	r4, [r5, #0]
 8007a6c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007a70:	2c58      	cmp	r4, #88	; 0x58
 8007a72:	d14d      	bne.n	8007b10 <_strtol_l.constprop.0+0xec>
 8007a74:	786c      	ldrb	r4, [r5, #1]
 8007a76:	2310      	movs	r3, #16
 8007a78:	3502      	adds	r5, #2
 8007a7a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007a7e:	f108 38ff 	add.w	r8, r8, #4294967295
 8007a82:	f04f 0c00 	mov.w	ip, #0
 8007a86:	fbb8 f9f3 	udiv	r9, r8, r3
 8007a8a:	4666      	mov	r6, ip
 8007a8c:	fb03 8a19 	mls	sl, r3, r9, r8
 8007a90:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007a94:	f1be 0f09 	cmp.w	lr, #9
 8007a98:	d816      	bhi.n	8007ac8 <_strtol_l.constprop.0+0xa4>
 8007a9a:	4674      	mov	r4, lr
 8007a9c:	42a3      	cmp	r3, r4
 8007a9e:	dd24      	ble.n	8007aea <_strtol_l.constprop.0+0xc6>
 8007aa0:	f1bc 0f00 	cmp.w	ip, #0
 8007aa4:	db1e      	blt.n	8007ae4 <_strtol_l.constprop.0+0xc0>
 8007aa6:	45b1      	cmp	r9, r6
 8007aa8:	d31c      	bcc.n	8007ae4 <_strtol_l.constprop.0+0xc0>
 8007aaa:	d101      	bne.n	8007ab0 <_strtol_l.constprop.0+0x8c>
 8007aac:	45a2      	cmp	sl, r4
 8007aae:	db19      	blt.n	8007ae4 <_strtol_l.constprop.0+0xc0>
 8007ab0:	fb06 4603 	mla	r6, r6, r3, r4
 8007ab4:	f04f 0c01 	mov.w	ip, #1
 8007ab8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007abc:	e7e8      	b.n	8007a90 <_strtol_l.constprop.0+0x6c>
 8007abe:	2c2b      	cmp	r4, #43	; 0x2b
 8007ac0:	bf04      	itt	eq
 8007ac2:	782c      	ldrbeq	r4, [r5, #0]
 8007ac4:	1cb5      	addeq	r5, r6, #2
 8007ac6:	e7ca      	b.n	8007a5e <_strtol_l.constprop.0+0x3a>
 8007ac8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007acc:	f1be 0f19 	cmp.w	lr, #25
 8007ad0:	d801      	bhi.n	8007ad6 <_strtol_l.constprop.0+0xb2>
 8007ad2:	3c37      	subs	r4, #55	; 0x37
 8007ad4:	e7e2      	b.n	8007a9c <_strtol_l.constprop.0+0x78>
 8007ad6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007ada:	f1be 0f19 	cmp.w	lr, #25
 8007ade:	d804      	bhi.n	8007aea <_strtol_l.constprop.0+0xc6>
 8007ae0:	3c57      	subs	r4, #87	; 0x57
 8007ae2:	e7db      	b.n	8007a9c <_strtol_l.constprop.0+0x78>
 8007ae4:	f04f 3cff 	mov.w	ip, #4294967295
 8007ae8:	e7e6      	b.n	8007ab8 <_strtol_l.constprop.0+0x94>
 8007aea:	f1bc 0f00 	cmp.w	ip, #0
 8007aee:	da05      	bge.n	8007afc <_strtol_l.constprop.0+0xd8>
 8007af0:	2322      	movs	r3, #34	; 0x22
 8007af2:	6003      	str	r3, [r0, #0]
 8007af4:	4646      	mov	r6, r8
 8007af6:	b942      	cbnz	r2, 8007b0a <_strtol_l.constprop.0+0xe6>
 8007af8:	4630      	mov	r0, r6
 8007afa:	e79e      	b.n	8007a3a <_strtol_l.constprop.0+0x16>
 8007afc:	b107      	cbz	r7, 8007b00 <_strtol_l.constprop.0+0xdc>
 8007afe:	4276      	negs	r6, r6
 8007b00:	2a00      	cmp	r2, #0
 8007b02:	d0f9      	beq.n	8007af8 <_strtol_l.constprop.0+0xd4>
 8007b04:	f1bc 0f00 	cmp.w	ip, #0
 8007b08:	d000      	beq.n	8007b0c <_strtol_l.constprop.0+0xe8>
 8007b0a:	1e69      	subs	r1, r5, #1
 8007b0c:	6011      	str	r1, [r2, #0]
 8007b0e:	e7f3      	b.n	8007af8 <_strtol_l.constprop.0+0xd4>
 8007b10:	2430      	movs	r4, #48	; 0x30
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1b1      	bne.n	8007a7a <_strtol_l.constprop.0+0x56>
 8007b16:	2308      	movs	r3, #8
 8007b18:	e7af      	b.n	8007a7a <_strtol_l.constprop.0+0x56>
 8007b1a:	2c30      	cmp	r4, #48	; 0x30
 8007b1c:	d0a5      	beq.n	8007a6a <_strtol_l.constprop.0+0x46>
 8007b1e:	230a      	movs	r3, #10
 8007b20:	e7ab      	b.n	8007a7a <_strtol_l.constprop.0+0x56>
 8007b22:	bf00      	nop
 8007b24:	08007bb9 	.word	0x08007bb9

08007b28 <strtol>:
 8007b28:	4613      	mov	r3, r2
 8007b2a:	460a      	mov	r2, r1
 8007b2c:	4601      	mov	r1, r0
 8007b2e:	4802      	ldr	r0, [pc, #8]	; (8007b38 <strtol+0x10>)
 8007b30:	6800      	ldr	r0, [r0, #0]
 8007b32:	f7ff bf77 	b.w	8007a24 <_strtol_l.constprop.0>
 8007b36:	bf00      	nop
 8007b38:	200000fc 	.word	0x200000fc

08007b3c <_init>:
 8007b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b3e:	bf00      	nop
 8007b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b42:	bc08      	pop	{r3}
 8007b44:	469e      	mov	lr, r3
 8007b46:	4770      	bx	lr

08007b48 <_fini>:
 8007b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b4a:	bf00      	nop
 8007b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b4e:	bc08      	pop	{r3}
 8007b50:	469e      	mov	lr, r3
 8007b52:	4770      	bx	lr
